; ModuleID = 'secp256k1.c'
source_filename = "secp256k1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.secp256k1_context_struct = type { %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_callback, %struct.secp256k1_callback, i32 }
%struct.secp256k1_ecmult_gen_context = type { i32, %struct.secp256k1_scalar, %struct.secp256k1_gej }
%struct.secp256k1_scalar = type { [4 x i64] }
%struct.secp256k1_gej = type { %struct.secp256k1_fe, %struct.secp256k1_fe, %struct.secp256k1_fe, i32 }
%struct.secp256k1_fe = type { [5 x i64] }
%struct.secp256k1_callback = type { void (i8*, i8*)*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.secp256k1_modinv64_modinfo = type { %struct.secp256k1_modinv64_signed62, i64 }
%struct.secp256k1_modinv64_signed62 = type { [5 x i64] }
%struct.secp256k1_ge_storage = type { %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage }
%struct.secp256k1_fe_storage = type { [4 x i64] }
%struct.secp256k1_ge = type { %struct.secp256k1_fe, %struct.secp256k1_fe, i32 }
%struct.secp256k1_scratch_space_struct = type { [8 x i8], i8*, i64, i64 }
%struct.secp256k1_pubkey = type { [64 x i8] }
%struct.secp256k1_ecdsa_signature = type { [64 x i8] }
%struct.secp256k1_rfc6979_hmac_sha256 = type { [32 x i8], [32 x i8], i32 }
%struct.secp256k1_sha256 = type { [8 x i32], [64 x i8], i64 }
%struct.secp256k1_strauss_point_state = type { [129 x i32], [129 x i32], i32, i32 }
%struct.secp256k1_strauss_state = type { %struct.secp256k1_fe*, %struct.secp256k1_ge*, %struct.secp256k1_strauss_point_state* }
%struct.secp256k1_modinv64_trans2x2 = type { i64, i64, i64, i64 }
%struct.secp256k1_hmac_sha256 = type { %struct.secp256k1_sha256, %struct.secp256k1_sha256 }

@secp256k1_context_static_ = internal constant %struct.secp256k1_context_struct { %struct.secp256k1_ecmult_gen_context zeroinitializer, %struct.secp256k1_callback { void (i8*, i8*)* @secp256k1_default_illegal_callback_fn, i8* null }, %struct.secp256k1_callback { void (i8*, i8*)* @secp256k1_default_error_callback_fn, i8* null }, i32 0 }, align 8
@secp256k1_context_static = dso_local global %struct.secp256k1_context_struct* @secp256k1_context_static_, align 8
@secp256k1_context_no_precomp = dso_local global %struct.secp256k1_context_struct* @secp256k1_context_static_, align 8
@default_error_callback = internal constant %struct.secp256k1_callback { void (i8*, i8*)* @secp256k1_default_error_callback_fn, i8* null }, align 8
@.str = private unnamed_addr constant [17 x i8] c"self test failed\00", align 1
@default_illegal_callback = internal constant %struct.secp256k1_callback { void (i8*, i8*)* @secp256k1_default_illegal_callback_fn, i8* null }, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid flags\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"prealloc != NULL\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"ctx != secp256k1_context_static\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"pubkey != NULL\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"input != NULL\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"outputlen != NULL\00", align 1
@.str.7 = private unnamed_addr constant [70 x i8] c"*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33u : 65u)\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"output != NULL\00", align 1
@.str.9 = private unnamed_addr constant [72 x i8] c"(flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"sig != NULL\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"input64 != NULL\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"output64 != NULL\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"sigin != NULL\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"msghash32 != NULL\00", align 1
@secp256k1_nonce_function_rfc6979 = dso_local constant i32 (i8*, i8*, i8*, i8*, i8*, i32)* @nonce_function_rfc6979, align 8
@secp256k1_nonce_function_default = dso_local constant i32 (i8*, i8*, i8*, i8*, i8*, i32)* @nonce_function_rfc6979, align 8
@.str.15 = private unnamed_addr constant [60 x i8] c"secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx)\00", align 1
@.str.16 = private unnamed_addr constant [18 x i8] c"signature != NULL\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"seckey != NULL\00", align 1
@secp256k1_scalar_zero = internal constant %struct.secp256k1_scalar zeroinitializer, align 8
@.str.18 = private unnamed_addr constant [16 x i8] c"tweak32 != NULL\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"pubnonce != NULL\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"n >= 1\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"pubnonces != NULL\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"pubnonces[i] != NULL\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"hash32 != NULL\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"tag != NULL\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"msg != NULL\00", align 1
@secp256k1_selftest_sha256.input63 = internal global i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.26, i32 0, i32 0), align 8
@.str.26 = private unnamed_addr constant [64 x i8] c"For this sample, this 63-byte string will be used as input data\00", align 1
@secp256k1_selftest_sha256.output32 = internal constant [32 x i8] c"\F0\8Ax\CB\BA\EE\08+\05*\E0p\8F2\FA\1EP\C5\C4!\AAw+\A5\DB\B4\06\A2\EAk\E3B", align 16
@.str.27 = private unnamed_addr constant [14 x i8] c"Out of memory\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.28 = private unnamed_addr constant [37 x i8] c"[libsecp256k1] illegal argument: %s\0A\00", align 1
@.str.29 = private unnamed_addr constant [54 x i8] c"[libsecp256k1] internal consistency check failed: %s\0A\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"scratch\00", align 1
@.str.31 = private unnamed_addr constant [22 x i8] c"invalid scratch space\00", align 1
@secp256k1_fe_const_b = internal constant %struct.secp256k1_fe { [5 x i64] [i64 7, i64 0, i64 0, i64 0, i64 0] }, align 8
@.str.32 = private unnamed_addr constant [30 x i8] c"!secp256k1_fe_is_zero(&ge->x)\00", align 1
@secp256k1_ecdsa_const_p_minus_order = internal constant %struct.secp256k1_fe { [5 x i64] [i64 3836686497331950, i64 445351433356290, i64 21319971, i64 0, i64 0] }, align 8
@secp256k1_ecdsa_const_order_as_fe = internal constant %struct.secp256k1_fe { [5 x i64] [i64 666908835070273, i64 4058248194014205, i64 4503599606050524, i64 4503599627370495, i64 281474976710655] }, align 8
@secp256k1_const_modinfo_scalar = internal constant %struct.secp256k1_modinv64_modinfo { %struct.secp256k1_modinv64_signed62 { [5 x i64] [i64 4598842128380346689, i64 3079181878673178862, i64 -21, i64 0, i64 256] }, i64 3815112494326173377 }, align 8
@secp256k1_const_beta = internal constant %struct.secp256k1_fe { [5 x i64] [i64 2652195750478318, i64 2059588628732947, i64 3435101582848073, i64 124274446989802, i64 135142927197564] }, align 8
@secp256k1_pre_g = external dso_local constant [8192 x %struct.secp256k1_ge_storage], align 16
@secp256k1_pre_g_128 = external dso_local constant [8192 x %struct.secp256k1_ge_storage], align 16
@secp256k1_scalar_split_lambda.minus_b1 = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 8022177200260244675, i64 -1998614352016537560, i64 0, i64 0] }, align 8
@secp256k1_scalar_split_lambda.minus_b2 = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 -2925706260434037204, i64 -8491525256057179027, i64 -2, i64 -1] }, align 8
@secp256k1_scalar_split_lambda.g1 = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 -1687969588364726223, i64 4443515802769476223, i64 -1698823648040391915, i64 3496713202691238861] }, align 8
@secp256k1_scalar_split_lambda.g2 = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 1545214808910233457, i64 2455034284347819718, i64 8022177200260244676, i64 -1998614352016537560] }, align 8
@secp256k1_const_lambda = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 -2377172193522762382, i64 1310022930574435960, i64 -6546514211138018214, i64 6008836872998760672] }, align 8
@secp256k1_rfc6979_hmac_sha256_initialize.zero = internal constant [1 x i8] zeroinitializer, align 1
@secp256k1_rfc6979_hmac_sha256_initialize.one = internal constant [1 x i8] c"\01", align 1
@secp256k1_rfc6979_hmac_sha256_generate.zero = internal constant [1 x i8] zeroinitializer, align 1
@secp256k1_scalar_one = internal constant %struct.secp256k1_scalar { [4 x i64] [i64 1, i64 0, i64 0, i64 0] }, align 8
@secp256k1_ecmult_gen_prec_table = external dso_local constant [64 x [16 x %struct.secp256k1_ge_storage]], align 16
@secp256k1_ge_const_g = internal constant %struct.secp256k1_ge { %struct.secp256k1_fe { [5 x i64] [i64 705178180786072, i64 3855836460717471, i64 4089131105950716, i64 3301581525494108, i64 133858670344668] }, %struct.secp256k1_fe { [5 x i64] [i64 2199641648059576, i64 1278080618437060, i64 3959378566518708, i64 3455034269351872, i64 79417610544803] }, i32 0 }, align 8
@secp256k1_fe_one = internal constant %struct.secp256k1_fe { [5 x i64] [i64 1, i64 0, i64 0, i64 0, i64 0] }, align 8
@secp256k1_const_modinfo_fe = internal constant %struct.secp256k1_modinv64_modinfo { %struct.secp256k1_modinv64_signed62 { [5 x i64] [i64 -4294968273, i64 0, i64 0, i64 0, i64 256] }, i64 2866531139136965327 }, align 8
@secp256k1_sha256_finalize.pad = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_selftest() #0 {
entry:
  %call = call i32 @secp256k1_selftest_passes()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef @default_error_callback, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_selftest_passes() #0 {
entry:
  %call = call i32 @secp256k1_selftest_sha256()
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %cb, i8* noundef %text) #0 {
entry:
  %cb.addr = alloca %struct.secp256k1_callback*, align 8
  %text.addr = alloca i8*, align 8
  store %struct.secp256k1_callback* %cb, %struct.secp256k1_callback** %cb.addr, align 8
  store i8* %text, i8** %text.addr, align 8
  %0 = load %struct.secp256k1_callback*, %struct.secp256k1_callback** %cb.addr, align 8
  %fn = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %0, i32 0, i32 0
  %1 = load void (i8*, i8*)*, void (i8*, i8*)** %fn, align 8
  %2 = load i8*, i8** %text.addr, align 8
  %3 = load %struct.secp256k1_callback*, %struct.secp256k1_callback** %cb.addr, align 8
  %data = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %3, i32 0, i32 1
  %4 = load i8*, i8** %data, align 8
  call void %1(i8* noundef %2, i8* noundef %4)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @secp256k1_context_preallocated_size(i32 noundef %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i64 208, i64* %ret, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %ret, align 8
  %cmp = icmp ne i64 %0, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 255
  %cmp1 = icmp ne i32 %and, 1
  %conv2 = zext i1 %cmp1 to i32
  %conv3 = sext i32 %conv2 to i64
  %tobool = icmp ne i64 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef @default_illegal_callback, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %do.end
  %2 = load i64, i64* %ret, align 8
  store i64 %2, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i64, i64* %retval, align 8
  ret i64 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @secp256k1_context_preallocated_clone_size(%struct.secp256k1_context_struct* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %ret = alloca i64, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i64 208, i64* %ret, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i64, i64* %ret, align 8
  ret i64 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.secp256k1_context_struct* @secp256k1_context_preallocated_create(i8* noundef %prealloc, i32 noundef %flags) #0 {
entry:
  %retval = alloca %struct.secp256k1_context_struct*, align 8
  %prealloc.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %prealloc_size = alloca i64, align 8
  %ret = alloca %struct.secp256k1_context_struct*, align 8
  store i8* %prealloc, i8** %prealloc.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @secp256k1_selftest()
  %0 = load i32, i32* %flags.addr, align 4
  %call = call i64 @secp256k1_context_preallocated_size(i32 noundef %0)
  store i64 %call, i64* %prealloc_size, align 8
  %1 = load i64, i64* %prealloc_size, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.secp256k1_context_struct* null, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load i8*, i8** %prealloc.addr, align 8
  %cmp1 = icmp ne i8* %2, null
  %conv = zext i1 %cmp1 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i8*, i8** %prealloc.addr, align 8
  %4 = bitcast i8* %3 to %struct.secp256k1_context_struct*
  store %struct.secp256k1_context_struct* %4, %struct.secp256k1_context_struct** %ret, align 8
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %5, i32 0, i32 1
  %6 = bitcast %struct.secp256k1_callback* %illegal_callback to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast (%struct.secp256k1_callback* @default_illegal_callback to i8*), i64 16, i1 false)
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %error_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %7, i32 0, i32 2
  %8 = bitcast %struct.secp256k1_callback* %error_callback to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.secp256k1_callback* @default_error_callback to i8*), i64 16, i1 false)
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %9 = load i32, i32* %flags.addr, align 4
  %and = and i32 %9, 255
  %cmp3 = icmp eq i32 %and, 1
  %conv4 = zext i1 %cmp3 to i32
  br label %do.end5

do.end5:                                          ; preds = %do.body2
  %10 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %10, i32 0, i32 0
  call void @secp256k1_ecmult_gen_context_build(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx)
  %11 = load i32, i32* %flags.addr, align 4
  %and6 = and i32 %11, 1024
  %tobool = icmp ne i32 %and6, 0
  %lnot = xor i1 %tobool, true
  %lnot7 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot7 to i32
  %12 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %declassify = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %12, i32 0, i32 3
  store i32 %lnot.ext, i32* %declassify, align 8
  %13 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  store %struct.secp256k1_context_struct* %13, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

return:                                           ; preds = %do.end5, %if.then
  %14 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %retval, align 8
  ret %struct.secp256k1_context_struct* %14
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_gen_context_build(%struct.secp256k1_ecmult_gen_context* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %0 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  call void @secp256k1_ecmult_gen_blind(%struct.secp256k1_ecmult_gen_context* noundef %0, i8* noundef null)
  %1 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %built = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %1, i32 0, i32 0
  store i32 1, i32* %built, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.secp256k1_context_struct* @secp256k1_context_create(i32 noundef %flags) #0 {
entry:
  %retval = alloca %struct.secp256k1_context_struct*, align 8
  %flags.addr = alloca i32, align 4
  %prealloc_size = alloca i64, align 8
  %ctx = alloca %struct.secp256k1_context_struct*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %call = call i64 @secp256k1_context_preallocated_size(i32 noundef %0)
  store i64 %call, i64* %prealloc_size, align 8
  %1 = load i64, i64* %prealloc_size, align 8
  %call1 = call i8* @checked_malloc(%struct.secp256k1_callback* noundef @default_error_callback, i64 noundef %1)
  %2 = bitcast i8* %call1 to %struct.secp256k1_context_struct*
  store %struct.secp256k1_context_struct* %2, %struct.secp256k1_context_struct** %ctx, align 8
  %3 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx, align 8
  %4 = bitcast %struct.secp256k1_context_struct* %3 to i8*
  %5 = load i32, i32* %flags.addr, align 4
  %call2 = call %struct.secp256k1_context_struct* @secp256k1_context_preallocated_create(i8* noundef %4, i32 noundef %5)
  %cmp = icmp eq %struct.secp256k1_context_struct* %call2, null
  %conv = zext i1 %cmp to i32
  %conv3 = sext i32 %conv to i64
  %tobool = icmp ne i64 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx, align 8
  %7 = bitcast %struct.secp256k1_context_struct* %6 to i8*
  call void @free(i8* noundef %7) #7
  store %struct.secp256k1_context_struct* null, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx, align 8
  store %struct.secp256k1_context_struct* %8, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %retval, align 8
  ret %struct.secp256k1_context_struct* %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @checked_malloc(%struct.secp256k1_callback* noundef %cb, i64 noundef %size) #0 {
entry:
  %cb.addr = alloca %struct.secp256k1_callback*, align 8
  %size.addr = alloca i64, align 8
  %ret = alloca i8*, align 8
  store %struct.secp256k1_callback* %cb, %struct.secp256k1_callback** %cb.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %call = call noalias i8* @malloc(i64 noundef %0) #7
  store i8* %call, i8** %ret, align 8
  %1 = load i8*, i8** %ret, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.secp256k1_callback*, %struct.secp256k1_callback** %cb.addr, align 8
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %2, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ret, align 8
  ret i8* %3
}

; Function Attrs: nounwind
declare dso_local void @free(i8* noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.secp256k1_context_struct* @secp256k1_context_preallocated_clone(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %prealloc) #0 {
entry:
  %retval = alloca %struct.secp256k1_context_struct*, align 8
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %prealloc.addr = alloca i8*, align 8
  %ret = alloca %struct.secp256k1_context_struct*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %prealloc, i8** %prealloc.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %prealloc.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  store %struct.secp256k1_context_struct* null, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load i8*, i8** %prealloc.addr, align 8
  %4 = bitcast i8* %3 to %struct.secp256k1_context_struct*
  store %struct.secp256k1_context_struct* %4, %struct.secp256k1_context_struct** %ret, align 8
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %7 = bitcast %struct.secp256k1_context_struct* %5 to i8*
  %8 = bitcast %struct.secp256k1_context_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 208, i1 false)
  %9 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  store %struct.secp256k1_context_struct* %9, %struct.secp256k1_context_struct** %retval, align 8
  br label %return

return:                                           ; preds = %do.end5, %if.then
  %10 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %retval, align 8
  ret %struct.secp256k1_context_struct* %10
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.secp256k1_context_struct* @secp256k1_context_clone(%struct.secp256k1_context_struct* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %ret = alloca %struct.secp256k1_context_struct*, align 8
  %prealloc_size = alloca i64, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %call = call i64 @secp256k1_context_preallocated_clone_size(%struct.secp256k1_context_struct* noundef %1)
  store i64 %call, i64* %prealloc_size, align 8
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %error_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 2
  %3 = load i64, i64* %prealloc_size, align 8
  %call1 = call i8* @checked_malloc(%struct.secp256k1_callback* noundef %error_callback, i64 noundef %3)
  %4 = bitcast i8* %call1 to %struct.secp256k1_context_struct*
  store %struct.secp256k1_context_struct* %4, %struct.secp256k1_context_struct** %ret, align 8
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  %7 = bitcast %struct.secp256k1_context_struct* %6 to i8*
  %call2 = call %struct.secp256k1_context_struct* @secp256k1_context_preallocated_clone(%struct.secp256k1_context_struct* noundef %5, i8* noundef %7)
  store %struct.secp256k1_context_struct* %call2, %struct.secp256k1_context_struct** %ret, align 8
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ret, align 8
  ret %struct.secp256k1_context_struct* %8
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_context_preallocated_destroy(%struct.secp256k1_context_struct* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** @secp256k1_context_static, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, %1
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp1 = icmp ne %struct.secp256k1_context_struct* %3, null
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.end
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 0
  call void @secp256k1_ecmult_gen_context_clear(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_gen_context_clear(%struct.secp256k1_ecmult_gen_context* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %0 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %built = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %0, i32 0, i32 0
  store i32 0, i32* %built, align 8
  %1 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %blind = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %1, i32 0, i32 1
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %blind)
  %2 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %2, i32 0, i32 2
  call void @secp256k1_gej_clear(%struct.secp256k1_gej* noundef %initial)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_context_destroy(%struct.secp256k1_context_struct* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  call void @secp256k1_context_preallocated_destroy(%struct.secp256k1_context_struct* noundef %1)
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %3 = bitcast %struct.secp256k1_context_struct* %2 to i8*
  call void @free(i8* noundef %3) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_context_set_illegal_callback(%struct.secp256k1_context_struct* noundef %ctx, void (i8*, i8*)* noundef %fun, i8* noundef %data) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %fun.addr = alloca void (i8*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store void (i8*, i8*)* %fun, void (i8*, i8*)** %fun.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** @secp256k1_context_static, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, %1
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %fun.addr, align 8
  %cmp1 = icmp eq void (i8*, i8*)* %3, null
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.end
  store void (i8*, i8*)* @secp256k1_default_illegal_callback_fn, void (i8*, i8*)** %fun.addr, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.end
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %fun.addr, align 8
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback5 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %5, i32 0, i32 1
  %fn = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %illegal_callback5, i32 0, i32 0
  store void (i8*, i8*)* %4, void (i8*, i8*)** %fn, align 8
  %6 = load i8*, i8** %data.addr, align 8
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback6 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %7, i32 0, i32 1
  %data7 = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %illegal_callback6, i32 0, i32 1
  store i8* %6, i8** %data7, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_default_illegal_callback_fn(i8* noundef %str, i8* noundef %data) #0 {
entry:
  %str.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** %str.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %1, i8* noundef getelementptr inbounds ([37 x i8], [37 x i8]* @.str.28, i64 0, i64 0), i8* noundef %2)
  call void @abort() #8
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_context_set_error_callback(%struct.secp256k1_context_struct* noundef %ctx, void (i8*, i8*)* noundef %fun, i8* noundef %data) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %fun.addr = alloca void (i8*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store void (i8*, i8*)* %fun, void (i8*, i8*)** %fun.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** @secp256k1_context_static, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, %1
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %fun.addr, align 8
  %cmp1 = icmp eq void (i8*, i8*)* %3, null
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.end
  store void (i8*, i8*)* @secp256k1_default_error_callback_fn, void (i8*, i8*)** %fun.addr, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.end
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %fun.addr, align 8
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %error_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %5, i32 0, i32 2
  %fn = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %error_callback, i32 0, i32 0
  store void (i8*, i8*)* %4, void (i8*, i8*)** %fn, align 8
  %6 = load i8*, i8** %data.addr, align 8
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %error_callback5 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %7, i32 0, i32 2
  %data6 = getelementptr inbounds %struct.secp256k1_callback, %struct.secp256k1_callback* %error_callback5, i32 0, i32 1
  store i8* %6, i8** %data6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_default_error_callback_fn(i8* noundef %str, i8* noundef %data) #0 {
entry:
  %str.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** %str.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %1, i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.29, i64 0, i64 0), i8* noundef %2)
  call void @abort() #8
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.secp256k1_scratch_space_struct* @secp256k1_scratch_space_create(%struct.secp256k1_context_struct* noundef %ctx, i64 noundef %max_size) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %max_size.addr = alloca i64, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i64 %max_size, i64* %max_size.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %error_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %1, i32 0, i32 2
  %2 = load i64, i64* %max_size.addr, align 8
  %call = call %struct.secp256k1_scratch_space_struct* @secp256k1_scratch_create(%struct.secp256k1_callback* noundef %error_callback, i64 noundef %2)
  ret %struct.secp256k1_scratch_space_struct* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.secp256k1_scratch_space_struct* @secp256k1_scratch_create(%struct.secp256k1_callback* noundef %error_callback, i64 noundef %size) #0 {
entry:
  %error_callback.addr = alloca %struct.secp256k1_callback*, align 8
  %size.addr = alloca i64, align 8
  %base_alloc = alloca i64, align 8
  %alloc = alloca i8*, align 8
  %ret = alloca %struct.secp256k1_scratch_space_struct*, align 8
  store %struct.secp256k1_callback* %error_callback, %struct.secp256k1_callback** %error_callback.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 32, i64* %base_alloc, align 8
  %0 = load %struct.secp256k1_callback*, %struct.secp256k1_callback** %error_callback.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %add = add i64 32, %1
  %call = call i8* @checked_malloc(%struct.secp256k1_callback* noundef %0, i64 noundef %add)
  store i8* %call, i8** %alloc, align 8
  %2 = load i8*, i8** %alloc, align 8
  %3 = bitcast i8* %2 to %struct.secp256k1_scratch_space_struct*
  store %struct.secp256k1_scratch_space_struct* %3, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %4 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %cmp = icmp ne %struct.secp256k1_scratch_space_struct* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %6 = bitcast %struct.secp256k1_scratch_space_struct* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  %7 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %magic = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %7, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %magic, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %arraydecay, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i64 0, i64 0), i64 8, i1 false)
  %8 = load i8*, i8** %alloc, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 32
  %9 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %data = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %9, i32 0, i32 1
  store i8* %add.ptr, i8** %data, align 8
  %10 = load i64, i64* %size.addr, align 8
  %11 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  %max_size = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %11, i32 0, i32 3
  store i64 %10, i64* %max_size, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %ret, align 8
  ret %struct.secp256k1_scratch_space_struct* %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @secp256k1_scratch_space_destroy(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_scratch_space_struct* noundef %scratch) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %scratch.addr = alloca %struct.secp256k1_scratch_space_struct*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_scratch_space_struct* %scratch, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %error_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %1, i32 0, i32 2
  %2 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  call void @secp256k1_scratch_destroy(%struct.secp256k1_callback* noundef %error_callback, %struct.secp256k1_scratch_space_struct* noundef %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scratch_destroy(%struct.secp256k1_callback* noundef %error_callback, %struct.secp256k1_scratch_space_struct* noundef %scratch) #0 {
entry:
  %error_callback.addr = alloca %struct.secp256k1_callback*, align 8
  %scratch.addr = alloca %struct.secp256k1_scratch_space_struct*, align 8
  store %struct.secp256k1_callback* %error_callback, %struct.secp256k1_callback** %error_callback.addr, align 8
  store %struct.secp256k1_scratch_space_struct* %scratch, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %0 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %cmp = icmp ne %struct.secp256k1_scratch_space_struct* %0, null
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %magic = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %1, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %magic, i64 0, i64 0
  %call = call i32 @secp256k1_memcmp_var(i8* noundef %arraydecay, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i64 0, i64 0), i64 noundef 8)
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load %struct.secp256k1_callback*, %struct.secp256k1_callback** %error_callback.addr, align 8
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %2, i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31, i64 0, i64 0))
  br label %if.end6

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %alloc_size = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %3, i32 0, i32 2
  %4 = load i64, i64* %alloc_size, align 8
  %cmp3 = icmp eq i64 %4, 0
  %conv = zext i1 %cmp3 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %5 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %magic4 = getelementptr inbounds %struct.secp256k1_scratch_space_struct, %struct.secp256k1_scratch_space_struct* %5, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [8 x i8], [8 x i8]* %magic4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %arraydecay5, i8 0, i64 8, i1 false)
  %6 = load %struct.secp256k1_scratch_space_struct*, %struct.secp256k1_scratch_space_struct** %scratch.addr, align 8
  %7 = bitcast %struct.secp256k1_scratch_space_struct* %6 to i8*
  call void @free(i8* noundef %7) #7
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %do.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_parse(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey, i8* noundef %input, i64 noundef %inputlen) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %input.addr = alloca i8*, align 8
  %inputlen.addr = alloca i64, align 8
  %Q = alloca %struct.secp256k1_ge, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i64 %inputlen, i64* %inputlen.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %4 = bitcast %struct.secp256k1_pubkey* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 64, i1 false)
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %5 = load i8*, i8** %input.addr, align 8
  %cmp7 = icmp ne i8* %5, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %7 = load i8*, i8** %input.addr, align 8
  %8 = load i64, i64* %inputlen.addr, align 8
  %call = call i32 @secp256k1_eckey_pubkey_parse(%struct.secp256k1_ge* noundef %Q, i8* noundef %7, i64 noundef %8)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %do.end16
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %do.end16
  %call20 = call i32 @secp256k1_ge_is_in_correct_subgroup(%struct.secp256k1_ge* noundef %Q)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end19
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end19
  %9 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %9, %struct.secp256k1_ge* noundef %Q)
  call void @secp256k1_ge_clear(%struct.secp256k1_ge* noundef %Q)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then18, %if.then13, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_pubkey_parse(%struct.secp256k1_ge* noundef %elem, i8* noundef %pub, i64 noundef %size) #0 {
entry:
  %retval = alloca i32, align 4
  %elem.addr = alloca %struct.secp256k1_ge*, align 8
  %pub.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %x = alloca %struct.secp256k1_fe, align 8
  %x31 = alloca %struct.secp256k1_fe, align 8
  %y = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge* %elem, %struct.secp256k1_ge** %elem.addr, align 8
  store i8* %pub, i8** %pub.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %cmp = icmp eq i64 %0, 33
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %pub.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 2
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i8*, i8** %pub.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %4 to i32
  %cmp5 = icmp eq i32 %conv4, 3
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %5 = load i8*, i8** %pub.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 1
  %call = call i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %x, i8* noundef %add.ptr)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %7 = load i8*, i8** %pub.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 3
  %conv10 = zext i1 %cmp9 to i32
  %call11 = call i32 @secp256k1_ge_set_xo_var(%struct.secp256k1_ge* noundef %6, %struct.secp256k1_fe* noundef %x, i32 noundef %conv10)
  %tobool12 = icmp ne i32 %call11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %9 = phi i1 [ false, %if.then ], [ %tobool12, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %lor.lhs.false, %entry
  %10 = load i64, i64* %size.addr, align 8
  %cmp13 = icmp eq i64 %10, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.else60

land.lhs.true15:                                  ; preds = %if.else
  %11 = load i8*, i8** %pub.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %12 to i32
  %cmp18 = icmp eq i32 %conv17, 4
  br i1 %cmp18, label %if.then30, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %land.lhs.true15
  %13 = load i8*, i8** %pub.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %14 to i32
  %cmp23 = icmp eq i32 %conv22, 6
  br i1 %cmp23, label %if.then30, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false20
  %15 = load i8*, i8** %pub.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %16 to i32
  %cmp28 = icmp eq i32 %conv27, 7
  br i1 %cmp28, label %if.then30, label %if.else60

if.then30:                                        ; preds = %lor.lhs.false25, %lor.lhs.false20, %land.lhs.true15
  %17 = load i8*, i8** %pub.addr, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %17, i64 1
  %call33 = call i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %x31, i8* noundef %add.ptr32)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %lor.lhs.false35, label %if.then39

lor.lhs.false35:                                  ; preds = %if.then30
  %18 = load i8*, i8** %pub.addr, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %18, i64 33
  %call37 = call i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %y, i8* noundef %add.ptr36)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end, label %if.then39

if.then39:                                        ; preds = %lor.lhs.false35, %if.then30
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false35
  %19 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  call void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %19, %struct.secp256k1_fe* noundef %x31, %struct.secp256k1_fe* noundef %y)
  %20 = load i8*, i8** %pub.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %21 to i32
  %cmp42 = icmp eq i32 %conv41, 6
  br i1 %cmp42, label %land.lhs.true49, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.end
  %22 = load i8*, i8** %pub.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %22, i64 0
  %23 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %23 to i32
  %cmp47 = icmp eq i32 %conv46, 7
  br i1 %cmp47, label %land.lhs.true49, label %if.end58

land.lhs.true49:                                  ; preds = %lor.lhs.false44, %if.end
  %call50 = call i32 @secp256k1_fe_is_odd(%struct.secp256k1_fe* noundef %y)
  %24 = load i8*, i8** %pub.addr, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %25 to i32
  %cmp53 = icmp eq i32 %conv52, 7
  %conv54 = zext i1 %cmp53 to i32
  %cmp55 = icmp ne i32 %call50, %conv54
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %land.lhs.true49
  store i32 0, i32* %retval, align 4
  br label %return

if.end58:                                         ; preds = %land.lhs.true49, %lor.lhs.false44
  %26 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %call59 = call i32 @secp256k1_ge_is_valid_var(%struct.secp256k1_ge* noundef %26)
  store i32 %call59, i32* %retval, align 4
  br label %return

if.else60:                                        ; preds = %lor.lhs.false25, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else60, %if.end58, %if.then57, %if.then39, %land.end
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ge_is_in_correct_subgroup(%struct.secp256k1_ge* noundef %ge) #0 {
entry:
  %ge.addr = alloca %struct.secp256k1_ge*, align 8
  store %struct.secp256k1_ge* %ge, %struct.secp256k1_ge** %ge.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %ge.addr, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %pubkey, %struct.secp256k1_ge* noundef %ge) #0 {
entry:
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %ge.addr = alloca %struct.secp256k1_ge*, align 8
  %s = alloca %struct.secp256k1_ge_storage, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store %struct.secp256k1_ge* %ge, %struct.secp256k1_ge** %ge.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %ge.addr, align 8
  call void @secp256k1_ge_to_storage(%struct.secp256k1_ge_storage* noundef %s, %struct.secp256k1_ge* noundef %0)
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %data = getelementptr inbounds %struct.secp256k1_pubkey, %struct.secp256k1_pubkey* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %data, i64 0, i64 0
  %2 = bitcast %struct.secp256k1_ge_storage* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 8 %2, i64 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_clear(%struct.secp256k1_ge* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  store i32 0, i32* %infinity, align 8
  %1 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %1, i32 0, i32 0
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %x)
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 1
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %y)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_serialize(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %output, i64* noundef %outputlen, %struct.secp256k1_pubkey* noundef %pubkey, i32 noundef %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %output.addr = alloca i8*, align 8
  %outputlen.addr = alloca i64*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %flags.addr = alloca i32, align 4
  %Q = alloca %struct.secp256k1_ge, align 8
  %len = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %output, i8** %output.addr, align 8
  store i64* %outputlen, i64** %outputlen.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i64*, i64** %outputlen.addr, align 8
  %cmp2 = icmp ne i64* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i64*, i64** %outputlen.addr, align 8
  %4 = load i64, i64* %3, align 8
  %5 = load i32, i32* %flags.addr, align 4
  %and = and i32 %5, 256
  %tobool7 = icmp ne i32 %and, 0
  %6 = zext i1 %tobool7 to i64
  %cond = select i1 %tobool7, i32 33, i32 65
  %conv8 = zext i32 %cond to i64
  %cmp9 = icmp uge i64 %4, %conv8
  %lnot11 = xor i1 %cmp9, true
  %lnot.ext12 = zext i1 %lnot11 to i32
  %conv13 = sext i32 %lnot.ext12 to i64
  %tobool14 = icmp ne i64 %conv13, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %do.body6
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback16 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %7, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback16, i8* noundef getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %do.body6
  br label %do.end18

do.end18:                                         ; preds = %if.end17
  %8 = load i64*, i64** %outputlen.addr, align 8
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %len, align 8
  %10 = load i64*, i64** %outputlen.addr, align 8
  store i64 0, i64* %10, align 8
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  %11 = load i8*, i8** %output.addr, align 8
  %cmp20 = icmp ne i8* %11, null
  %lnot22 = xor i1 %cmp20, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %conv24 = sext i32 %lnot.ext23 to i64
  %tobool25 = icmp ne i64 %conv24, 0
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %do.body19
  %12 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback27 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %12, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback27, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %do.body19
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  %13 = load i8*, i8** %output.addr, align 8
  %14 = load i64, i64* %len, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 %14, i1 false)
  br label %do.body30

do.body30:                                        ; preds = %do.end29
  %15 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp31 = icmp ne %struct.secp256k1_pubkey* %15, null
  %lnot33 = xor i1 %cmp31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  %conv35 = sext i32 %lnot.ext34 to i64
  %tobool36 = icmp ne i64 %conv35, 0
  br i1 %tobool36, label %if.then37, label %if.end39

if.then37:                                        ; preds = %do.body30
  %16 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback38 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %16, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback38, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %do.body30
  br label %do.end40

do.end40:                                         ; preds = %if.end39
  br label %do.body41

do.body41:                                        ; preds = %do.end40
  %17 = load i32, i32* %flags.addr, align 4
  %and42 = and i32 %17, 255
  %cmp43 = icmp eq i32 %and42, 2
  %lnot45 = xor i1 %cmp43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  %tobool48 = icmp ne i64 %conv47, 0
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %do.body41
  %18 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback50 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %18, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback50, i8* noundef getelementptr inbounds ([72 x i8], [72 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end51:                                         ; preds = %do.body41
  br label %do.end52

do.end52:                                         ; preds = %if.end51
  %19 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %20 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %call = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %19, %struct.secp256k1_ge* noundef %Q, %struct.secp256k1_pubkey* noundef %20)
  %tobool53 = icmp ne i32 %call, 0
  br i1 %tobool53, label %if.then54, label %if.end60

if.then54:                                        ; preds = %do.end52
  %21 = load i8*, i8** %output.addr, align 8
  %22 = load i32, i32* %flags.addr, align 4
  %and55 = and i32 %22, 256
  %call56 = call i32 @secp256k1_eckey_pubkey_serialize(%struct.secp256k1_ge* noundef %Q, i8* noundef %21, i64* noundef %len, i32 noundef %and55)
  store i32 %call56, i32* %ret, align 4
  %23 = load i32, i32* %ret, align 4
  %tobool57 = icmp ne i32 %23, 0
  br i1 %tobool57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.then54
  %24 = load i64, i64* %len, align 8
  %25 = load i64*, i64** %outputlen.addr, align 8
  store i64 %24, i64* %25, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.then54
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %do.end52
  %26 = load i32, i32* %ret, align 4
  store i32 %26, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end60, %if.then49, %if.then37, %if.then26, %if.then15, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ge* noundef %ge, %struct.secp256k1_pubkey* noundef %pubkey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %ge.addr = alloca %struct.secp256k1_ge*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %s = alloca %struct.secp256k1_ge_storage, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ge* %ge, %struct.secp256k1_ge** %ge.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %0 = bitcast %struct.secp256k1_ge_storage* %s to i8*
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %data = getelementptr inbounds %struct.secp256k1_pubkey, %struct.secp256k1_pubkey* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %data, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 1 %arrayidx, i64 64, i1 false)
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %ge.addr, align 8
  call void @secp256k1_ge_from_storage(%struct.secp256k1_ge* noundef %2, %struct.secp256k1_ge_storage* noundef %s)
  br label %do.body

do.body:                                          ; preds = %entry
  %3 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %ge.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %3, i32 0, i32 0
  %call = call i32 @secp256k1_fe_is_zero(%struct.secp256k1_fe* noundef %x)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool2 = icmp ne i64 %conv, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.32, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_pubkey_serialize(%struct.secp256k1_ge* noundef %elem, i8* noundef %pub, i64* noundef %size, i32 noundef %compressed) #0 {
entry:
  %retval = alloca i32, align 4
  %elem.addr = alloca %struct.secp256k1_ge*, align 8
  %pub.addr = alloca i8*, align 8
  %size.addr = alloca i64*, align 8
  %compressed.addr = alloca i32, align 4
  store %struct.secp256k1_ge* %elem, %struct.secp256k1_ge** %elem.addr, align 8
  store i8* %pub, i8** %pub.addr, align 8
  store i64* %size, i64** %size.addr, align 8
  store i32 %compressed, i32* %compressed.addr, align 4
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %call = call i32 @secp256k1_ge_is_infinity(%struct.secp256k1_ge* noundef %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %1, i32 0, i32 0
  call void @secp256k1_fe_normalize_var(%struct.secp256k1_fe* noundef %x)
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 1
  call void @secp256k1_fe_normalize_var(%struct.secp256k1_fe* noundef %y)
  %3 = load i8*, i8** %pub.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 0
  call void @secp256k1_fe_get_b32(i8* noundef %arrayidx, %struct.secp256k1_fe* noundef %x1)
  %5 = load i32, i32* %compressed.addr, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %6 = load i64*, i64** %size.addr, align 8
  store i64 33, i64* %6, align 8
  %7 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %y4 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %7, i32 0, i32 1
  %call5 = call i32 @secp256k1_fe_is_odd(%struct.secp256k1_fe* noundef %y4)
  %tobool6 = icmp ne i32 %call5, 0
  %8 = zext i1 %tobool6 to i64
  %cond = select i1 %tobool6, i32 3, i32 2
  %conv = trunc i32 %cond to i8
  %9 = load i8*, i8** %pub.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i64 0
  store i8 %conv, i8* %arrayidx7, align 1
  br label %if.end11

if.else:                                          ; preds = %if.end
  %10 = load i64*, i64** %size.addr, align 8
  store i64 65, i64* %10, align 8
  %11 = load i8*, i8** %pub.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i64 0
  store i8 4, i8* %arrayidx8, align 1
  %12 = load i8*, i8** %pub.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 33
  %13 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %elem.addr, align 8
  %y10 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %13, i32 0, i32 1
  call void @secp256k1_fe_get_b32(i8* noundef %arrayidx9, %struct.secp256k1_fe* noundef %y10)
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then3
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_cmp(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey0, %struct.secp256k1_pubkey* noundef %pubkey1) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey0.addr = alloca %struct.secp256k1_pubkey*, align 8
  %pubkey1.addr = alloca %struct.secp256k1_pubkey*, align 8
  %out = alloca [2 x [33 x i8]], align 16
  %pk = alloca [2 x %struct.secp256k1_pubkey*], align 16
  %i = alloca i32, align 4
  %out_size = alloca i64, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey0, %struct.secp256k1_pubkey** %pubkey0.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey1, %struct.secp256k1_pubkey** %pubkey1.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.secp256k1_pubkey*], [2 x %struct.secp256k1_pubkey*]* %pk, i64 0, i64 0
  store %struct.secp256k1_pubkey* %1, %struct.secp256k1_pubkey** %arrayidx, align 16
  %2 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.secp256k1_pubkey*], [2 x %struct.secp256k1_pubkey*]* %pk, i64 0, i64 1
  store %struct.secp256k1_pubkey* %2, %struct.secp256k1_pubkey** %arrayidx1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 2
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store i64 33, i64* %out_size, align 8
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [2 x [33 x i8]], [2 x [33 x i8]]* %out, i64 0, i64 %idxprom
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %arrayidx4, i64 0, i64 0
  %6 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %6 to i64
  %arrayidx6 = getelementptr inbounds [2 x %struct.secp256k1_pubkey*], [2 x %struct.secp256k1_pubkey*]* %pk, i64 0, i64 %idxprom5
  %7 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %arrayidx6, align 8
  %call = call i32 @secp256k1_ec_pubkey_serialize(%struct.secp256k1_context_struct* noundef %4, i8* noundef %arraydecay, i64* noundef %out_size, %struct.secp256k1_pubkey* noundef %7, i32 noundef 258)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [2 x [33 x i8]], [2 x [33 x i8]]* %out, i64 0, i64 %idxprom7
  %arraydecay9 = getelementptr inbounds [33 x i8], [33 x i8]* %arrayidx8, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %arraydecay9, i8 0, i64 33, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !4

for.end:                                          ; preds = %for.cond
  %arrayidx10 = getelementptr inbounds [2 x [33 x i8]], [2 x [33 x i8]]* %out, i64 0, i64 0
  %arraydecay11 = getelementptr inbounds [33 x i8], [33 x i8]* %arrayidx10, i64 0, i64 0
  %arrayidx12 = getelementptr inbounds [2 x [33 x i8]], [2 x [33 x i8]]* %out, i64 0, i64 1
  %arraydecay13 = getelementptr inbounds [33 x i8], [33 x i8]* %arrayidx12, i64 0, i64 0
  %call14 = call i32 @secp256k1_memcmp_var(i8* noundef %arraydecay11, i8* noundef %arraydecay13, i64 noundef 33)
  ret i32 %call14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_memcmp_var(i8* noundef %s1, i8* noundef %s2, i64 noundef %n) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %i = alloca i64, align 8
  %diff = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %s1.addr, align 8
  store i8* %0, i8** %p1, align 8
  %1 = load i8*, i8** %s2.addr, align 8
  store i8* %1, i8** %p2, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8
  %3 = load i64, i64* %n.addr, align 8
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p1, align 8
  %5 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %7 = load i8*, i8** %p2, align 8
  %8 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %9 to i32
  %sub = sub nsw i32 %conv, %conv2
  store i32 %sub, i32* %diff, align 4
  %10 = load i32, i32* %diff, align 4
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %diff, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_signature_parse_der(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ecdsa_signature* noundef %sig, i8* noundef %input, i64 noundef %inputlen) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %input.addr = alloca i8*, align 8
  %inputlen.addr = alloca i64, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i64 %inputlen, i64* %inputlen.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_ecdsa_signature* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %input.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load i8*, i8** %input.addr, align 8
  %6 = load i64, i64* %inputlen.addr, align 8
  %call = call i32 @secp256k1_ecdsa_sig_parse(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, i8* noundef %5, i64 noundef %6)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.then18, label %if.else

if.then18:                                        ; preds = %do.end16
  %7 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  call void @secp256k1_ecdsa_signature_save(%struct.secp256k1_ecdsa_signature* noundef %7, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %do.end16
  %8 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %9 = bitcast %struct.secp256k1_ecdsa_signature* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 0, i64 64, i1 false)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then18, %if.then13, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecdsa_sig_parse(%struct.secp256k1_scalar* noundef %rr, %struct.secp256k1_scalar* noundef %rs, i8* noundef %sig, i64 noundef %size) #0 {
entry:
  %retval = alloca i32, align 4
  %rr.addr = alloca %struct.secp256k1_scalar*, align 8
  %rs.addr = alloca %struct.secp256k1_scalar*, align 8
  %sig.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %sigend = alloca i8*, align 8
  %rlen = alloca i64, align 8
  store %struct.secp256k1_scalar* %rr, %struct.secp256k1_scalar** %rr.addr, align 8
  store %struct.secp256k1_scalar* %rs, %struct.secp256k1_scalar** %rs.addr, align 8
  store i8* %sig, i8** %sig.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %sig.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %sigend, align 8
  %2 = load i8*, i8** %sig.addr, align 8
  %3 = load i8*, i8** %sigend, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8*, i8** %sig.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %sig.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %cmp1 = icmp ne i32 %conv, 48
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i8*, i8** %sigend, align 8
  %call = call i32 @secp256k1_der_read_len(i64* noundef %rlen, i8** noundef %sig.addr, i8* noundef %6)
  %cmp3 = icmp eq i32 %call, 0
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %7 = load i64, i64* %rlen, align 8
  %8 = load i8*, i8** %sigend, align 8
  %9 = load i8*, i8** %sig.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp7 = icmp ne i64 %7, %sub.ptr.sub
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end6
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %rr.addr, align 8
  %11 = load i8*, i8** %sigend, align 8
  %call11 = call i32 @secp256k1_der_parse_integer(%struct.secp256k1_scalar* noundef %10, i8** noundef %sig.addr, i8* noundef %11)
  %tobool = icmp ne i32 %call11, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end10
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %rs.addr, align 8
  %13 = load i8*, i8** %sigend, align 8
  %call14 = call i32 @secp256k1_der_parse_integer(%struct.secp256k1_scalar* noundef %12, i8** noundef %sig.addr, i8* noundef %13)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end13
  %14 = load i8*, i8** %sig.addr, align 8
  %15 = load i8*, i8** %sigend, align 8
  %cmp18 = icmp ne i8* %14, %15
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end17
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then20, %if.then16, %if.then12, %if.then9, %if.then5, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecdsa_signature_save(%struct.secp256k1_ecdsa_signature* noundef %sig, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s) #0 {
entry:
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %s.addr = alloca %struct.secp256k1_scalar*, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %s, %struct.secp256k1_scalar** %s.addr, align 8
  %0 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %data = getelementptr inbounds %struct.secp256k1_ecdsa_signature, %struct.secp256k1_ecdsa_signature* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %data, i64 0, i64 0
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %2 = bitcast %struct.secp256k1_scalar* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 8 %2, i64 32, i1 false)
  %3 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %data1 = getelementptr inbounds %struct.secp256k1_ecdsa_signature, %struct.secp256k1_ecdsa_signature* %3, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [64 x i8], [64 x i8]* %data1, i64 0, i64 32
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %s.addr, align 8
  %5 = bitcast %struct.secp256k1_scalar* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx2, i8* align 8 %5, i64 32, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_signature_parse_compact(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ecdsa_signature* noundef %sig, i8* noundef %input64) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %input64.addr = alloca i8*, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  %overflow = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  store i8* %input64, i8** %input64.addr, align 8
  store i32 1, i32* %ret, align 4
  store i32 0, i32* %overflow, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_ecdsa_signature* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %input64.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load i8*, i8** %input64.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %r, i8* noundef %arrayidx, i32* noundef %overflow)
  %6 = load i32, i32* %overflow, align 4
  %tobool17 = icmp ne i32 %6, 0
  %lnot18 = xor i1 %tobool17, true
  %lnot.ext19 = zext i1 %lnot18 to i32
  %7 = load i32, i32* %ret, align 4
  %and = and i32 %7, %lnot.ext19
  store i32 %and, i32* %ret, align 4
  %8 = load i8*, i8** %input64.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %8, i64 32
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %s, i8* noundef %arrayidx20, i32* noundef %overflow)
  %9 = load i32, i32* %overflow, align 4
  %tobool21 = icmp ne i32 %9, 0
  %lnot22 = xor i1 %tobool21, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %10 = load i32, i32* %ret, align 4
  %and24 = and i32 %10, %lnot.ext23
  store i32 %and24, i32* %ret, align 4
  %11 = load i32, i32* %ret, align 4
  %tobool25 = icmp ne i32 %11, 0
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %do.end16
  %12 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  call void @secp256k1_ecdsa_signature_save(%struct.secp256k1_ecdsa_signature* noundef %12, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s)
  br label %if.end27

if.else:                                          ; preds = %do.end16
  %13 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %14 = bitcast %struct.secp256k1_ecdsa_signature* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 64, i1 false)
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then26
  %15 = load i32, i32* %ret, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %if.then13, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %r, i8* noundef %b32, i32* noundef %overflow) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %b32.addr = alloca i8*, align 8
  %overflow.addr = alloca i32*, align 8
  %over = alloca i32, align 4
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i8* %b32, i8** %b32.addr, align 8
  store i32* %overflow, i32** %overflow.addr, align 8
  %0 = load i8*, i8** %b32.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 31
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %2 = load i8*, i8** %b32.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 30
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i64
  %shl = shl i64 %conv2, 8
  %or = or i64 %conv, %shl
  %4 = load i8*, i8** %b32.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 29
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %5 to i64
  %shl5 = shl i64 %conv4, 16
  %or6 = or i64 %or, %shl5
  %6 = load i8*, i8** %b32.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %6, i64 28
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %7 to i64
  %shl9 = shl i64 %conv8, 24
  %or10 = or i64 %or6, %shl9
  %8 = load i8*, i8** %b32.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %8, i64 27
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %9 to i64
  %shl13 = shl i64 %conv12, 32
  %or14 = or i64 %or10, %shl13
  %10 = load i8*, i8** %b32.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %10, i64 26
  %11 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %11 to i64
  %shl17 = shl i64 %conv16, 40
  %or18 = or i64 %or14, %shl17
  %12 = load i8*, i8** %b32.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %12, i64 25
  %13 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %13 to i64
  %shl21 = shl i64 %conv20, 48
  %or22 = or i64 %or18, %shl21
  %14 = load i8*, i8** %b32.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %14, i64 24
  %15 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %15 to i64
  %shl25 = shl i64 %conv24, 56
  %or26 = or i64 %or22, %shl25
  %16 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %16, i32 0, i32 0
  %arrayidx27 = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 %or26, i64* %arrayidx27, align 8
  %17 = load i8*, i8** %b32.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %17, i64 23
  %18 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %18 to i64
  %19 = load i8*, i8** %b32.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %19, i64 22
  %20 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %20 to i64
  %shl32 = shl i64 %conv31, 8
  %or33 = or i64 %conv29, %shl32
  %21 = load i8*, i8** %b32.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %21, i64 21
  %22 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %22 to i64
  %shl36 = shl i64 %conv35, 16
  %or37 = or i64 %or33, %shl36
  %23 = load i8*, i8** %b32.addr, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %23, i64 20
  %24 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %24 to i64
  %shl40 = shl i64 %conv39, 24
  %or41 = or i64 %or37, %shl40
  %25 = load i8*, i8** %b32.addr, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %25, i64 19
  %26 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %26 to i64
  %shl44 = shl i64 %conv43, 32
  %or45 = or i64 %or41, %shl44
  %27 = load i8*, i8** %b32.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %27, i64 18
  %28 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %28 to i64
  %shl48 = shl i64 %conv47, 40
  %or49 = or i64 %or45, %shl48
  %29 = load i8*, i8** %b32.addr, align 8
  %arrayidx50 = getelementptr inbounds i8, i8* %29, i64 17
  %30 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %30 to i64
  %shl52 = shl i64 %conv51, 48
  %or53 = or i64 %or49, %shl52
  %31 = load i8*, i8** %b32.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %31, i64 16
  %32 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %32 to i64
  %shl56 = shl i64 %conv55, 56
  %or57 = or i64 %or53, %shl56
  %33 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d58 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %33, i32 0, i32 0
  %arrayidx59 = getelementptr inbounds [4 x i64], [4 x i64]* %d58, i64 0, i64 1
  store i64 %or57, i64* %arrayidx59, align 8
  %34 = load i8*, i8** %b32.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %34, i64 15
  %35 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %35 to i64
  %36 = load i8*, i8** %b32.addr, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %36, i64 14
  %37 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %37 to i64
  %shl64 = shl i64 %conv63, 8
  %or65 = or i64 %conv61, %shl64
  %38 = load i8*, i8** %b32.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %38, i64 13
  %39 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %39 to i64
  %shl68 = shl i64 %conv67, 16
  %or69 = or i64 %or65, %shl68
  %40 = load i8*, i8** %b32.addr, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %40, i64 12
  %41 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %41 to i64
  %shl72 = shl i64 %conv71, 24
  %or73 = or i64 %or69, %shl72
  %42 = load i8*, i8** %b32.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %42, i64 11
  %43 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %43 to i64
  %shl76 = shl i64 %conv75, 32
  %or77 = or i64 %or73, %shl76
  %44 = load i8*, i8** %b32.addr, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %44, i64 10
  %45 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %45 to i64
  %shl80 = shl i64 %conv79, 40
  %or81 = or i64 %or77, %shl80
  %46 = load i8*, i8** %b32.addr, align 8
  %arrayidx82 = getelementptr inbounds i8, i8* %46, i64 9
  %47 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %47 to i64
  %shl84 = shl i64 %conv83, 48
  %or85 = or i64 %or81, %shl84
  %48 = load i8*, i8** %b32.addr, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %48, i64 8
  %49 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %49 to i64
  %shl88 = shl i64 %conv87, 56
  %or89 = or i64 %or85, %shl88
  %50 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d90 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %50, i32 0, i32 0
  %arrayidx91 = getelementptr inbounds [4 x i64], [4 x i64]* %d90, i64 0, i64 2
  store i64 %or89, i64* %arrayidx91, align 8
  %51 = load i8*, i8** %b32.addr, align 8
  %arrayidx92 = getelementptr inbounds i8, i8* %51, i64 7
  %52 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %52 to i64
  %53 = load i8*, i8** %b32.addr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %53, i64 6
  %54 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %54 to i64
  %shl96 = shl i64 %conv95, 8
  %or97 = or i64 %conv93, %shl96
  %55 = load i8*, i8** %b32.addr, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %55, i64 5
  %56 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %56 to i64
  %shl100 = shl i64 %conv99, 16
  %or101 = or i64 %or97, %shl100
  %57 = load i8*, i8** %b32.addr, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %57, i64 4
  %58 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %58 to i64
  %shl104 = shl i64 %conv103, 24
  %or105 = or i64 %or101, %shl104
  %59 = load i8*, i8** %b32.addr, align 8
  %arrayidx106 = getelementptr inbounds i8, i8* %59, i64 3
  %60 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %60 to i64
  %shl108 = shl i64 %conv107, 32
  %or109 = or i64 %or105, %shl108
  %61 = load i8*, i8** %b32.addr, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %61, i64 2
  %62 = load i8, i8* %arrayidx110, align 1
  %conv111 = zext i8 %62 to i64
  %shl112 = shl i64 %conv111, 40
  %or113 = or i64 %or109, %shl112
  %63 = load i8*, i8** %b32.addr, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %63, i64 1
  %64 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %64 to i64
  %shl116 = shl i64 %conv115, 48
  %or117 = or i64 %or113, %shl116
  %65 = load i8*, i8** %b32.addr, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %66 to i64
  %shl120 = shl i64 %conv119, 56
  %or121 = or i64 %or117, %shl120
  %67 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d122 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %67, i32 0, i32 0
  %arrayidx123 = getelementptr inbounds [4 x i64], [4 x i64]* %d122, i64 0, i64 3
  store i64 %or121, i64* %arrayidx123, align 8
  %68 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %69 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %call = call i32 @secp256k1_scalar_check_overflow(%struct.secp256k1_scalar* noundef %69)
  %call124 = call i32 @secp256k1_scalar_reduce(%struct.secp256k1_scalar* noundef %68, i32 noundef %call)
  store i32 %call124, i32* %over, align 4
  %70 = load i32*, i32** %overflow.addr, align 8
  %tobool = icmp ne i32* %70, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %71 = load i32, i32* %over, align 4
  %72 = load i32*, i32** %overflow.addr, align 8
  store i32 %71, i32* %72, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_signature_serialize_der(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %output, i64* noundef %outputlen, %struct.secp256k1_ecdsa_signature* noundef %sig) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %output.addr = alloca i8*, align 8
  %outputlen.addr = alloca i64*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %output, i8** %output.addr, align 8
  store i64* %outputlen, i64** %outputlen.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %output.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i64*, i64** %outputlen.addr, align 8
  %cmp7 = icmp ne i64* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  %5 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %cmp18 = icmp ne %struct.secp256k1_ecdsa_signature* %5, null
  %lnot20 = xor i1 %cmp18, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %conv22 = sext i32 %lnot.ext21 to i64
  %tobool23 = icmp ne i64 %conv22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body17
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback25 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback25, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %do.body17
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %8 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  call void @secp256k1_ecdsa_signature_load(%struct.secp256k1_context_struct* noundef %7, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ecdsa_signature* noundef %8)
  %9 = load i8*, i8** %output.addr, align 8
  %10 = load i64*, i64** %outputlen.addr, align 8
  %call = call i32 @secp256k1_ecdsa_sig_serialize(i8* noundef %9, i64* noundef %10, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s)
  store i32 %call, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end27, %if.then24, %if.then13, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecdsa_signature_load(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ecdsa_signature* noundef %sig) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %s.addr = alloca %struct.secp256k1_scalar*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %s, %struct.secp256k1_scalar** %s.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %2 = bitcast %struct.secp256k1_scalar* %1 to i8*
  %3 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %data = getelementptr inbounds %struct.secp256k1_ecdsa_signature, %struct.secp256k1_ecdsa_signature* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %data, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 1 %arrayidx, i64 32, i1 false)
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %s.addr, align 8
  %5 = bitcast %struct.secp256k1_scalar* %4 to i8*
  %6 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %data1 = getelementptr inbounds %struct.secp256k1_ecdsa_signature, %struct.secp256k1_ecdsa_signature* %6, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [64 x i8], [64 x i8]* %data1, i64 0, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 %arrayidx2, i64 32, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecdsa_sig_serialize(i8* noundef %sig, i64* noundef %size, %struct.secp256k1_scalar* noundef %ar, %struct.secp256k1_scalar* noundef %as) #0 {
entry:
  %retval = alloca i32, align 4
  %sig.addr = alloca i8*, align 8
  %size.addr = alloca i64*, align 8
  %ar.addr = alloca %struct.secp256k1_scalar*, align 8
  %as.addr = alloca %struct.secp256k1_scalar*, align 8
  %r = alloca [33 x i8], align 16
  %s = alloca [33 x i8], align 16
  %rp = alloca i8*, align 8
  %sp = alloca i8*, align 8
  %lenR = alloca i64, align 8
  %lenS = alloca i64, align 8
  store i8* %sig, i8** %sig.addr, align 8
  store i64* %size, i64** %size.addr, align 8
  store %struct.secp256k1_scalar* %ar, %struct.secp256k1_scalar** %ar.addr, align 8
  store %struct.secp256k1_scalar* %as, %struct.secp256k1_scalar** %as.addr, align 8
  %0 = bitcast [33 x i8]* %r to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 33, i1 false)
  %1 = bitcast [33 x i8]* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 33, i1 false)
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %r, i64 0, i64 0
  store i8* %arraydecay, i8** %rp, align 8
  %arraydecay1 = getelementptr inbounds [33 x i8], [33 x i8]* %s, i64 0, i64 0
  store i8* %arraydecay1, i8** %sp, align 8
  store i64 33, i64* %lenR, align 8
  store i64 33, i64* %lenS, align 8
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %r, i64 0, i64 1
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %ar.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %arrayidx, %struct.secp256k1_scalar* noundef %2)
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %s, i64 0, i64 1
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %as.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %arrayidx2, %struct.secp256k1_scalar* noundef %3)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i64, i64* %lenR, align 8
  %cmp = icmp ugt i64 %4, 1
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %5 = load i8*, i8** %rp, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx3, align 1
  %conv = zext i8 %6 to i32
  %cmp4 = icmp eq i32 %conv, 0
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load i8*, i8** %rp, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %8 to i32
  %cmp8 = icmp slt i32 %conv7, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %9 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp8, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load i64, i64* %lenR, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %lenR, align 8
  %11 = load i8*, i8** %rp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %rp, align 8
  br label %while.cond, !llvm.loop !7

while.end:                                        ; preds = %land.end
  br label %while.cond10

while.cond10:                                     ; preds = %while.body24, %while.end
  %12 = load i64, i64* %lenS, align 8
  %cmp11 = icmp ugt i64 %12, 1
  br i1 %cmp11, label %land.lhs.true13, label %land.end23

land.lhs.true13:                                  ; preds = %while.cond10
  %13 = load i8*, i8** %sp, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  %cmp16 = icmp eq i32 %conv15, 0
  br i1 %cmp16, label %land.rhs18, label %land.end23

land.rhs18:                                       ; preds = %land.lhs.true13
  %15 = load i8*, i8** %sp, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %16 to i32
  %cmp21 = icmp slt i32 %conv20, 128
  br label %land.end23

land.end23:                                       ; preds = %land.rhs18, %land.lhs.true13, %while.cond10
  %17 = phi i1 [ false, %land.lhs.true13 ], [ false, %while.cond10 ], [ %cmp21, %land.rhs18 ]
  br i1 %17, label %while.body24, label %while.end27

while.body24:                                     ; preds = %land.end23
  %18 = load i64, i64* %lenS, align 8
  %dec25 = add i64 %18, -1
  store i64 %dec25, i64* %lenS, align 8
  %19 = load i8*, i8** %sp, align 8
  %incdec.ptr26 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr26, i8** %sp, align 8
  br label %while.cond10, !llvm.loop !8

while.end27:                                      ; preds = %land.end23
  %20 = load i64*, i64** %size.addr, align 8
  %21 = load i64, i64* %20, align 8
  %22 = load i64, i64* %lenS, align 8
  %add = add i64 6, %22
  %23 = load i64, i64* %lenR, align 8
  %add28 = add i64 %add, %23
  %cmp29 = icmp ult i64 %21, %add28
  br i1 %cmp29, label %if.then, label %if.end

if.then:                                          ; preds = %while.end27
  %24 = load i64, i64* %lenS, align 8
  %add31 = add i64 6, %24
  %25 = load i64, i64* %lenR, align 8
  %add32 = add i64 %add31, %25
  %26 = load i64*, i64** %size.addr, align 8
  store i64 %add32, i64* %26, align 8
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end27
  %27 = load i64, i64* %lenS, align 8
  %add33 = add i64 6, %27
  %28 = load i64, i64* %lenR, align 8
  %add34 = add i64 %add33, %28
  %29 = load i64*, i64** %size.addr, align 8
  store i64 %add34, i64* %29, align 8
  %30 = load i8*, i8** %sig.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %30, i64 0
  store i8 48, i8* %arrayidx35, align 1
  %31 = load i64, i64* %lenS, align 8
  %add36 = add i64 4, %31
  %32 = load i64, i64* %lenR, align 8
  %add37 = add i64 %add36, %32
  %conv38 = trunc i64 %add37 to i8
  %33 = load i8*, i8** %sig.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %33, i64 1
  store i8 %conv38, i8* %arrayidx39, align 1
  %34 = load i8*, i8** %sig.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 2, i8* %arrayidx40, align 1
  %35 = load i64, i64* %lenR, align 8
  %conv41 = trunc i64 %35 to i8
  %36 = load i8*, i8** %sig.addr, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %36, i64 3
  store i8 %conv41, i8* %arrayidx42, align 1
  %37 = load i8*, i8** %sig.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %37, i64 4
  %38 = load i8*, i8** %rp, align 8
  %39 = load i64, i64* %lenR, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %38, i64 %39, i1 false)
  %40 = load i8*, i8** %sig.addr, align 8
  %41 = load i64, i64* %lenR, align 8
  %add43 = add i64 4, %41
  %arrayidx44 = getelementptr inbounds i8, i8* %40, i64 %add43
  store i8 2, i8* %arrayidx44, align 1
  %42 = load i64, i64* %lenS, align 8
  %conv45 = trunc i64 %42 to i8
  %43 = load i8*, i8** %sig.addr, align 8
  %44 = load i64, i64* %lenR, align 8
  %add46 = add i64 5, %44
  %arrayidx47 = getelementptr inbounds i8, i8* %43, i64 %add46
  store i8 %conv45, i8* %arrayidx47, align 1
  %45 = load i8*, i8** %sig.addr, align 8
  %46 = load i64, i64* %lenR, align 8
  %add.ptr48 = getelementptr inbounds i8, i8* %45, i64 %46
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr48, i64 6
  %47 = load i8*, i8** %sp, align 8
  %48 = load i64, i64* %lenS, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr49, i8* align 1 %47, i64 %48, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %49 = load i32, i32* %retval, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_signature_serialize_compact(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %output64, %struct.secp256k1_ecdsa_signature* noundef %sig) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %output64.addr = alloca i8*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %output64, i8** %output64.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %output64.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %cmp7 = icmp ne %struct.secp256k1_ecdsa_signature* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %6 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  call void @secp256k1_ecdsa_signature_load(%struct.secp256k1_context_struct* noundef %5, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ecdsa_signature* noundef %6)
  %7 = load i8*, i8** %output64.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  call void @secp256k1_scalar_get_b32(i8* noundef %arrayidx, %struct.secp256k1_scalar* noundef %r)
  %8 = load i8*, i8** %output64.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %8, i64 32
  call void @secp256k1_scalar_get_b32(i8* noundef %arrayidx17, %struct.secp256k1_scalar* noundef %s)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end16, %if.then13, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_get_b32(i8* noundef %bin, %struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %bin.addr = alloca i8*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  store i8* %bin, i8** %bin.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 3
  %1 = load i64, i64* %arrayidx, align 8
  %shr = lshr i64 %1, 56
  %conv = trunc i64 %shr to i8
  %2 = load i8*, i8** %bin.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0
  store i8 %conv, i8* %arrayidx1, align 1
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d2 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [4 x i64], [4 x i64]* %d2, i64 0, i64 3
  %4 = load i64, i64* %arrayidx3, align 8
  %shr4 = lshr i64 %4, 48
  %conv5 = trunc i64 %shr4 to i8
  %5 = load i8*, i8** %bin.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv5, i8* %arrayidx6, align 1
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d7 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [4 x i64], [4 x i64]* %d7, i64 0, i64 3
  %7 = load i64, i64* %arrayidx8, align 8
  %shr9 = lshr i64 %7, 40
  %conv10 = trunc i64 %shr9 to i8
  %8 = load i8*, i8** %bin.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %8, i64 2
  store i8 %conv10, i8* %arrayidx11, align 1
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d12 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %9, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x i64], [4 x i64]* %d12, i64 0, i64 3
  %10 = load i64, i64* %arrayidx13, align 8
  %shr14 = lshr i64 %10, 32
  %conv15 = trunc i64 %shr14 to i8
  %11 = load i8*, i8** %bin.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %11, i64 3
  store i8 %conv15, i8* %arrayidx16, align 1
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 3
  %13 = load i64, i64* %arrayidx18, align 8
  %shr19 = lshr i64 %13, 24
  %conv20 = trunc i64 %shr19 to i8
  %14 = load i8*, i8** %bin.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %14, i64 4
  store i8 %conv20, i8* %arrayidx21, align 1
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d22 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [4 x i64], [4 x i64]* %d22, i64 0, i64 3
  %16 = load i64, i64* %arrayidx23, align 8
  %shr24 = lshr i64 %16, 16
  %conv25 = trunc i64 %shr24 to i8
  %17 = load i8*, i8** %bin.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %conv25, i8* %arrayidx26, align 1
  %18 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d27 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %18, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %d27, i64 0, i64 3
  %19 = load i64, i64* %arrayidx28, align 8
  %shr29 = lshr i64 %19, 8
  %conv30 = trunc i64 %shr29 to i8
  %20 = load i8*, i8** %bin.addr, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %20, i64 6
  store i8 %conv30, i8* %arrayidx31, align 1
  %21 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d32 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %21, i32 0, i32 0
  %arrayidx33 = getelementptr inbounds [4 x i64], [4 x i64]* %d32, i64 0, i64 3
  %22 = load i64, i64* %arrayidx33, align 8
  %conv34 = trunc i64 %22 to i8
  %23 = load i8*, i8** %bin.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %23, i64 7
  store i8 %conv34, i8* %arrayidx35, align 1
  %24 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d36 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %24, i32 0, i32 0
  %arrayidx37 = getelementptr inbounds [4 x i64], [4 x i64]* %d36, i64 0, i64 2
  %25 = load i64, i64* %arrayidx37, align 8
  %shr38 = lshr i64 %25, 56
  %conv39 = trunc i64 %shr38 to i8
  %26 = load i8*, i8** %bin.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %26, i64 8
  store i8 %conv39, i8* %arrayidx40, align 1
  %27 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d41 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %27, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds [4 x i64], [4 x i64]* %d41, i64 0, i64 2
  %28 = load i64, i64* %arrayidx42, align 8
  %shr43 = lshr i64 %28, 48
  %conv44 = trunc i64 %shr43 to i8
  %29 = load i8*, i8** %bin.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %29, i64 9
  store i8 %conv44, i8* %arrayidx45, align 1
  %30 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d46 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %30, i32 0, i32 0
  %arrayidx47 = getelementptr inbounds [4 x i64], [4 x i64]* %d46, i64 0, i64 2
  %31 = load i64, i64* %arrayidx47, align 8
  %shr48 = lshr i64 %31, 40
  %conv49 = trunc i64 %shr48 to i8
  %32 = load i8*, i8** %bin.addr, align 8
  %arrayidx50 = getelementptr inbounds i8, i8* %32, i64 10
  store i8 %conv49, i8* %arrayidx50, align 1
  %33 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d51 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %33, i32 0, i32 0
  %arrayidx52 = getelementptr inbounds [4 x i64], [4 x i64]* %d51, i64 0, i64 2
  %34 = load i64, i64* %arrayidx52, align 8
  %shr53 = lshr i64 %34, 32
  %conv54 = trunc i64 %shr53 to i8
  %35 = load i8*, i8** %bin.addr, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %35, i64 11
  store i8 %conv54, i8* %arrayidx55, align 1
  %36 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d56 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %36, i32 0, i32 0
  %arrayidx57 = getelementptr inbounds [4 x i64], [4 x i64]* %d56, i64 0, i64 2
  %37 = load i64, i64* %arrayidx57, align 8
  %shr58 = lshr i64 %37, 24
  %conv59 = trunc i64 %shr58 to i8
  %38 = load i8*, i8** %bin.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %38, i64 12
  store i8 %conv59, i8* %arrayidx60, align 1
  %39 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d61 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %39, i32 0, i32 0
  %arrayidx62 = getelementptr inbounds [4 x i64], [4 x i64]* %d61, i64 0, i64 2
  %40 = load i64, i64* %arrayidx62, align 8
  %shr63 = lshr i64 %40, 16
  %conv64 = trunc i64 %shr63 to i8
  %41 = load i8*, i8** %bin.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %41, i64 13
  store i8 %conv64, i8* %arrayidx65, align 1
  %42 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d66 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %42, i32 0, i32 0
  %arrayidx67 = getelementptr inbounds [4 x i64], [4 x i64]* %d66, i64 0, i64 2
  %43 = load i64, i64* %arrayidx67, align 8
  %shr68 = lshr i64 %43, 8
  %conv69 = trunc i64 %shr68 to i8
  %44 = load i8*, i8** %bin.addr, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %44, i64 14
  store i8 %conv69, i8* %arrayidx70, align 1
  %45 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d71 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %45, i32 0, i32 0
  %arrayidx72 = getelementptr inbounds [4 x i64], [4 x i64]* %d71, i64 0, i64 2
  %46 = load i64, i64* %arrayidx72, align 8
  %conv73 = trunc i64 %46 to i8
  %47 = load i8*, i8** %bin.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %47, i64 15
  store i8 %conv73, i8* %arrayidx74, align 1
  %48 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d75 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %48, i32 0, i32 0
  %arrayidx76 = getelementptr inbounds [4 x i64], [4 x i64]* %d75, i64 0, i64 1
  %49 = load i64, i64* %arrayidx76, align 8
  %shr77 = lshr i64 %49, 56
  %conv78 = trunc i64 %shr77 to i8
  %50 = load i8*, i8** %bin.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %50, i64 16
  store i8 %conv78, i8* %arrayidx79, align 1
  %51 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d80 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %51, i32 0, i32 0
  %arrayidx81 = getelementptr inbounds [4 x i64], [4 x i64]* %d80, i64 0, i64 1
  %52 = load i64, i64* %arrayidx81, align 8
  %shr82 = lshr i64 %52, 48
  %conv83 = trunc i64 %shr82 to i8
  %53 = load i8*, i8** %bin.addr, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %53, i64 17
  store i8 %conv83, i8* %arrayidx84, align 1
  %54 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d85 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %54, i32 0, i32 0
  %arrayidx86 = getelementptr inbounds [4 x i64], [4 x i64]* %d85, i64 0, i64 1
  %55 = load i64, i64* %arrayidx86, align 8
  %shr87 = lshr i64 %55, 40
  %conv88 = trunc i64 %shr87 to i8
  %56 = load i8*, i8** %bin.addr, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %56, i64 18
  store i8 %conv88, i8* %arrayidx89, align 1
  %57 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d90 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %57, i32 0, i32 0
  %arrayidx91 = getelementptr inbounds [4 x i64], [4 x i64]* %d90, i64 0, i64 1
  %58 = load i64, i64* %arrayidx91, align 8
  %shr92 = lshr i64 %58, 32
  %conv93 = trunc i64 %shr92 to i8
  %59 = load i8*, i8** %bin.addr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %59, i64 19
  store i8 %conv93, i8* %arrayidx94, align 1
  %60 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d95 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %60, i32 0, i32 0
  %arrayidx96 = getelementptr inbounds [4 x i64], [4 x i64]* %d95, i64 0, i64 1
  %61 = load i64, i64* %arrayidx96, align 8
  %shr97 = lshr i64 %61, 24
  %conv98 = trunc i64 %shr97 to i8
  %62 = load i8*, i8** %bin.addr, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %62, i64 20
  store i8 %conv98, i8* %arrayidx99, align 1
  %63 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d100 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %63, i32 0, i32 0
  %arrayidx101 = getelementptr inbounds [4 x i64], [4 x i64]* %d100, i64 0, i64 1
  %64 = load i64, i64* %arrayidx101, align 8
  %shr102 = lshr i64 %64, 16
  %conv103 = trunc i64 %shr102 to i8
  %65 = load i8*, i8** %bin.addr, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %65, i64 21
  store i8 %conv103, i8* %arrayidx104, align 1
  %66 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d105 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %66, i32 0, i32 0
  %arrayidx106 = getelementptr inbounds [4 x i64], [4 x i64]* %d105, i64 0, i64 1
  %67 = load i64, i64* %arrayidx106, align 8
  %shr107 = lshr i64 %67, 8
  %conv108 = trunc i64 %shr107 to i8
  %68 = load i8*, i8** %bin.addr, align 8
  %arrayidx109 = getelementptr inbounds i8, i8* %68, i64 22
  store i8 %conv108, i8* %arrayidx109, align 1
  %69 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d110 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %69, i32 0, i32 0
  %arrayidx111 = getelementptr inbounds [4 x i64], [4 x i64]* %d110, i64 0, i64 1
  %70 = load i64, i64* %arrayidx111, align 8
  %conv112 = trunc i64 %70 to i8
  %71 = load i8*, i8** %bin.addr, align 8
  %arrayidx113 = getelementptr inbounds i8, i8* %71, i64 23
  store i8 %conv112, i8* %arrayidx113, align 1
  %72 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d114 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %72, i32 0, i32 0
  %arrayidx115 = getelementptr inbounds [4 x i64], [4 x i64]* %d114, i64 0, i64 0
  %73 = load i64, i64* %arrayidx115, align 8
  %shr116 = lshr i64 %73, 56
  %conv117 = trunc i64 %shr116 to i8
  %74 = load i8*, i8** %bin.addr, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %74, i64 24
  store i8 %conv117, i8* %arrayidx118, align 1
  %75 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d119 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %75, i32 0, i32 0
  %arrayidx120 = getelementptr inbounds [4 x i64], [4 x i64]* %d119, i64 0, i64 0
  %76 = load i64, i64* %arrayidx120, align 8
  %shr121 = lshr i64 %76, 48
  %conv122 = trunc i64 %shr121 to i8
  %77 = load i8*, i8** %bin.addr, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %77, i64 25
  store i8 %conv122, i8* %arrayidx123, align 1
  %78 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d124 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %78, i32 0, i32 0
  %arrayidx125 = getelementptr inbounds [4 x i64], [4 x i64]* %d124, i64 0, i64 0
  %79 = load i64, i64* %arrayidx125, align 8
  %shr126 = lshr i64 %79, 40
  %conv127 = trunc i64 %shr126 to i8
  %80 = load i8*, i8** %bin.addr, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %80, i64 26
  store i8 %conv127, i8* %arrayidx128, align 1
  %81 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d129 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %81, i32 0, i32 0
  %arrayidx130 = getelementptr inbounds [4 x i64], [4 x i64]* %d129, i64 0, i64 0
  %82 = load i64, i64* %arrayidx130, align 8
  %shr131 = lshr i64 %82, 32
  %conv132 = trunc i64 %shr131 to i8
  %83 = load i8*, i8** %bin.addr, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %83, i64 27
  store i8 %conv132, i8* %arrayidx133, align 1
  %84 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d134 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %84, i32 0, i32 0
  %arrayidx135 = getelementptr inbounds [4 x i64], [4 x i64]* %d134, i64 0, i64 0
  %85 = load i64, i64* %arrayidx135, align 8
  %shr136 = lshr i64 %85, 24
  %conv137 = trunc i64 %shr136 to i8
  %86 = load i8*, i8** %bin.addr, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %86, i64 28
  store i8 %conv137, i8* %arrayidx138, align 1
  %87 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d139 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %87, i32 0, i32 0
  %arrayidx140 = getelementptr inbounds [4 x i64], [4 x i64]* %d139, i64 0, i64 0
  %88 = load i64, i64* %arrayidx140, align 8
  %shr141 = lshr i64 %88, 16
  %conv142 = trunc i64 %shr141 to i8
  %89 = load i8*, i8** %bin.addr, align 8
  %arrayidx143 = getelementptr inbounds i8, i8* %89, i64 29
  store i8 %conv142, i8* %arrayidx143, align 1
  %90 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d144 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %90, i32 0, i32 0
  %arrayidx145 = getelementptr inbounds [4 x i64], [4 x i64]* %d144, i64 0, i64 0
  %91 = load i64, i64* %arrayidx145, align 8
  %shr146 = lshr i64 %91, 8
  %conv147 = trunc i64 %shr146 to i8
  %92 = load i8*, i8** %bin.addr, align 8
  %arrayidx148 = getelementptr inbounds i8, i8* %92, i64 30
  store i8 %conv147, i8* %arrayidx148, align 1
  %93 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d149 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %93, i32 0, i32 0
  %arrayidx150 = getelementptr inbounds [4 x i64], [4 x i64]* %d149, i64 0, i64 0
  %94 = load i64, i64* %arrayidx150, align 8
  %conv151 = trunc i64 %94 to i8
  %95 = load i8*, i8** %bin.addr, align 8
  %arrayidx152 = getelementptr inbounds i8, i8* %95, i64 31
  store i8 %conv151, i8* %arrayidx152, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_signature_normalize(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ecdsa_signature* noundef %sigout, %struct.secp256k1_ecdsa_signature* noundef %sigin) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %sigout.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %sigin.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sigout, %struct.secp256k1_ecdsa_signature** %sigout.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sigin, %struct.secp256k1_ecdsa_signature** %sigin.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sigin.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_ecdsa_signature* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %4 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sigin.addr, align 8
  call void @secp256k1_ecdsa_signature_load(%struct.secp256k1_context_struct* noundef %3, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ecdsa_signature* noundef %4)
  %call = call i32 @secp256k1_scalar_is_high(%struct.secp256k1_scalar* noundef %s)
  store i32 %call, i32* %ret, align 4
  %5 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sigout.addr, align 8
  %cmp6 = icmp ne %struct.secp256k1_ecdsa_signature* %5, null
  br i1 %cmp6, label %if.then8, label %if.end12

if.then8:                                         ; preds = %do.end5
  %6 = load i32, i32* %ret, align 4
  %tobool9 = icmp ne i32 %6, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then8
  call void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %s, %struct.secp256k1_scalar* noundef %s)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then8
  %7 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sigout.addr, align 8
  call void @secp256k1_ecdsa_signature_save(%struct.secp256k1_ecdsa_signature* noundef %7, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s)
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %do.end5
  %8 = load i32, i32* %ret, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_is_high(%struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %yes = alloca i32, align 4
  %no = alloca i32, align 4
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 0, i32* %yes, align 4
  store i32 0, i32* %no, align 4
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 3
  %1 = load i64, i64* %arrayidx, align 8
  %cmp = icmp ult i64 %1, 9223372036854775807
  %conv = zext i1 %cmp to i32
  %2 = load i32, i32* %no, align 4
  %or = or i32 %2, %conv
  store i32 %or, i32* %no, align 4
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 3
  %4 = load i64, i64* %arrayidx2, align 8
  %cmp3 = icmp ugt i64 %4, 9223372036854775807
  %conv4 = zext i1 %cmp3 to i32
  %5 = load i32, i32* %no, align 4
  %neg = xor i32 %5, -1
  %and = and i32 %conv4, %neg
  %6 = load i32, i32* %yes, align 4
  %or5 = or i32 %6, %and
  store i32 %or5, i32* %yes, align 4
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d6 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %d6, i64 0, i64 2
  %8 = load i64, i64* %arrayidx7, align 8
  %cmp8 = icmp ult i64 %8, -1
  %conv9 = zext i1 %cmp8 to i32
  %9 = load i32, i32* %yes, align 4
  %neg10 = xor i32 %9, -1
  %and11 = and i32 %conv9, %neg10
  %10 = load i32, i32* %no, align 4
  %or12 = or i32 %10, %and11
  store i32 %or12, i32* %no, align 4
  %11 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d13 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %11, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %d13, i64 0, i64 1
  %12 = load i64, i64* %arrayidx14, align 8
  %cmp15 = icmp ult i64 %12, 6725966010171805725
  %conv16 = zext i1 %cmp15 to i32
  %13 = load i32, i32* %yes, align 4
  %neg17 = xor i32 %13, -1
  %and18 = and i32 %conv16, %neg17
  %14 = load i32, i32* %no, align 4
  %or19 = or i32 %14, %and18
  store i32 %or19, i32* %no, align 4
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d20 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx21 = getelementptr inbounds [4 x i64], [4 x i64]* %d20, i64 0, i64 1
  %16 = load i64, i64* %arrayidx21, align 8
  %cmp22 = icmp ugt i64 %16, 6725966010171805725
  %conv23 = zext i1 %cmp22 to i32
  %17 = load i32, i32* %no, align 4
  %neg24 = xor i32 %17, -1
  %and25 = and i32 %conv23, %neg24
  %18 = load i32, i32* %yes, align 4
  %or26 = or i32 %18, %and25
  store i32 %or26, i32* %yes, align 4
  %19 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d27 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %19, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %d27, i64 0, i64 0
  %20 = load i64, i64* %arrayidx28, align 8
  %cmp29 = icmp ugt i64 %20, -2312264954237214560
  %conv30 = zext i1 %cmp29 to i32
  %21 = load i32, i32* %no, align 4
  %neg31 = xor i32 %21, -1
  %and32 = and i32 %conv30, %neg31
  %22 = load i32, i32* %yes, align 4
  %or33 = or i32 %22, %and32
  store i32 %or33, i32* %yes, align 4
  %23 = load i32, i32* %yes, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %nonzero = alloca i64, align 8
  %t = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %0)
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  %conv1 = sext i32 %conv to i64
  %mul = mul i64 -1, %conv1
  store i64 %mul, i64* %nonzero, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %neg = xor i64 %2, -1
  call void @secp256k1_u128_from_u64(i128* noundef %t, i64 noundef %neg)
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef -4624529908474429118)
  %call2 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %3 = load i64, i64* %nonzero, align 8
  %and = and i64 %call2, %3
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 0
  store i64 %and, i64* %arrayidx4, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %5, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 1
  %6 = load i64, i64* %arrayidx6, align 8
  %neg7 = xor i64 %6, -1
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %neg7)
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef -4994812053365940165)
  %call8 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %7 = load i64, i64* %nonzero, align 8
  %and9 = and i64 %call8, %7
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d10 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [4 x i64], [4 x i64]* %d10, i64 0, i64 1
  store i64 %and9, i64* %arrayidx11, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d12 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %9, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x i64], [4 x i64]* %d12, i64 0, i64 2
  %10 = load i64, i64* %arrayidx13, align 8
  %neg14 = xor i64 %10, -1
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %neg14)
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef -2)
  %call15 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %11 = load i64, i64* %nonzero, align 8
  %and16 = and i64 %call15, %11
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 2
  store i64 %and16, i64* %arrayidx18, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d19 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x i64], [4 x i64]* %d19, i64 0, i64 3
  %14 = load i64, i64* %arrayidx20, align 8
  %neg21 = xor i64 %14, -1
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %neg21)
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef -1)
  %call22 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %15 = load i64, i64* %nonzero, align 8
  %and23 = and i64 %call22, %15
  %16 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d24 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %16, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x i64], [4 x i64]* %d24, i64 0, i64 3
  store i64 %and23, i64* %arrayidx25, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_verify(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ecdsa_signature* noundef %sig, i8* noundef %msghash32, %struct.secp256k1_pubkey* noundef %pubkey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %sig.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %msghash32.addr = alloca i8*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %q = alloca %struct.secp256k1_ge, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  %m = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %sig, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  store i8* %msghash32, i8** %msghash32.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %msghash32.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  %cmp7 = icmp ne %struct.secp256k1_ecdsa_signature* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  %5 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp18 = icmp ne %struct.secp256k1_pubkey* %5, null
  %lnot20 = xor i1 %cmp18, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %conv22 = sext i32 %lnot.ext21 to i64
  %tobool23 = icmp ne i64 %conv22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body17
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback25 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback25, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %do.body17
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  %7 = load i8*, i8** %msghash32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %m, i8* noundef %7, i32* noundef null)
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %9 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %sig.addr, align 8
  call void @secp256k1_ecdsa_signature_load(%struct.secp256k1_context_struct* noundef %8, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ecdsa_signature* noundef %9)
  %call = call i32 @secp256k1_scalar_is_high(%struct.secp256k1_scalar* noundef %s)
  %tobool28 = icmp ne i32 %call, 0
  br i1 %tobool28, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.end27
  %10 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %11 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %call29 = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %10, %struct.secp256k1_ge* noundef %q, %struct.secp256k1_pubkey* noundef %11)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %call31 = call i32 @secp256k1_ecdsa_sig_verify(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, %struct.secp256k1_ge* noundef %q, %struct.secp256k1_scalar* noundef %m)
  %tobool32 = icmp ne i32 %call31, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %do.end27
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %do.end27 ], [ %tobool32, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.then24, %if.then13, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecdsa_sig_verify(%struct.secp256k1_scalar* noundef %sigr, %struct.secp256k1_scalar* noundef %sigs, %struct.secp256k1_ge* noundef %pubkey, %struct.secp256k1_scalar* noundef %message) #0 {
entry:
  %retval = alloca i32, align 4
  %sigr.addr = alloca %struct.secp256k1_scalar*, align 8
  %sigs.addr = alloca %struct.secp256k1_scalar*, align 8
  %pubkey.addr = alloca %struct.secp256k1_ge*, align 8
  %message.addr = alloca %struct.secp256k1_scalar*, align 8
  %c = alloca [32 x i8], align 16
  %sn = alloca %struct.secp256k1_scalar, align 8
  %u1 = alloca %struct.secp256k1_scalar, align 8
  %u2 = alloca %struct.secp256k1_scalar, align 8
  %xr = alloca %struct.secp256k1_fe, align 8
  %pubkeyj = alloca %struct.secp256k1_gej, align 8
  %pr = alloca %struct.secp256k1_gej, align 8
  store %struct.secp256k1_scalar* %sigr, %struct.secp256k1_scalar** %sigr.addr, align 8
  store %struct.secp256k1_scalar* %sigs, %struct.secp256k1_scalar** %sigs.addr, align 8
  store %struct.secp256k1_ge* %pubkey, %struct.secp256k1_ge** %pubkey.addr, align 8
  store %struct.secp256k1_scalar* %message, %struct.secp256k1_scalar** %message.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %call1 = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  call void @secp256k1_scalar_inverse_var(%struct.secp256k1_scalar* noundef %sn, %struct.secp256k1_scalar* noundef %2)
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %message.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %u1, %struct.secp256k1_scalar* noundef %sn, %struct.secp256k1_scalar* noundef %3)
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %u2, %struct.secp256k1_scalar* noundef %sn, %struct.secp256k1_scalar* noundef %4)
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pubkey.addr, align 8
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %pubkeyj, %struct.secp256k1_ge* noundef %5)
  call void @secp256k1_ecmult(%struct.secp256k1_gej* noundef %pr, %struct.secp256k1_gej* noundef %pubkeyj, %struct.secp256k1_scalar* noundef %u2, %struct.secp256k1_scalar* noundef %u1)
  %call3 = call i32 @secp256k1_gej_is_infinity(%struct.secp256k1_gej* noundef %pr)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %c, i64 0, i64 0
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %arraydecay, %struct.secp256k1_scalar* noundef %6)
  %arraydecay7 = getelementptr inbounds [32 x i8], [32 x i8]* %c, i64 0, i64 0
  %call8 = call i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %xr, i8* noundef %arraydecay7)
  %call9 = call i32 @secp256k1_gej_eq_x_var(%struct.secp256k1_fe* noundef %xr, %struct.secp256k1_gej* noundef %pr)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end6
  store i32 1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %call13 = call i32 @secp256k1_fe_cmp_var(%struct.secp256k1_fe* noundef %xr, %struct.secp256k1_fe* noundef @secp256k1_ecdsa_const_p_minus_order)
  %cmp = icmp sge i32 %call13, 0
  br i1 %cmp, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end12
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end12
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %xr, %struct.secp256k1_fe* noundef @secp256k1_ecdsa_const_order_as_fe)
  %call16 = call i32 @secp256k1_gej_eq_x_var(%struct.secp256k1_fe* noundef %xr, %struct.secp256k1_gej* noundef %pr)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end15
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end15
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end19, %if.then18, %if.then14, %if.then11, %if.then5, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @nonce_function_rfc6979(i8* noundef %nonce32, i8* noundef %msg32, i8* noundef %key32, i8* noundef %algo16, i8* noundef %data, i32 noundef %counter) #0 {
entry:
  %nonce32.addr = alloca i8*, align 8
  %msg32.addr = alloca i8*, align 8
  %key32.addr = alloca i8*, align 8
  %algo16.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %counter.addr = alloca i32, align 4
  %keydata = alloca [112 x i8], align 16
  %offset = alloca i32, align 4
  %rng = alloca %struct.secp256k1_rfc6979_hmac_sha256, align 4
  %i = alloca i32, align 4
  %msg = alloca %struct.secp256k1_scalar, align 8
  %msgmod32 = alloca [32 x i8], align 16
  store i8* %nonce32, i8** %nonce32.addr, align 8
  store i8* %msg32, i8** %msg32.addr, align 8
  store i8* %key32, i8** %key32.addr, align 8
  store i8* %algo16, i8** %algo16.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %counter, i32* %counter.addr, align 4
  store i32 0, i32* %offset, align 4
  %0 = load i8*, i8** %msg32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %msg, i8* noundef %0, i32* noundef null)
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %msgmod32, i64 0, i64 0
  call void @secp256k1_scalar_get_b32(i8* noundef %arraydecay, %struct.secp256k1_scalar* noundef %msg)
  %arraydecay1 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  %1 = load i8*, i8** %key32.addr, align 8
  call void @buffer_append(i8* noundef %arraydecay1, i32* noundef %offset, i8* noundef %1, i32 noundef 32)
  %arraydecay2 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %msgmod32, i64 0, i64 0
  call void @buffer_append(i8* noundef %arraydecay2, i32* noundef %offset, i8* noundef %arraydecay3, i32 noundef 32)
  %2 = load i8*, i8** %data.addr, align 8
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arraydecay4 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  %3 = load i8*, i8** %data.addr, align 8
  call void @buffer_append(i8* noundef %arraydecay4, i32* noundef %offset, i8* noundef %3, i32 noundef 32)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %algo16.addr, align 8
  %cmp5 = icmp ne i8* %4, null
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %arraydecay7 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  %5 = load i8*, i8** %algo16.addr, align 8
  call void @buffer_append(i8* noundef %arraydecay7, i32* noundef %offset, i8* noundef %5, i32 noundef 16)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %arraydecay9 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  %6 = load i32, i32* %offset, align 4
  %conv = zext i32 %6 to i64
  call void @secp256k1_rfc6979_hmac_sha256_initialize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %arraydecay9, i64 noundef %conv)
  %arraydecay10 = getelementptr inbounds [112 x i8], [112 x i8]* %keydata, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay10, i8 0, i64 112, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %counter.addr, align 4
  %cmp11 = icmp ule i32 %7, %8
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i8*, i8** %nonce32.addr, align 8
  call void @secp256k1_rfc6979_hmac_sha256_generate(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %9, i64 noundef 32)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !9

for.end:                                          ; preds = %for.cond
  call void @secp256k1_rfc6979_hmac_sha256_finalize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng)
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ecdsa_sign(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_ecdsa_signature* noundef %signature, i8* noundef %msghash32, i8* noundef %seckey, i32 (i8*, i8*, i8*, i8*, i8*, i32)* noundef %noncefp, i8* noundef %noncedata) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %signature.addr = alloca %struct.secp256k1_ecdsa_signature*, align 8
  %msghash32.addr = alloca i8*, align 8
  %seckey.addr = alloca i8*, align 8
  %noncefp.addr = alloca i32 (i8*, i8*, i8*, i8*, i8*, i32)*, align 8
  %noncedata.addr = alloca i8*, align 8
  %r = alloca %struct.secp256k1_scalar, align 8
  %s = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_ecdsa_signature* %signature, %struct.secp256k1_ecdsa_signature** %signature.addr, align 8
  store i8* %msghash32, i8** %msghash32.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i32 (i8*, i8*, i8*, i8*, i8*, i32)* %noncefp, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  store i8* %noncedata, i8** %noncedata.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %1, i32 0, i32 0
  %call = call i32 @secp256k1_ecmult_gen_context_is_built(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv2 = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv2, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %if.end
  br label %do.body5

do.body5:                                         ; preds = %do.end4
  %3 = load i8*, i8** %msghash32.addr, align 8
  %cmp6 = icmp ne i8* %3, null
  %lnot8 = xor i1 %cmp6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %tobool11 = icmp ne i64 %conv10, 0
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %do.body5
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback13 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback13, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %do.body5
  br label %do.end15

do.end15:                                         ; preds = %if.end14
  br label %do.body16

do.body16:                                        ; preds = %do.end15
  %5 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %signature.addr, align 8
  %cmp17 = icmp ne %struct.secp256k1_ecdsa_signature* %5, null
  %lnot19 = xor i1 %cmp17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %tobool22 = icmp ne i64 %conv21, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %do.body16
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback24 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback24, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.16, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %do.body16
  br label %do.end26

do.end26:                                         ; preds = %if.end25
  br label %do.body27

do.body27:                                        ; preds = %do.end26
  %7 = load i8*, i8** %seckey.addr, align 8
  %cmp28 = icmp ne i8* %7, null
  %lnot30 = xor i1 %cmp28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  %conv32 = sext i32 %lnot.ext31 to i64
  %tobool33 = icmp ne i64 %conv32, 0
  br i1 %tobool33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %do.body27
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback35 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %8, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback35, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %do.body27
  br label %do.end37

do.end37:                                         ; preds = %if.end36
  %9 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %10 = load i8*, i8** %msghash32.addr, align 8
  %11 = load i8*, i8** %seckey.addr, align 8
  %12 = load i32 (i8*, i8*, i8*, i8*, i8*, i32)*, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  %13 = load i8*, i8** %noncedata.addr, align 8
  %call38 = call i32 @secp256k1_ecdsa_sign_inner(%struct.secp256k1_context_struct* noundef %9, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, i32* noundef null, i8* noundef %10, i8* noundef %11, i32 (i8*, i8*, i8*, i8*, i8*, i32)* noundef %12, i8* noundef %13)
  store i32 %call38, i32* %ret, align 4
  %14 = load %struct.secp256k1_ecdsa_signature*, %struct.secp256k1_ecdsa_signature** %signature.addr, align 8
  call void @secp256k1_ecdsa_signature_save(%struct.secp256k1_ecdsa_signature* noundef %14, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s)
  %15 = load i32, i32* %ret, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end37, %if.then34, %if.then23, %if.then12, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecmult_gen_context_is_built(%struct.secp256k1_ecmult_gen_context* noundef %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %0 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %built = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %0, i32 0, i32 0
  %1 = load i32, i32* %built, align 8
  ret i32 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecdsa_sign_inner(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %s, i32* noundef %recid, i8* noundef %msg32, i8* noundef %seckey, i32 (i8*, i8*, i8*, i8*, i8*, i32)* noundef %noncefp, i8* noundef %noncedata) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %s.addr = alloca %struct.secp256k1_scalar*, align 8
  %recid.addr = alloca i32*, align 8
  %msg32.addr = alloca i8*, align 8
  %seckey.addr = alloca i8*, align 8
  %noncefp.addr = alloca i32 (i8*, i8*, i8*, i8*, i8*, i32)*, align 8
  %noncedata.addr = alloca i8*, align 8
  %sec = alloca %struct.secp256k1_scalar, align 8
  %non = alloca %struct.secp256k1_scalar, align 8
  %msg = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  %is_sec_valid = alloca i32, align 4
  %nonce32 = alloca [32 x i8], align 16
  %count = alloca i32, align 4
  %is_nonce_valid = alloca i32, align 4
  %zero = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %s, %struct.secp256k1_scalar** %s.addr, align 8
  store i32* %recid, i32** %recid.addr, align 8
  store i8* %msg32, i8** %msg32.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i32 (i8*, i8*, i8*, i8*, i8*, i32)* %noncefp, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  store i8* %noncedata, i8** %noncedata.addr, align 8
  store i32 0, i32* %ret, align 4
  store i32 0, i32* %count, align 4
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %1 = bitcast %struct.secp256k1_scalar* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 bitcast (%struct.secp256k1_scalar* @secp256k1_scalar_zero to i8*), i64 32, i1 false)
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %s.addr, align 8
  %3 = bitcast %struct.secp256k1_scalar* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 bitcast (%struct.secp256k1_scalar* @secp256k1_scalar_zero to i8*), i64 32, i1 false)
  %4 = load i32*, i32** %recid.addr, align 8
  %tobool = icmp ne i32* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32*, i32** %recid.addr, align 8
  store i32 0, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32 (i8*, i8*, i8*, i8*, i8*, i32)*, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  %cmp = icmp eq i32 (i8*, i8*, i8*, i8*, i8*, i32)* %6, null
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 (i8*, i8*, i8*, i8*, i8*, i32)* @nonce_function_rfc6979, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %7 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %sec, i8* noundef %7)
  store i32 %call, i32* %is_sec_valid, align 4
  %8 = load i32, i32* %is_sec_valid, align 4
  %tobool3 = icmp ne i32 %8, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef @secp256k1_scalar_one, i32 noundef %lnot.ext)
  %9 = load i8*, i8** %msg32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %msg, i8* noundef %9, i32* noundef null)
  br label %while.body

while.body:                                       ; preds = %if.end2, %if.end21
  %10 = load i32 (i8*, i8*, i8*, i8*, i8*, i32)*, i32 (i8*, i8*, i8*, i8*, i8*, i32)** %noncefp.addr, align 8
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  %11 = load i8*, i8** %msg32.addr, align 8
  %12 = load i8*, i8** %seckey.addr, align 8
  %13 = load i8*, i8** %noncedata.addr, align 8
  %14 = load i32, i32* %count, align 4
  %call4 = call i32 %10(i8* noundef %arraydecay, i8* noundef %11, i8* noundef %12, i8* noundef null, i8* noundef %13, i32 noundef %14)
  %tobool5 = icmp ne i32 %call4, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  store i32 %lnot.ext9, i32* %ret, align 4
  %15 = load i32, i32* %ret, align 4
  %tobool10 = icmp ne i32 %15, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %while.body
  br label %while.end

if.end12:                                         ; preds = %while.body
  %arraydecay13 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  %call14 = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %non, i8* noundef %arraydecay13)
  store i32 %call14, i32* %is_nonce_valid, align 4
  %16 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %17 = bitcast i32* %is_nonce_valid to i8*
  call void @secp256k1_declassify(%struct.secp256k1_context_struct* noundef %16, i8* noundef %17, i64 noundef 4)
  %18 = load i32, i32* %is_nonce_valid, align 4
  %tobool15 = icmp ne i32 %18, 0
  br i1 %tobool15, label %if.then16, label %if.end21

if.then16:                                        ; preds = %if.end12
  %19 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %19, i32 0, i32 0
  %20 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %21 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %s.addr, align 8
  %22 = load i32*, i32** %recid.addr, align 8
  %call17 = call i32 @secp256k1_ecdsa_sig_sign(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx, %struct.secp256k1_scalar* noundef %20, %struct.secp256k1_scalar* noundef %21, %struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef %msg, %struct.secp256k1_scalar* noundef %non, i32* noundef %22)
  store i32 %call17, i32* %ret, align 4
  %23 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %24 = bitcast i32* %ret to i8*
  call void @secp256k1_declassify(%struct.secp256k1_context_struct* noundef %23, i8* noundef %24, i64 noundef 4)
  %25 = load i32, i32* %ret, align 4
  %tobool18 = icmp ne i32 %25, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then16
  br label %while.end

if.end20:                                         ; preds = %if.then16
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end12
  %26 = load i32, i32* %count, align 4
  %inc = add i32 %26, 1
  store i32 %inc, i32* %count, align 4
  br label %while.body

while.end:                                        ; preds = %if.then19, %if.then11
  %27 = load i32, i32* %is_sec_valid, align 4
  %28 = load i32, i32* %ret, align 4
  %and = and i32 %28, %27
  store i32 %and, i32* %ret, align 4
  %arraydecay22 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay22, i8 0, i64 32, i1 false)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %msg)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %non)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %sec)
  %29 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %30 = load i32, i32* %ret, align 4
  %tobool23 = icmp ne i32 %30, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %29, %struct.secp256k1_scalar* noundef @secp256k1_scalar_zero, i32 noundef %lnot.ext25)
  %31 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %s.addr, align 8
  %32 = load i32, i32* %ret, align 4
  %tobool26 = icmp ne i32 %32, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %31, %struct.secp256k1_scalar* noundef @secp256k1_scalar_zero, i32 noundef %lnot.ext28)
  %33 = load i32*, i32** %recid.addr, align 8
  %tobool29 = icmp ne i32* %33, null
  br i1 %tobool29, label %if.then30, label %if.end34

if.then30:                                        ; preds = %while.end
  store i32 0, i32* %zero, align 4
  %34 = load i32*, i32** %recid.addr, align 8
  %35 = load i32, i32* %ret, align 4
  %tobool31 = icmp ne i32 %35, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  call void @secp256k1_int_cmov(i32* noundef %34, i32* noundef %zero, i32 noundef %lnot.ext33)
  br label %if.end34

if.end34:                                         ; preds = %if.then30, %while.end
  %36 = load i32, i32* %ret, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_seckey_verify(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %sec = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %seckey.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %sec, i8* noundef %3)
  store i32 %call, i32* %ret, align 4
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %sec)
  %4 = load i32, i32* %ret, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %r, i8* noundef %bin) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %bin.addr = alloca i8*, align 8
  %overflow = alloca i32, align 4
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i8* %bin, i8** %bin.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %1 = load i8*, i8** %bin.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %0, i8* noundef %1, i32* noundef %overflow)
  %2 = load i32, i32* %overflow, align 4
  %tobool = icmp ne i32 %2, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %3)
  %tobool1 = icmp ne i32 %call, 0
  %lnot2 = xor i1 %tobool1, true
  %lnot.ext3 = zext i1 %lnot2 to i32
  %and = and i32 %lnot.ext, %lnot.ext3
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 0, i64* %arrayidx, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 1
  store i64 0, i64* %arrayidx2, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 2
  store i64 0, i64* %arrayidx4, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 3
  store i64 0, i64* %arrayidx6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_create(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey, i8* noundef %seckey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %seckey.addr = alloca i8*, align 8
  %p = alloca %struct.secp256k1_ge, align 8
  %seckey_scalar = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %4 = bitcast %struct.secp256k1_pubkey* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 64, i1 false)
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %5, i32 0, i32 0
  %call = call i32 @secp256k1_ecmult_gen_context_is_built(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx)
  %tobool7 = icmp ne i32 %call, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %tobool11 = icmp ne i64 %conv10, 0
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %do.body6
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback13 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback13, i8* noundef getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %do.body6
  br label %do.end15

do.end15:                                         ; preds = %if.end14
  br label %do.body16

do.body16:                                        ; preds = %do.end15
  %7 = load i8*, i8** %seckey.addr, align 8
  %cmp17 = icmp ne i8* %7, null
  %lnot19 = xor i1 %cmp17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %tobool22 = icmp ne i64 %conv21, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %do.body16
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback24 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %8, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback24, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %do.body16
  br label %do.end26

do.end26:                                         ; preds = %if.end25
  %9 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx27 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %9, i32 0, i32 0
  %10 = load i8*, i8** %seckey.addr, align 8
  %call28 = call i32 @secp256k1_ec_pubkey_create_helper(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx27, %struct.secp256k1_scalar* noundef %seckey_scalar, %struct.secp256k1_ge* noundef %p, i8* noundef %10)
  store i32 %call28, i32* %ret, align 4
  %11 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %11, %struct.secp256k1_ge* noundef %p)
  %12 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %13 = bitcast %struct.secp256k1_pubkey* %12 to i8*
  %14 = load i32, i32* %ret, align 4
  %tobool29 = icmp ne i32 %14, 0
  %lnot30 = xor i1 %tobool29, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  call void @secp256k1_memczero(i8* noundef %13, i64 noundef 64, i32 noundef %lnot.ext31)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %seckey_scalar)
  %15 = load i32, i32* %ret, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end26, %if.then23, %if.then12, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ec_pubkey_create_helper(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx, %struct.secp256k1_scalar* noundef %seckey_scalar, %struct.secp256k1_ge* noundef %p, i8* noundef %seckey) #0 {
entry:
  %ecmult_gen_ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  %seckey_scalar.addr = alloca %struct.secp256k1_scalar*, align 8
  %p.addr = alloca %struct.secp256k1_ge*, align 8
  %seckey.addr = alloca i8*, align 8
  %pj = alloca %struct.secp256k1_gej, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_ecmult_gen_context* %ecmult_gen_ctx, %struct.secp256k1_ecmult_gen_context** %ecmult_gen_ctx.addr, align 8
  store %struct.secp256k1_scalar* %seckey_scalar, %struct.secp256k1_scalar** %seckey_scalar.addr, align 8
  store %struct.secp256k1_ge* %p, %struct.secp256k1_ge** %p.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %seckey_scalar.addr, align 8
  %1 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %0, i8* noundef %1)
  store i32 %call, i32* %ret, align 4
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %seckey_scalar.addr, align 8
  %3 = load i32, i32* %ret, align 4
  %tobool = icmp ne i32 %3, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %2, %struct.secp256k1_scalar* noundef @secp256k1_scalar_one, i32 noundef %lnot.ext)
  %4 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ecmult_gen_ctx.addr, align 8
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %seckey_scalar.addr, align 8
  call void @secp256k1_ecmult_gen(%struct.secp256k1_ecmult_gen_context* noundef %4, %struct.secp256k1_gej* noundef %pj, %struct.secp256k1_scalar* noundef %5)
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %p.addr, align 8
  call void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %6, %struct.secp256k1_gej* noundef %pj)
  %7 = load i32, i32* %ret, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_memczero(i8* noundef %s, i64 noundef %len, i32 noundef %flag) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flag.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %vflag = alloca i32, align 4
  %mask = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i8*, i8** %s.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i32, i32* %flag.addr, align 4
  store volatile i32 %1, i32* %vflag, align 4
  %2 = load volatile i32, i32* %vflag, align 4
  %conv = trunc i32 %2 to i8
  %conv1 = zext i8 %conv to i32
  %sub = sub nsw i32 0, %conv1
  %conv2 = trunc i32 %sub to i8
  store i8 %conv2, i8* %mask, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i64, i64* %len.addr, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8, i8* %mask, align 1
  %conv3 = zext i8 %4 to i32
  %neg = xor i32 %conv3, -1
  %5 = load i8*, i8** %p, align 8
  %6 = load i8, i8* %5, align 1
  %conv4 = zext i8 %6 to i32
  %and = and i32 %conv4, %neg
  %conv5 = trunc i32 %and to i8
  store i8 %conv5, i8* %5, align 1
  %7 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %8 = load i64, i64* %len.addr, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %len.addr, align 8
  br label %while.cond, !llvm.loop !10

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_seckey_negate(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %sec = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %seckey.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %sec, i8* noundef %3)
  store i32 %call, i32* %ret, align 4
  %4 = load i32, i32* %ret, align 4
  %tobool6 = icmp ne i32 %4, 0
  %lnot7 = xor i1 %tobool6, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef @secp256k1_scalar_zero, i32 noundef %lnot.ext8)
  call void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef %sec)
  %5 = load i8*, i8** %seckey.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %5, %struct.secp256k1_scalar* noundef %sec)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %sec)
  %6 = load i32, i32* %ret, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end5, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %a, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %flag.addr = alloca i32, align 4
  %mask0 = alloca i64, align 8
  %mask1 = alloca i64, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  %conv = sext i32 %0 to i64
  %add = add i64 %conv, -1
  store i64 %add, i64* %mask0, align 8
  %1 = load i64, i64* %mask0, align 8
  %neg = xor i64 %1, -1
  store i64 %neg, i64* %mask1, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i64, i64* %mask0, align 8
  %and = and i64 %3, %4
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %5, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 0
  %6 = load i64, i64* %arrayidx2, align 8
  %7 = load i64, i64* %mask1, align 8
  %and3 = and i64 %6, %7
  %or = or i64 %and, %and3
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d4 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [4 x i64], [4 x i64]* %d4, i64 0, i64 0
  store i64 %or, i64* %arrayidx5, align 8
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d6 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %9, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %d6, i64 0, i64 1
  %10 = load i64, i64* %arrayidx7, align 8
  %11 = load i64, i64* %mask0, align 8
  %and8 = and i64 %10, %11
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d9 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [4 x i64], [4 x i64]* %d9, i64 0, i64 1
  %13 = load i64, i64* %arrayidx10, align 8
  %14 = load i64, i64* %mask1, align 8
  %and11 = and i64 %13, %14
  %or12 = or i64 %and8, %and11
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d13 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %d13, i64 0, i64 1
  store i64 %or12, i64* %arrayidx14, align 8
  %16 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d15 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %16, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x i64], [4 x i64]* %d15, i64 0, i64 2
  %17 = load i64, i64* %arrayidx16, align 8
  %18 = load i64, i64* %mask0, align 8
  %and17 = and i64 %17, %18
  %19 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d18 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %19, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [4 x i64], [4 x i64]* %d18, i64 0, i64 2
  %20 = load i64, i64* %arrayidx19, align 8
  %21 = load i64, i64* %mask1, align 8
  %and20 = and i64 %20, %21
  %or21 = or i64 %and17, %and20
  %22 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d22 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %22, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [4 x i64], [4 x i64]* %d22, i64 0, i64 2
  store i64 %or21, i64* %arrayidx23, align 8
  %23 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d24 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %23, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x i64], [4 x i64]* %d24, i64 0, i64 3
  %24 = load i64, i64* %arrayidx25, align 8
  %25 = load i64, i64* %mask0, align 8
  %and26 = and i64 %24, %25
  %26 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d27 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %26, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %d27, i64 0, i64 3
  %27 = load i64, i64* %arrayidx28, align 8
  %28 = load i64, i64* %mask1, align 8
  %and29 = and i64 %27, %28
  %or30 = or i64 %and26, %and29
  %29 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d31 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %29, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [4 x i64], [4 x i64]* %d31, i64 0, i64 3
  store i64 %or30, i64* %arrayidx32, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_privkey_negate(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_ec_seckey_negate(%struct.secp256k1_context_struct* noundef %0, i8* noundef %1)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_negate(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %ret = alloca i32, align 4
  %p = alloca %struct.secp256k1_ge, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %4 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %call = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %3, %struct.secp256k1_ge* noundef %p, %struct.secp256k1_pubkey* noundef %4)
  store i32 %call, i32* %ret, align 4
  %5 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %6 = bitcast %struct.secp256k1_pubkey* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 0, i64 64, i1 false)
  %7 = load i32, i32* %ret, align 4
  %tobool6 = icmp ne i32 %7, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.end5
  call void @secp256k1_ge_neg(%struct.secp256k1_ge* noundef %p, %struct.secp256k1_ge* noundef %p)
  %8 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %8, %struct.secp256k1_ge* noundef %p)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.end5
  %9 = load i32, i32* %ret, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end8, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_neg(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_ge* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %1 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %2 = bitcast %struct.secp256k1_ge* %0 to i8*
  %3 = bitcast %struct.secp256k1_ge* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 88, i1 false)
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 1
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %y)
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %5, i32 0, i32 1
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %6, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y1, %struct.secp256k1_fe* noundef %y2, i32 noundef 1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_seckey_tweak_add(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey, i8* noundef %tweak32) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %tweak32.addr = alloca i8*, align 8
  %sec = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %seckey.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %tweak32.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %sec, i8* noundef %5)
  store i32 %call, i32* %ret, align 4
  %6 = load i8*, i8** %tweak32.addr, align 8
  %call17 = call i32 @secp256k1_ec_seckey_tweak_add_helper(%struct.secp256k1_scalar* noundef %sec, i8* noundef %6)
  %7 = load i32, i32* %ret, align 4
  %and = and i32 %7, %call17
  store i32 %and, i32* %ret, align 4
  %8 = load i32, i32* %ret, align 4
  %tobool18 = icmp ne i32 %8, 0
  %lnot19 = xor i1 %tobool18, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef @secp256k1_scalar_zero, i32 noundef %lnot.ext20)
  %9 = load i8*, i8** %seckey.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %9, %struct.secp256k1_scalar* noundef %sec)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %sec)
  %10 = load i32, i32* %ret, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end16, %if.then13, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ec_seckey_tweak_add_helper(%struct.secp256k1_scalar* noundef %sec, i8* noundef %tweak32) #0 {
entry:
  %sec.addr = alloca %struct.secp256k1_scalar*, align 8
  %tweak32.addr = alloca i8*, align 8
  %term = alloca %struct.secp256k1_scalar, align 8
  %overflow = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.secp256k1_scalar* %sec, %struct.secp256k1_scalar** %sec.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %overflow, align 4
  store i32 0, i32* %ret, align 4
  %0 = load i8*, i8** %tweak32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %term, i8* noundef %0, i32* noundef %overflow)
  %1 = load i32, i32* %overflow, align 4
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sec.addr, align 8
  %call = call i32 @secp256k1_eckey_privkey_tweak_add(%struct.secp256k1_scalar* noundef %2, %struct.secp256k1_scalar* noundef %term)
  %and = and i32 %lnot.ext, %call
  store i32 %and, i32* %ret, align 4
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %term)
  %3 = load i32, i32* %ret, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_privkey_tweak_add(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey, i8* noundef %tweak32) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %tweak32.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load i8*, i8** %seckey.addr, align 8
  %2 = load i8*, i8** %tweak32.addr, align 8
  %call = call i32 @secp256k1_ec_seckey_tweak_add(%struct.secp256k1_context_struct* noundef %0, i8* noundef %1, i8* noundef %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_tweak_add(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey, i8* noundef %tweak32) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %tweak32.addr = alloca i8*, align 8
  %p = alloca %struct.secp256k1_ge, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %tweak32.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %6 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %call = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %5, %struct.secp256k1_ge* noundef %p, %struct.secp256k1_pubkey* noundef %6)
  store i32 %call, i32* %ret, align 4
  %7 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %8 = bitcast %struct.secp256k1_pubkey* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 64, i1 false)
  %9 = load i32, i32* %ret, align 4
  %tobool17 = icmp ne i32 %9, 0
  br i1 %tobool17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.end16
  %10 = load i8*, i8** %tweak32.addr, align 8
  %call18 = call i32 @secp256k1_ec_pubkey_tweak_add_helper(%struct.secp256k1_ge* noundef %p, i8* noundef %10)
  %tobool19 = icmp ne i32 %call18, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end16
  %11 = phi i1 [ false, %do.end16 ], [ %tobool19, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %ret, align 4
  %12 = load i32, i32* %ret, align 4
  %tobool20 = icmp ne i32 %12, 0
  br i1 %tobool20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.end
  %13 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %13, %struct.secp256k1_ge* noundef %p)
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %land.end
  %14 = load i32, i32* %ret, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end22, %if.then13, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ec_pubkey_tweak_add_helper(%struct.secp256k1_ge* noundef %p, i8* noundef %tweak32) #0 {
entry:
  %p.addr = alloca %struct.secp256k1_ge*, align 8
  %tweak32.addr = alloca i8*, align 8
  %term = alloca %struct.secp256k1_scalar, align 8
  %overflow = alloca i32, align 4
  store %struct.secp256k1_ge* %p, %struct.secp256k1_ge** %p.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %overflow, align 4
  %0 = load i8*, i8** %tweak32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %term, i8* noundef %0, i32* noundef %overflow)
  %1 = load i32, i32* %overflow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %p.addr, align 8
  %call = call i32 @secp256k1_eckey_pubkey_tweak_add(%struct.secp256k1_ge* noundef %2, %struct.secp256k1_scalar* noundef %term)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_seckey_tweak_mul(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey, i8* noundef %tweak32) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %tweak32.addr = alloca i8*, align 8
  %factor = alloca %struct.secp256k1_scalar, align 8
  %sec = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  %overflow = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %ret, align 4
  store i32 0, i32* %overflow, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %seckey.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %tweak32.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load i8*, i8** %tweak32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %factor, i8* noundef %5, i32* noundef %overflow)
  %6 = load i8*, i8** %seckey.addr, align 8
  %call = call i32 @secp256k1_scalar_set_b32_seckey(%struct.secp256k1_scalar* noundef %sec, i8* noundef %6)
  store i32 %call, i32* %ret, align 4
  %7 = load i32, i32* %overflow, align 4
  %tobool17 = icmp ne i32 %7, 0
  %lnot18 = xor i1 %tobool17, true
  %lnot.ext19 = zext i1 %lnot18 to i32
  %call20 = call i32 @secp256k1_eckey_privkey_tweak_mul(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef %factor)
  %and = and i32 %lnot.ext19, %call20
  %8 = load i32, i32* %ret, align 4
  %and21 = and i32 %8, %and
  store i32 %and21, i32* %ret, align 4
  %9 = load i32, i32* %ret, align 4
  %tobool22 = icmp ne i32 %9, 0
  %lnot23 = xor i1 %tobool22, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %sec, %struct.secp256k1_scalar* noundef @secp256k1_scalar_zero, i32 noundef %lnot.ext24)
  %10 = load i8*, i8** %seckey.addr, align 8
  call void @secp256k1_scalar_get_b32(i8* noundef %10, %struct.secp256k1_scalar* noundef %sec)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %sec)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %factor)
  %11 = load i32, i32* %ret, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end16, %if.then13, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_privkey_tweak_mul(%struct.secp256k1_scalar* noundef %key, %struct.secp256k1_scalar* noundef %tweak) #0 {
entry:
  %key.addr = alloca %struct.secp256k1_scalar*, align 8
  %tweak.addr = alloca %struct.secp256k1_scalar*, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_scalar* %key, %struct.secp256k1_scalar** %key.addr, align 8
  store %struct.secp256k1_scalar* %tweak, %struct.secp256k1_scalar** %tweak.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %0)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %ret, align 4
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %key.addr, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %key.addr, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %1, %struct.secp256k1_scalar* noundef %2, %struct.secp256k1_scalar* noundef %3)
  %4 = load i32, i32* %ret, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_privkey_tweak_mul(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seckey, i8* noundef %tweak32) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seckey.addr = alloca i8*, align 8
  %tweak32.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seckey, i8** %seckey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load i8*, i8** %seckey.addr, align 8
  %2 = load i8*, i8** %tweak32.addr, align 8
  %call = call i32 @secp256k1_ec_seckey_tweak_mul(%struct.secp256k1_context_struct* noundef %0, i8* noundef %1, i8* noundef %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_tweak_mul(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubkey, i8* noundef %tweak32) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubkey.addr = alloca %struct.secp256k1_pubkey*, align 8
  %tweak32.addr = alloca i8*, align 8
  %p = alloca %struct.secp256k1_ge, align 8
  %factor = alloca %struct.secp256k1_scalar, align 8
  %ret = alloca i32, align 4
  %overflow = alloca i32, align 4
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubkey, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  store i8* %tweak32, i8** %tweak32.addr, align 8
  store i32 0, i32* %ret, align 4
  store i32 0, i32* %overflow, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %tweak32.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  %5 = load i8*, i8** %tweak32.addr, align 8
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %factor, i8* noundef %5, i32* noundef %overflow)
  %6 = load i32, i32* %overflow, align 4
  %tobool17 = icmp ne i32 %6, 0
  br i1 %tobool17, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %do.end16
  %7 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %8 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %call = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %7, %struct.secp256k1_ge* noundef %p, %struct.secp256k1_pubkey* noundef %8)
  %tobool18 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end16
  %9 = phi i1 [ false, %do.end16 ], [ %tobool18, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  store i32 %land.ext, i32* %ret, align 4
  %10 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  %11 = bitcast %struct.secp256k1_pubkey* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 64, i1 false)
  %12 = load i32, i32* %ret, align 4
  %tobool19 = icmp ne i32 %12, 0
  br i1 %tobool19, label %if.then20, label %if.end25

if.then20:                                        ; preds = %land.end
  %call21 = call i32 @secp256k1_eckey_pubkey_tweak_mul(%struct.secp256k1_ge* noundef %p, %struct.secp256k1_scalar* noundef %factor)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then23, label %if.else

if.then23:                                        ; preds = %if.then20
  %13 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubkey.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %13, %struct.secp256k1_ge* noundef %p)
  br label %if.end24

if.else:                                          ; preds = %if.then20
  store i32 0, i32* %ret, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then23
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %land.end
  %14 = load i32, i32* %ret, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end25, %if.then13, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_pubkey_tweak_mul(%struct.secp256k1_ge* noundef %key, %struct.secp256k1_scalar* noundef %tweak) #0 {
entry:
  %retval = alloca i32, align 4
  %key.addr = alloca %struct.secp256k1_ge*, align 8
  %tweak.addr = alloca %struct.secp256k1_scalar*, align 8
  %zero = alloca %struct.secp256k1_scalar, align 8
  %pt = alloca %struct.secp256k1_gej, align 8
  store %struct.secp256k1_ge* %key, %struct.secp256k1_ge** %key.addr, align 8
  store %struct.secp256k1_scalar* %tweak, %struct.secp256k1_scalar** %tweak.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  call void @secp256k1_scalar_set_int(%struct.secp256k1_scalar* noundef %zero, i32 noundef 0)
  %1 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %key.addr, align 8
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %pt, %struct.secp256k1_ge* noundef %1)
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  call void @secp256k1_ecmult(%struct.secp256k1_gej* noundef %pt, %struct.secp256k1_gej* noundef %pt, %struct.secp256k1_scalar* noundef %2, %struct.secp256k1_scalar* noundef %zero)
  %3 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %key.addr, align 8
  call void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %3, %struct.secp256k1_gej* noundef %pt)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_context_randomize(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %seed32) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %seed32.addr = alloca i8*, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %seed32, i8** %seed32.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %1, i32 0, i32 0
  %call = call i32 @secp256k1_ecmult_gen_context_is_built(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %ecmult_gen_ctx1 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 0
  %3 = load i8*, i8** %seed32.addr, align 8
  call void @secp256k1_ecmult_gen_blind(%struct.secp256k1_ecmult_gen_context* noundef %ecmult_gen_ctx1, i8* noundef %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_gen_blind(%struct.secp256k1_ecmult_gen_context* noundef %ctx, i8* noundef %seed32) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  %seed32.addr = alloca i8*, align 8
  %b = alloca %struct.secp256k1_scalar, align 8
  %gb = alloca %struct.secp256k1_gej, align 8
  %s = alloca %struct.secp256k1_fe, align 8
  %nonce32 = alloca [32 x i8], align 16
  %rng = alloca %struct.secp256k1_rfc6979_hmac_sha256, align 4
  %overflow = alloca i32, align 4
  %keydata = alloca [64 x i8], align 16
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  store i8* %seed32, i8** %seed32.addr, align 8
  %0 = load i8*, i8** %seed32.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %1, i32 0, i32 2
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %initial, %struct.secp256k1_ge* noundef @secp256k1_ge_const_g)
  %2 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial1 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %2, i32 0, i32 2
  %3 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial2 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %3, i32 0, i32 2
  call void @secp256k1_gej_neg(%struct.secp256k1_gej* noundef %initial1, %struct.secp256k1_gej* noundef %initial2)
  %4 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %blind = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %4, i32 0, i32 1
  call void @secp256k1_scalar_set_int(%struct.secp256k1_scalar* noundef %blind, i32 noundef 1)
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %keydata, i64 0, i64 0
  %5 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %blind3 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %5, i32 0, i32 1
  call void @secp256k1_scalar_get_b32(i8* noundef %arraydecay, %struct.secp256k1_scalar* noundef %blind3)
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load i8*, i8** %seed32.addr, align 8
  %cmp4 = icmp ne i8* %6, null
  %conv = zext i1 %cmp4 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %keydata, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 32
  %7 = load i8*, i8** %seed32.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %7, i64 32, i1 false)
  %arraydecay6 = getelementptr inbounds [64 x i8], [64 x i8]* %keydata, i64 0, i64 0
  call void @secp256k1_rfc6979_hmac_sha256_initialize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %arraydecay6, i64 noundef 64)
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %keydata, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay7, i8 0, i64 64, i1 false)
  %arraydecay8 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  call void @secp256k1_rfc6979_hmac_sha256_generate(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %arraydecay8, i64 noundef 32)
  %arraydecay9 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  %call = call i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %s, i8* noundef %arraydecay9)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %overflow, align 4
  %call10 = call i32 @secp256k1_fe_is_zero(%struct.secp256k1_fe* noundef %s)
  %8 = load i32, i32* %overflow, align 4
  %or = or i32 %8, %call10
  store i32 %or, i32* %overflow, align 4
  %9 = load i32, i32* %overflow, align 4
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %s, %struct.secp256k1_fe* noundef @secp256k1_fe_one, i32 noundef %9)
  %10 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial11 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %10, i32 0, i32 2
  call void @secp256k1_gej_rescale(%struct.secp256k1_gej* noundef %initial11, %struct.secp256k1_fe* noundef %s)
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %s)
  %arraydecay12 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  call void @secp256k1_rfc6979_hmac_sha256_generate(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %arraydecay12, i64 noundef 32)
  %arraydecay13 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %b, i8* noundef %arraydecay13, i32* noundef null)
  %call14 = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %b)
  call void @secp256k1_scalar_cmov(%struct.secp256k1_scalar* noundef %b, %struct.secp256k1_scalar* noundef @secp256k1_scalar_one, i32 noundef %call14)
  call void @secp256k1_rfc6979_hmac_sha256_finalize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng)
  %arraydecay15 = getelementptr inbounds [32 x i8], [32 x i8]* %nonce32, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay15, i8 0, i64 32, i1 false)
  %11 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  call void @secp256k1_ecmult_gen(%struct.secp256k1_ecmult_gen_context* noundef %11, %struct.secp256k1_gej* noundef %gb, %struct.secp256k1_scalar* noundef %b)
  call void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %b, %struct.secp256k1_scalar* noundef %b)
  %12 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %blind16 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %12, i32 0, i32 1
  %13 = bitcast %struct.secp256k1_scalar* %blind16 to i8*
  %14 = bitcast %struct.secp256k1_scalar* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 32, i1 false)
  %15 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial17 = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %15, i32 0, i32 2
  %16 = bitcast %struct.secp256k1_gej* %initial17 to i8*
  %17 = bitcast %struct.secp256k1_gej* %gb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 128, i1 false)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %b)
  call void @secp256k1_gej_clear(%struct.secp256k1_gej* noundef %gb)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_ec_pubkey_combine(%struct.secp256k1_context_struct* noundef %ctx, %struct.secp256k1_pubkey* noundef %pubnonce, %struct.secp256k1_pubkey** noundef %pubnonces, i64 noundef %n) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %pubnonce.addr = alloca %struct.secp256k1_pubkey*, align 8
  %pubnonces.addr = alloca %struct.secp256k1_pubkey**, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %Qj = alloca %struct.secp256k1_gej, align 8
  %Q = alloca %struct.secp256k1_ge, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store %struct.secp256k1_pubkey* %pubnonce, %struct.secp256k1_pubkey** %pubnonce.addr, align 8
  store %struct.secp256k1_pubkey** %pubnonces, %struct.secp256k1_pubkey*** %pubnonces.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubnonce.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_pubkey* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %3 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubnonce.addr, align 8
  %4 = bitcast %struct.secp256k1_pubkey* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 64, i1 false)
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %5 = load i64, i64* %n.addr, align 8
  %cmp7 = icmp uge i64 %5, 1
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  %7 = load %struct.secp256k1_pubkey**, %struct.secp256k1_pubkey*** %pubnonces.addr, align 8
  %cmp18 = icmp ne %struct.secp256k1_pubkey** %7, null
  %lnot20 = xor i1 %cmp18, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %conv22 = sext i32 %lnot.ext21 to i64
  %tobool23 = icmp ne i64 %conv22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body17
  %8 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback25 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %8, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback25, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %do.body17
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  call void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %Qj)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end27
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %n.addr, align 8
  %cmp28 = icmp ult i64 %9, %10
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body30

do.body30:                                        ; preds = %for.body
  %11 = load %struct.secp256k1_pubkey**, %struct.secp256k1_pubkey*** %pubnonces.addr, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %11, i64 %12
  %13 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %arrayidx, align 8
  %cmp31 = icmp ne %struct.secp256k1_pubkey* %13, null
  %lnot33 = xor i1 %cmp31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  %conv35 = sext i32 %lnot.ext34 to i64
  %tobool36 = icmp ne i64 %conv35, 0
  br i1 %tobool36, label %if.then37, label %if.end39

if.then37:                                        ; preds = %do.body30
  %14 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback38 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %14, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback38, i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %do.body30
  br label %do.end40

do.end40:                                         ; preds = %if.end39
  %15 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %16 = load %struct.secp256k1_pubkey**, %struct.secp256k1_pubkey*** %pubnonces.addr, align 8
  %17 = load i64, i64* %i, align 8
  %arrayidx41 = getelementptr inbounds %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %16, i64 %17
  %18 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %arrayidx41, align 8
  %call = call i32 @secp256k1_pubkey_load(%struct.secp256k1_context_struct* noundef %15, %struct.secp256k1_ge* noundef %Q, %struct.secp256k1_pubkey* noundef %18)
  call void @secp256k1_gej_add_ge(%struct.secp256k1_gej* noundef %Qj, %struct.secp256k1_gej* noundef %Qj, %struct.secp256k1_ge* noundef %Q)
  br label %for.inc

for.inc:                                          ; preds = %do.end40
  %19 = load i64, i64* %i, align 8
  %inc = add i64 %19, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond, !llvm.loop !11

for.end:                                          ; preds = %for.cond
  %call42 = call i32 @secp256k1_gej_is_infinity(%struct.secp256k1_gej* noundef %Qj)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %for.end
  call void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %Q, %struct.secp256k1_gej* noundef %Qj)
  %20 = load %struct.secp256k1_pubkey*, %struct.secp256k1_pubkey** %pubnonce.addr, align 8
  call void @secp256k1_pubkey_save(%struct.secp256k1_pubkey* noundef %20, %struct.secp256k1_ge* noundef %Q)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end45, %if.then44, %if.then37, %if.then24, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  store i32 1, i32* %infinity, align 8
  %1 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %1, i32 0, i32 0
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %x)
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 1
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %y)
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 2
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %z)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_add_ge(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_ge* noundef %b) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %b.addr = alloca %struct.secp256k1_ge*, align 8
  %zz = alloca %struct.secp256k1_fe, align 8
  %u1 = alloca %struct.secp256k1_fe, align 8
  %u2 = alloca %struct.secp256k1_fe, align 8
  %s1 = alloca %struct.secp256k1_fe, align 8
  %s2 = alloca %struct.secp256k1_fe, align 8
  %t = alloca %struct.secp256k1_fe, align 8
  %tt = alloca %struct.secp256k1_fe, align 8
  %m = alloca %struct.secp256k1_fe, align 8
  %n = alloca %struct.secp256k1_fe, align 8
  %q = alloca %struct.secp256k1_fe, align 8
  %rr = alloca %struct.secp256k1_fe, align 8
  %m_alt = alloca %struct.secp256k1_fe, align 8
  %rr_alt = alloca %struct.secp256k1_fe, align 8
  %infinity = alloca i32, align 4
  %degenerate = alloca i32, align 4
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_ge* %b, %struct.secp256k1_ge** %b.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  %1 = load i32, i32* %infinity1, align 8
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 3
  %3 = load i32, i32* %infinity3, align 8
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body2
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 3
  %5 = load i32, i32* %infinity4, align 8
  %cmp5 = icmp eq i32 %5, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body2
  %6 = phi i1 [ true, %do.body2 ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  br label %do.end6

do.end6:                                          ; preds = %lor.end
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 2
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %zz, %struct.secp256k1_fe* noundef %z)
  %8 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %8, i32 0, i32 0
  %9 = bitcast %struct.secp256k1_fe* %u1 to i8*
  %10 = bitcast %struct.secp256k1_fe* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %u1)
  %11 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %x7 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %11, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %u2, %struct.secp256k1_fe* noundef %x7, %struct.secp256k1_fe* noundef %zz)
  %12 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %12, i32 0, i32 1
  %13 = bitcast %struct.secp256k1_fe* %s1 to i8*
  %14 = bitcast %struct.secp256k1_fe* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %s1)
  %15 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %y8 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %15, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %y8, %struct.secp256k1_fe* noundef %zz)
  %16 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z9 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %16, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %z9)
  %17 = bitcast %struct.secp256k1_fe* %t to i8*
  %18 = bitcast %struct.secp256k1_fe* %u1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 40, i1 false)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %u2)
  %19 = bitcast %struct.secp256k1_fe* %m to i8*
  %20 = bitcast %struct.secp256k1_fe* %s1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 40, i1 false)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %m, %struct.secp256k1_fe* noundef %s2)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %rr, %struct.secp256k1_fe* noundef %t)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %m_alt, %struct.secp256k1_fe* noundef %u2, i32 noundef 1)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %tt, %struct.secp256k1_fe* noundef %u1, %struct.secp256k1_fe* noundef %m_alt)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %rr, %struct.secp256k1_fe* noundef %tt)
  %call = call i32 @secp256k1_fe_normalizes_to_zero(%struct.secp256k1_fe* noundef %m)
  %call10 = call i32 @secp256k1_fe_normalizes_to_zero(%struct.secp256k1_fe* noundef %rr)
  %and = and i32 %call, %call10
  store i32 %and, i32* %degenerate, align 4
  %21 = bitcast %struct.secp256k1_fe* %rr_alt to i8*
  %22 = bitcast %struct.secp256k1_fe* %s1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 40, i1 false)
  call void @secp256k1_fe_mul_int(%struct.secp256k1_fe* noundef %rr_alt, i32 noundef 2)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %m_alt, %struct.secp256k1_fe* noundef %u1)
  %23 = load i32, i32* %degenerate, align 4
  %tobool11 = icmp ne i32 %23, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %rr_alt, %struct.secp256k1_fe* noundef %rr, i32 noundef %lnot.ext13)
  %24 = load i32, i32* %degenerate, align 4
  %tobool14 = icmp ne i32 %24, 0
  %lnot15 = xor i1 %tobool14, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %m_alt, %struct.secp256k1_fe* noundef %m, i32 noundef %lnot.ext16)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %n, %struct.secp256k1_fe* noundef %m_alt)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %q, %struct.secp256k1_fe* noundef %t, i32 noundef 2)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %q, %struct.secp256k1_fe* noundef %q, %struct.secp256k1_fe* noundef %n)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %n, %struct.secp256k1_fe* noundef %n)
  %25 = load i32, i32* %degenerate, align 4
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %n, %struct.secp256k1_fe* noundef %m, i32 noundef %25)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %rr_alt)
  %26 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z17 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %26, i32 0, i32 2
  %27 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z18 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %27, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z17, %struct.secp256k1_fe* noundef %z18, %struct.secp256k1_fe* noundef %m_alt)
  %28 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z19 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %28, i32 0, i32 2
  %call20 = call i32 @secp256k1_fe_normalizes_to_zero(%struct.secp256k1_fe* noundef %z19)
  %29 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity21 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %29, i32 0, i32 3
  %30 = load i32, i32* %infinity21, align 8
  %neg = xor i32 %30, -1
  %and22 = and i32 %call20, %neg
  store i32 %and22, i32* %infinity, align 4
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %q)
  %31 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x23 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %31, i32 0, i32 0
  %32 = bitcast %struct.secp256k1_fe* %x23 to i8*
  %33 = bitcast %struct.secp256k1_fe* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 40, i1 false)
  call void @secp256k1_fe_mul_int(%struct.secp256k1_fe* noundef %t, i32 noundef 2)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %q)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %rr_alt)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %n)
  %34 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y24 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %34, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y24, %struct.secp256k1_fe* noundef %t, i32 noundef 3)
  %35 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y25 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %35, i32 0, i32 1
  call void @secp256k1_fe_half(%struct.secp256k1_fe* noundef %y25)
  %36 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x26 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %36, i32 0, i32 0
  %37 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %x27 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %37, i32 0, i32 0
  %38 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity28 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %38, i32 0, i32 3
  %39 = load i32, i32* %infinity28, align 8
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %x26, %struct.secp256k1_fe* noundef %x27, i32 noundef %39)
  %40 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y29 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %40, i32 0, i32 1
  %41 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %y30 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %41, i32 0, i32 1
  %42 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity31 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %42, i32 0, i32 3
  %43 = load i32, i32* %infinity31, align 8
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %y29, %struct.secp256k1_fe* noundef %y30, i32 noundef %43)
  %44 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z32 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %44, i32 0, i32 2
  %45 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity33 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %45, i32 0, i32 3
  %46 = load i32, i32* %infinity33, align 8
  call void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %z32, %struct.secp256k1_fe* noundef @secp256k1_fe_one, i32 noundef %46)
  %47 = load i32, i32* %infinity, align 4
  %48 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity34 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %48, i32 0, i32 3
  store i32 %47, i32* %infinity34, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_gej_is_infinity(%struct.secp256k1_gej* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  ret i32 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_gej* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %z2 = alloca %struct.secp256k1_fe, align 8
  %z3 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 2
  store i32 %1, i32* %infinity1, align 8
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 2
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 2
  call void @secp256k1_fe_inv(%struct.secp256k1_fe* noundef %z, %struct.secp256k1_fe* noundef %z4)
  %5 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z5 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %5, i32 0, i32 2
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %z2, %struct.secp256k1_fe* noundef %z5)
  %6 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z6 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %6, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z3, %struct.secp256k1_fe* noundef %z6, %struct.secp256k1_fe* noundef %z2)
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 0
  %8 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x7 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %8, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %x7, %struct.secp256k1_fe* noundef %z2)
  %9 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %9, i32 0, i32 1
  %10 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y8 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %10, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y8, %struct.secp256k1_fe* noundef %z3)
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z9 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %11, i32 0, i32 2
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %z9, i32 noundef 1)
  %12 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x10 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %12, i32 0, i32 0
  %13 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x11 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %13, i32 0, i32 0
  %14 = bitcast %struct.secp256k1_fe* %x10 to i8*
  %15 = bitcast %struct.secp256k1_fe* %x11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 40, i1 false)
  %16 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y12 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %16, i32 0, i32 1
  %17 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y13 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %17, i32 0, i32 1
  %18 = bitcast %struct.secp256k1_fe* %y12 to i8*
  %19 = bitcast %struct.secp256k1_fe* %y13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 40, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @secp256k1_tagged_sha256(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %hash32, i8* noundef %tag, i64 noundef %taglen, i8* noundef %msg, i64 noundef %msglen) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %hash32.addr = alloca i8*, align 8
  %tag.addr = alloca i8*, align 8
  %taglen.addr = alloca i64, align 8
  %msg.addr = alloca i8*, align 8
  %msglen.addr = alloca i64, align 8
  %sha = alloca %struct.secp256k1_sha256, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %hash32, i8** %hash32.addr, align 8
  store i8* %tag, i8** %tag.addr, align 8
  store i64 %taglen, i64* %taglen.addr, align 8
  store i8* %msg, i8** %msg.addr, align 8
  store i64 %msglen, i64* %msglen.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %cmp = icmp ne %struct.secp256k1_context_struct* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i8*, i8** %hash32.addr, align 8
  %cmp2 = icmp ne i8* %1, null
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  %conv4 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %2 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %2, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.end5
  %3 = load i8*, i8** %tag.addr, align 8
  %cmp7 = icmp ne i8* %3, null
  %lnot9 = xor i1 %cmp7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %tobool12 = icmp ne i64 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.body6
  %4 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback14 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %4, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback14, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %do.body6
  br label %do.end16

do.end16:                                         ; preds = %if.end15
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  %5 = load i8*, i8** %msg.addr, align 8
  %cmp18 = icmp ne i8* %5, null
  %lnot20 = xor i1 %cmp18, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %conv22 = sext i32 %lnot.ext21 to i64
  %tobool23 = icmp ne i64 %conv22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body17
  %6 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %illegal_callback25 = getelementptr inbounds %struct.secp256k1_context_struct, %struct.secp256k1_context_struct* %6, i32 0, i32 1
  call void @secp256k1_callback_call(%struct.secp256k1_callback* noundef %illegal_callback25, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %do.body17
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  %7 = load i8*, i8** %tag.addr, align 8
  %8 = load i64, i64* %taglen.addr, align 8
  call void @secp256k1_sha256_initialize_tagged(%struct.secp256k1_sha256* noundef %sha, i8* noundef %7, i64 noundef %8)
  %9 = load i8*, i8** %msg.addr, align 8
  %10 = load i64, i64* %msglen.addr, align 8
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %sha, i8* noundef %9, i64 noundef %10)
  %11 = load i8*, i8** %hash32.addr, align 8
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %sha, i8* noundef %11)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end27, %if.then24, %if.then13, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_sha256_initialize_tagged(%struct.secp256k1_sha256* noundef %hash, i8* noundef %tag, i64 noundef %taglen) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_sha256*, align 8
  %tag.addr = alloca i8*, align 8
  %taglen.addr = alloca i64, align 8
  %buf = alloca [32 x i8], align 16
  store %struct.secp256k1_sha256* %hash, %struct.secp256k1_sha256** %hash.addr, align 8
  store i8* %tag, i8** %tag.addr, align 8
  store i64 %taglen, i64* %taglen.addr, align 8
  %0 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %0)
  %1 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %2 = load i8*, i8** %tag.addr, align 8
  %3 = load i64, i64* %taglen.addr, align 8
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %1, i8* noundef %2, i64 noundef %3)
  %4 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %4, i8* noundef %arraydecay)
  %5 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %5)
  %6 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %6, i8* noundef %arraydecay1, i64 noundef 32)
  %7 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %7, i8* noundef %arraydecay2, i64 noundef 32)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %hash, i8* noundef %data, i64 noundef %len) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_sha256*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %bufsize = alloca i64, align 8
  %chunk_len = alloca i64, align 8
  store %struct.secp256k1_sha256* %hash, %struct.secp256k1_sha256** %hash.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %0, i32 0, i32 2
  %1 = load i64, i64* %bytes, align 8
  %and = and i64 %1, 63
  store i64 %and, i64* %bufsize, align 8
  %2 = load i64, i64* %len.addr, align 8
  %3 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes1 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %3, i32 0, i32 2
  %4 = load i64, i64* %bytes1, align 8
  %add = add i64 %4, %2
  store i64 %add, i64* %bytes1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes2 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %5, i32 0, i32 2
  %6 = load i64, i64* %bytes2, align 8
  %7 = load i64, i64* %len.addr, align 8
  %cmp = icmp uge i64 %6, %7
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %8 = load i64, i64* %len.addr, align 8
  %9 = load i64, i64* %bufsize, align 8
  %sub = sub i64 64, %9
  %cmp3 = icmp uge i64 %8, %sub
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i64, i64* %bufsize, align 8
  %sub5 = sub i64 64, %10
  store i64 %sub5, i64* %chunk_len, align 8
  %11 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %buf = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %11, i32 0, i32 1
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0
  %12 = load i64, i64* %bufsize, align 8
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %12
  %13 = load i8*, i8** %data.addr, align 8
  %14 = load i64, i64* %chunk_len, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %13, i64 %14, i1 false)
  %15 = load i64, i64* %chunk_len, align 8
  %16 = load i8*, i8** %data.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %16, i64 %15
  store i8* %add.ptr6, i8** %data.addr, align 8
  %17 = load i64, i64* %chunk_len, align 8
  %18 = load i64, i64* %len.addr, align 8
  %sub7 = sub i64 %18, %17
  store i64 %sub7, i64* %len.addr, align 8
  %19 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %19, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [8 x i32], [8 x i32]* %s, i64 0, i64 0
  %20 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %buf9 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %20, i32 0, i32 1
  %arraydecay10 = getelementptr inbounds [64 x i8], [64 x i8]* %buf9, i64 0, i64 0
  call void @secp256k1_sha256_transform(i32* noundef %arraydecay8, i8* noundef %arraydecay10)
  store i64 0, i64* %bufsize, align 8
  br label %while.cond, !llvm.loop !12

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %len.addr, align 8
  %tobool = icmp ne i64 %21, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %22 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %buf11 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %22, i32 0, i32 1
  %arraydecay12 = getelementptr inbounds [64 x i8], [64 x i8]* %buf11, i64 0, i64 0
  %23 = load i64, i64* %bufsize, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %arraydecay12, i64 %23
  %24 = load i8*, i8** %data.addr, align 8
  %25 = load i64, i64* %len.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr13, i8* align 1 %24, i64 %25, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %hash, i8* noundef %out32) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_sha256*, align 8
  %out32.addr = alloca i8*, align 8
  %sizedesc = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  store %struct.secp256k1_sha256* %hash, %struct.secp256k1_sha256** %hash.addr, align 8
  store i8* %out32, i8** %out32.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %0, i32 0, i32 2
  %1 = load i64, i64* %bytes, align 8
  %cmp = icmp ult i64 %1, 2305843009213693952
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %sizedesc, i64 0, i64 0
  %2 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes1 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %2, i32 0, i32 2
  %3 = load i64, i64* %bytes1, align 8
  %shr = lshr i64 %3, 29
  %conv2 = trunc i64 %shr to i32
  call void @secp256k1_write_be32(i8* noundef %arrayidx, i32 noundef %conv2)
  %arrayidx3 = getelementptr inbounds [8 x i8], [8 x i8]* %sizedesc, i64 0, i64 4
  %4 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes4 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %4, i32 0, i32 2
  %5 = load i64, i64* %bytes4, align 8
  %shl = shl i64 %5, 3
  %conv5 = trunc i64 %shl to i32
  call void @secp256k1_write_be32(i8* noundef %arrayidx3, i32 noundef %conv5)
  %6 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %7 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes6 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %7, i32 0, i32 2
  %8 = load i64, i64* %bytes6, align 8
  %rem = urem i64 %8, 64
  %sub = sub i64 119, %rem
  %rem7 = urem i64 %sub, 64
  %add = add i64 1, %rem7
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %6, i8* noundef getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @secp256k1_sha256_finalize.pad to [64 x i8]*), i64 0, i64 0), i64 noundef %add)
  %9 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %sizedesc, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %9, i8* noundef %arraydecay, i64 noundef 8)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %10 = load i32, i32* %i, align 4
  %cmp8 = icmp slt i32 %10, 8
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %out32.addr, align 8
  %12 = load i32, i32* %i, align 4
  %mul = mul nsw i32 4, %12
  %idxprom = sext i32 %mul to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 %idxprom
  %13 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %13, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %14 to i64
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* %s, i64 0, i64 %idxprom11
  %15 = load i32, i32* %arrayidx12, align 4
  call void @secp256k1_write_be32(i8* noundef %arrayidx10, i32 noundef %15)
  %16 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s13 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %16, i32 0, i32 0
  %17 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* %s13, i64 0, i64 %idxprom14
  store i32 0, i32* %arrayidx15, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !13

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_selftest_sha256() #0 {
entry:
  %out = alloca [32 x i8], align 16
  %hasher = alloca %struct.secp256k1_sha256, align 8
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %hasher)
  %0 = load i8*, i8** @secp256k1_selftest_sha256.input63, align 8
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %hasher, i8* noundef %0, i64 noundef 63)
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %out, i64 0, i64 0
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %hasher, i8* noundef %arraydecay)
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %out, i64 0, i64 0
  %call = call i32 @secp256k1_memcmp_var(i8* noundef %arraydecay1, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @secp256k1_selftest_sha256.output32, i64 0, i64 0), i64 noundef 32)
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %hash) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_sha256*, align 8
  store %struct.secp256k1_sha256* %hash, %struct.secp256k1_sha256** %hash.addr, align 8
  %0 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %s, i64 0, i64 0
  store i32 1779033703, i32* %arrayidx, align 8
  %1 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s1 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [8 x i32], [8 x i32]* %s1, i64 0, i64 1
  store i32 -1150833019, i32* %arrayidx2, align 4
  %2 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s3 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [8 x i32], [8 x i32]* %s3, i64 0, i64 2
  store i32 1013904242, i32* %arrayidx4, align 8
  %3 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s5 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* %s5, i64 0, i64 3
  store i32 -1521486534, i32* %arrayidx6, align 4
  %4 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s7 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %4, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [8 x i32], [8 x i32]* %s7, i64 0, i64 4
  store i32 1359893119, i32* %arrayidx8, align 8
  %5 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s9 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %5, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [8 x i32], [8 x i32]* %s9, i64 0, i64 5
  store i32 -1694144372, i32* %arrayidx10, align 4
  %6 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s11 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %6, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* %s11, i64 0, i64 6
  store i32 528734635, i32* %arrayidx12, align 8
  %7 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %s13 = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %7, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [8 x i32], [8 x i32]* %s13, i64 0, i64 7
  store i32 1541459225, i32* %arrayidx14, align 4
  %8 = load %struct.secp256k1_sha256*, %struct.secp256k1_sha256** %hash.addr, align 8
  %bytes = getelementptr inbounds %struct.secp256k1_sha256, %struct.secp256k1_sha256* %8, i32 0, i32 2
  store i64 0, i64* %bytes, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_clear(%struct.secp256k1_gej* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  store i32 0, i32* %infinity, align 8
  %1 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %1, i32 0, i32 0
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %x)
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 1
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %y)
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 2
  call void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %z)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_clear(%struct.secp256k1_fe* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %i = alloca i32, align 4
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 %idxprom
  store i64 0, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !14

for.end:                                          ; preds = %for.cond
  ret void
}

declare dso_local i32 @fprintf(%struct._IO_FILE* noundef, i8* noundef, ...) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_set_b32(%struct.secp256k1_fe* noundef %r, i8* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store i8* %a, i8** %a.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 31
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %2 = load i8*, i8** %a.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 30
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i64
  %shl = shl i64 %conv2, 8
  %or = or i64 %conv, %shl
  %4 = load i8*, i8** %a.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 29
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %5 to i64
  %shl5 = shl i64 %conv4, 16
  %or6 = or i64 %or, %shl5
  %6 = load i8*, i8** %a.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %6, i64 28
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %7 to i64
  %shl9 = shl i64 %conv8, 24
  %or10 = or i64 %or6, %shl9
  %8 = load i8*, i8** %a.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %8, i64 27
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %9 to i64
  %shl13 = shl i64 %conv12, 32
  %or14 = or i64 %or10, %shl13
  %10 = load i8*, i8** %a.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %10, i64 26
  %11 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %11 to i64
  %shl17 = shl i64 %conv16, 40
  %or18 = or i64 %or14, %shl17
  %12 = load i8*, i8** %a.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %12, i64 25
  %13 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %13 to i32
  %and = and i32 %conv20, 15
  %conv21 = sext i32 %and to i64
  %shl22 = shl i64 %conv21, 48
  %or23 = or i64 %or18, %shl22
  %14 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %14, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  store i64 %or23, i64* %arrayidx24, align 8
  %15 = load i8*, i8** %a.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %15, i64 25
  %16 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %16 to i32
  %shr = ashr i32 %conv26, 4
  %and27 = and i32 %shr, 15
  %conv28 = sext i32 %and27 to i64
  %17 = load i8*, i8** %a.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %17, i64 24
  %18 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %18 to i64
  %shl31 = shl i64 %conv30, 4
  %or32 = or i64 %conv28, %shl31
  %19 = load i8*, i8** %a.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %19, i64 23
  %20 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %20 to i64
  %shl35 = shl i64 %conv34, 12
  %or36 = or i64 %or32, %shl35
  %21 = load i8*, i8** %a.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %21, i64 22
  %22 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %22 to i64
  %shl39 = shl i64 %conv38, 20
  %or40 = or i64 %or36, %shl39
  %23 = load i8*, i8** %a.addr, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %23, i64 21
  %24 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %24 to i64
  %shl43 = shl i64 %conv42, 28
  %or44 = or i64 %or40, %shl43
  %25 = load i8*, i8** %a.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %25, i64 20
  %26 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %26 to i64
  %shl47 = shl i64 %conv46, 36
  %or48 = or i64 %or44, %shl47
  %27 = load i8*, i8** %a.addr, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %27, i64 19
  %28 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %28 to i64
  %shl51 = shl i64 %conv50, 44
  %or52 = or i64 %or48, %shl51
  %29 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n53 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %29, i32 0, i32 0
  %arrayidx54 = getelementptr inbounds [5 x i64], [5 x i64]* %n53, i64 0, i64 1
  store i64 %or52, i64* %arrayidx54, align 8
  %30 = load i8*, i8** %a.addr, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %30, i64 18
  %31 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %31 to i64
  %32 = load i8*, i8** %a.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %32, i64 17
  %33 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %33 to i64
  %shl59 = shl i64 %conv58, 8
  %or60 = or i64 %conv56, %shl59
  %34 = load i8*, i8** %a.addr, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %34, i64 16
  %35 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %35 to i64
  %shl63 = shl i64 %conv62, 16
  %or64 = or i64 %or60, %shl63
  %36 = load i8*, i8** %a.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %36, i64 15
  %37 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %37 to i64
  %shl67 = shl i64 %conv66, 24
  %or68 = or i64 %or64, %shl67
  %38 = load i8*, i8** %a.addr, align 8
  %arrayidx69 = getelementptr inbounds i8, i8* %38, i64 14
  %39 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %39 to i64
  %shl71 = shl i64 %conv70, 32
  %or72 = or i64 %or68, %shl71
  %40 = load i8*, i8** %a.addr, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %40, i64 13
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i64
  %shl75 = shl i64 %conv74, 40
  %or76 = or i64 %or72, %shl75
  %42 = load i8*, i8** %a.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %42, i64 12
  %43 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %43 to i32
  %and79 = and i32 %conv78, 15
  %conv80 = sext i32 %and79 to i64
  %shl81 = shl i64 %conv80, 48
  %or82 = or i64 %or76, %shl81
  %44 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n83 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %44, i32 0, i32 0
  %arrayidx84 = getelementptr inbounds [5 x i64], [5 x i64]* %n83, i64 0, i64 2
  store i64 %or82, i64* %arrayidx84, align 8
  %45 = load i8*, i8** %a.addr, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %45, i64 12
  %46 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %46 to i32
  %shr87 = ashr i32 %conv86, 4
  %and88 = and i32 %shr87, 15
  %conv89 = sext i32 %and88 to i64
  %47 = load i8*, i8** %a.addr, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %47, i64 11
  %48 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %48 to i64
  %shl92 = shl i64 %conv91, 4
  %or93 = or i64 %conv89, %shl92
  %49 = load i8*, i8** %a.addr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %49, i64 10
  %50 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %50 to i64
  %shl96 = shl i64 %conv95, 12
  %or97 = or i64 %or93, %shl96
  %51 = load i8*, i8** %a.addr, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %51, i64 9
  %52 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %52 to i64
  %shl100 = shl i64 %conv99, 20
  %or101 = or i64 %or97, %shl100
  %53 = load i8*, i8** %a.addr, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %53, i64 8
  %54 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %54 to i64
  %shl104 = shl i64 %conv103, 28
  %or105 = or i64 %or101, %shl104
  %55 = load i8*, i8** %a.addr, align 8
  %arrayidx106 = getelementptr inbounds i8, i8* %55, i64 7
  %56 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %56 to i64
  %shl108 = shl i64 %conv107, 36
  %or109 = or i64 %or105, %shl108
  %57 = load i8*, i8** %a.addr, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %57, i64 6
  %58 = load i8, i8* %arrayidx110, align 1
  %conv111 = zext i8 %58 to i64
  %shl112 = shl i64 %conv111, 44
  %or113 = or i64 %or109, %shl112
  %59 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n114 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %59, i32 0, i32 0
  %arrayidx115 = getelementptr inbounds [5 x i64], [5 x i64]* %n114, i64 0, i64 3
  store i64 %or113, i64* %arrayidx115, align 8
  %60 = load i8*, i8** %a.addr, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %60, i64 5
  %61 = load i8, i8* %arrayidx116, align 1
  %conv117 = zext i8 %61 to i64
  %62 = load i8*, i8** %a.addr, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %62, i64 4
  %63 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %63 to i64
  %shl120 = shl i64 %conv119, 8
  %or121 = or i64 %conv117, %shl120
  %64 = load i8*, i8** %a.addr, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %64, i64 3
  %65 = load i8, i8* %arrayidx122, align 1
  %conv123 = zext i8 %65 to i64
  %shl124 = shl i64 %conv123, 16
  %or125 = or i64 %or121, %shl124
  %66 = load i8*, i8** %a.addr, align 8
  %arrayidx126 = getelementptr inbounds i8, i8* %66, i64 2
  %67 = load i8, i8* %arrayidx126, align 1
  %conv127 = zext i8 %67 to i64
  %shl128 = shl i64 %conv127, 24
  %or129 = or i64 %or125, %shl128
  %68 = load i8*, i8** %a.addr, align 8
  %arrayidx130 = getelementptr inbounds i8, i8* %68, i64 1
  %69 = load i8, i8* %arrayidx130, align 1
  %conv131 = zext i8 %69 to i64
  %shl132 = shl i64 %conv131, 32
  %or133 = or i64 %or129, %shl132
  %70 = load i8*, i8** %a.addr, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %70, i64 0
  %71 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %71 to i64
  %shl136 = shl i64 %conv135, 40
  %or137 = or i64 %or133, %shl136
  %72 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n138 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %72, i32 0, i32 0
  %arrayidx139 = getelementptr inbounds [5 x i64], [5 x i64]* %n138, i64 0, i64 4
  store i64 %or137, i64* %arrayidx139, align 8
  %73 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n140 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %73, i32 0, i32 0
  %arrayidx141 = getelementptr inbounds [5 x i64], [5 x i64]* %n140, i64 0, i64 4
  %74 = load i64, i64* %arrayidx141, align 8
  %cmp = icmp eq i64 %74, 281474976710655
  %conv142 = zext i1 %cmp to i32
  %75 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n143 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %75, i32 0, i32 0
  %arrayidx144 = getelementptr inbounds [5 x i64], [5 x i64]* %n143, i64 0, i64 3
  %76 = load i64, i64* %arrayidx144, align 8
  %77 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n145 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %77, i32 0, i32 0
  %arrayidx146 = getelementptr inbounds [5 x i64], [5 x i64]* %n145, i64 0, i64 2
  %78 = load i64, i64* %arrayidx146, align 8
  %and147 = and i64 %76, %78
  %79 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n148 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %79, i32 0, i32 0
  %arrayidx149 = getelementptr inbounds [5 x i64], [5 x i64]* %n148, i64 0, i64 1
  %80 = load i64, i64* %arrayidx149, align 8
  %and150 = and i64 %and147, %80
  %cmp151 = icmp eq i64 %and150, 4503599627370495
  %conv152 = zext i1 %cmp151 to i32
  %and153 = and i32 %conv142, %conv152
  %81 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n154 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %81, i32 0, i32 0
  %arrayidx155 = getelementptr inbounds [5 x i64], [5 x i64]* %n154, i64 0, i64 0
  %82 = load i64, i64* %arrayidx155, align 8
  %cmp156 = icmp uge i64 %82, 4503595332402223
  %conv157 = zext i1 %cmp156 to i32
  %and158 = and i32 %and153, %conv157
  %tobool = icmp ne i32 %and158, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %ret, align 4
  %83 = load i32, i32* %ret, align 4
  ret i32 %83
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ge_set_xo_var(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_fe* noundef %x, i32 noundef %odd) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %x.addr = alloca %struct.secp256k1_fe*, align 8
  %odd.addr = alloca i32, align 4
  %x2 = alloca %struct.secp256k1_fe, align 8
  %x3 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_fe* %x, %struct.secp256k1_fe** %x.addr, align 8
  store i32 %odd, i32* %odd.addr, align 4
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 0
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  %2 = bitcast %struct.secp256k1_fe* %x1 to i8*
  %3 = bitcast %struct.secp256k1_fe* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 40, i1 false)
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x2, %struct.secp256k1_fe* noundef %4)
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %5, %struct.secp256k1_fe* noundef %x2)
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %6, i32 0, i32 2
  store i32 0, i32* %infinity, align 8
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef @secp256k1_fe_const_b)
  %7 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %7, i32 0, i32 1
  %call = call i32 @secp256k1_fe_sqrt(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %x3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %8, i32 0, i32 1
  call void @secp256k1_fe_normalize_var(%struct.secp256k1_fe* noundef %y2)
  %9 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y3 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %9, i32 0, i32 1
  %call4 = call i32 @secp256k1_fe_is_odd(%struct.secp256k1_fe* noundef %y3)
  %10 = load i32, i32* %odd.addr, align 4
  %cmp = icmp ne i32 %call4, %10
  br i1 %cmp, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %11 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y6 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %11, i32 0, i32 1
  %12 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y7 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %12, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y6, %struct.secp256k1_fe* noundef %y7, i32 noundef 1)
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end8, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %y) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %x.addr = alloca %struct.secp256k1_fe*, align 8
  %y.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_fe* %x, %struct.secp256k1_fe** %x.addr, align 8
  store %struct.secp256k1_fe* %y, %struct.secp256k1_fe** %y.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  store i32 0, i32* %infinity, align 8
  %1 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %1, i32 0, i32 0
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  %3 = bitcast %struct.secp256k1_fe* %x1 to i8*
  %4 = bitcast %struct.secp256k1_fe* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %5, i32 0, i32 1
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %y.addr, align 8
  %7 = bitcast %struct.secp256k1_fe* %y2 to i8*
  %8 = bitcast %struct.secp256k1_fe* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 40, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_is_odd(%struct.secp256k1_fe* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %and = and i64 %1, 1
  %conv = trunc i64 %and to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ge_is_valid_var(%struct.secp256k1_ge* noundef %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  %y2 = alloca %struct.secp256k1_fe, align 8
  %x3 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 1
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %y2, %struct.secp256k1_fe* noundef %y)
  %3 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %3, i32 0, i32 0
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %x)
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %x1)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef @secp256k1_fe_const_b)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %x3)
  %call = call i32 @secp256k1_fe_equal_var(%struct.secp256k1_fe* noundef %y2, %struct.secp256k1_fe* noundef %x3)
  store i32 %call, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  call void @secp256k1_fe_sqr_inner(i64* noundef %arraydecay, i64* noundef %arraydecay2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a, %struct.secp256k1_fe* noalias noundef %b) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %b.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store %struct.secp256k1_fe* %b, %struct.secp256k1_fe** %b.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %b.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 0
  call void @secp256k1_fe_mul_inner(i64* noundef %arraydecay, i64* noundef %arraydecay2, i64* noundef %arraydecay4)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  %3 = load i64, i64* %arrayidx2, align 8
  %add = add i64 %3, %1
  store i64 %add, i64* %arrayidx2, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 1
  %5 = load i64, i64* %arrayidx4, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 1
  %7 = load i64, i64* %arrayidx6, align 8
  %add7 = add i64 %7, %5
  store i64 %add7, i64* %arrayidx6, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 2
  %9 = load i64, i64* %arrayidx9, align 8
  %10 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n10 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %10, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [5 x i64], [5 x i64]* %n10, i64 0, i64 2
  %11 = load i64, i64* %arrayidx11, align 8
  %add12 = add i64 %11, %9
  store i64 %add12, i64* %arrayidx11, align 8
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n13 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %n13, i64 0, i64 3
  %13 = load i64, i64* %arrayidx14, align 8
  %14 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n15 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %14, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [5 x i64], [5 x i64]* %n15, i64 0, i64 3
  %15 = load i64, i64* %arrayidx16, align 8
  %add17 = add i64 %15, %13
  store i64 %add17, i64* %arrayidx16, align 8
  %16 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n18 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %16, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [5 x i64], [5 x i64]* %n18, i64 0, i64 4
  %17 = load i64, i64* %arrayidx19, align 8
  %18 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n20 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %18, i32 0, i32 0
  %arrayidx21 = getelementptr inbounds [5 x i64], [5 x i64]* %n20, i64 0, i64 4
  %19 = load i64, i64* %arrayidx21, align 8
  %add22 = add i64 %19, %17
  store i64 %add22, i64* %arrayidx21, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_sqrt(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %x2 = alloca %struct.secp256k1_fe, align 8
  %x3 = alloca %struct.secp256k1_fe, align 8
  %x6 = alloca %struct.secp256k1_fe, align 8
  %x9 = alloca %struct.secp256k1_fe, align 8
  %x11 = alloca %struct.secp256k1_fe, align 8
  %x22 = alloca %struct.secp256k1_fe, align 8
  %x44 = alloca %struct.secp256k1_fe, align 8
  %x88 = alloca %struct.secp256k1_fe, align 8
  %x176 = alloca %struct.secp256k1_fe, align 8
  %x220 = alloca %struct.secp256k1_fe, align 8
  %x223 = alloca %struct.secp256k1_fe, align 8
  %t1 = alloca %struct.secp256k1_fe, align 8
  %j = alloca i32, align 4
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %cmp = icmp ne %struct.secp256k1_fe* %0, %1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x2, %struct.secp256k1_fe* noundef %2)
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x2, %struct.secp256k1_fe* noundef %x2, %struct.secp256k1_fe* noundef %3)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %x2)
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %4)
  %5 = bitcast %struct.secp256k1_fe* %x6 to i8*
  %6 = bitcast %struct.secp256k1_fe* %x3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %7 = load i32, i32* %j, align 4
  %cmp1 = icmp slt i32 %7, 3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x6, %struct.secp256k1_fe* noundef %x6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond, !llvm.loop !15

for.end:                                          ; preds = %for.cond
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x6, %struct.secp256k1_fe* noundef %x6, %struct.secp256k1_fe* noundef %x3)
  %9 = bitcast %struct.secp256k1_fe* %x9 to i8*
  %10 = bitcast %struct.secp256k1_fe* %x6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %11 = load i32, i32* %j, align 4
  %cmp4 = icmp slt i32 %11, 3
  br i1 %cmp4, label %for.body6, label %for.end9

for.body6:                                        ; preds = %for.cond3
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x9, %struct.secp256k1_fe* noundef %x9)
  br label %for.inc7

for.inc7:                                         ; preds = %for.body6
  %12 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond3, !llvm.loop !16

for.end9:                                         ; preds = %for.cond3
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x9, %struct.secp256k1_fe* noundef %x9, %struct.secp256k1_fe* noundef %x3)
  %13 = bitcast %struct.secp256k1_fe* %x11 to i8*
  %14 = bitcast %struct.secp256k1_fe* %x9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end9
  %15 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %15, 2
  br i1 %cmp11, label %for.body13, label %for.end16

for.body13:                                       ; preds = %for.cond10
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x11, %struct.secp256k1_fe* noundef %x11)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body13
  %16 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %16, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10, !llvm.loop !17

for.end16:                                        ; preds = %for.cond10
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x11, %struct.secp256k1_fe* noundef %x11, %struct.secp256k1_fe* noundef %x2)
  %17 = bitcast %struct.secp256k1_fe* %x22 to i8*
  %18 = bitcast %struct.secp256k1_fe* %x11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %for.end16
  %19 = load i32, i32* %j, align 4
  %cmp18 = icmp slt i32 %19, 11
  br i1 %cmp18, label %for.body20, label %for.end23

for.body20:                                       ; preds = %for.cond17
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x22, %struct.secp256k1_fe* noundef %x22)
  br label %for.inc21

for.inc21:                                        ; preds = %for.body20
  %20 = load i32, i32* %j, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %j, align 4
  br label %for.cond17, !llvm.loop !18

for.end23:                                        ; preds = %for.cond17
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x22, %struct.secp256k1_fe* noundef %x22, %struct.secp256k1_fe* noundef %x11)
  %21 = bitcast %struct.secp256k1_fe* %x44 to i8*
  %22 = bitcast %struct.secp256k1_fe* %x22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc28, %for.end23
  %23 = load i32, i32* %j, align 4
  %cmp25 = icmp slt i32 %23, 22
  br i1 %cmp25, label %for.body27, label %for.end30

for.body27:                                       ; preds = %for.cond24
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x44, %struct.secp256k1_fe* noundef %x44)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %24 = load i32, i32* %j, align 4
  %inc29 = add nsw i32 %24, 1
  store i32 %inc29, i32* %j, align 4
  br label %for.cond24, !llvm.loop !19

for.end30:                                        ; preds = %for.cond24
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x44, %struct.secp256k1_fe* noundef %x44, %struct.secp256k1_fe* noundef %x22)
  %25 = bitcast %struct.secp256k1_fe* %x88 to i8*
  %26 = bitcast %struct.secp256k1_fe* %x44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc35, %for.end30
  %27 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %27, 44
  br i1 %cmp32, label %for.body34, label %for.end37

for.body34:                                       ; preds = %for.cond31
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x88, %struct.secp256k1_fe* noundef %x88)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body34
  %28 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %28, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond31, !llvm.loop !20

for.end37:                                        ; preds = %for.cond31
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x88, %struct.secp256k1_fe* noundef %x88, %struct.secp256k1_fe* noundef %x44)
  %29 = bitcast %struct.secp256k1_fe* %x176 to i8*
  %30 = bitcast %struct.secp256k1_fe* %x88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc42, %for.end37
  %31 = load i32, i32* %j, align 4
  %cmp39 = icmp slt i32 %31, 88
  br i1 %cmp39, label %for.body41, label %for.end44

for.body41:                                       ; preds = %for.cond38
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x176, %struct.secp256k1_fe* noundef %x176)
  br label %for.inc42

for.inc42:                                        ; preds = %for.body41
  %32 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %32, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond38, !llvm.loop !21

for.end44:                                        ; preds = %for.cond38
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x176, %struct.secp256k1_fe* noundef %x176, %struct.secp256k1_fe* noundef %x88)
  %33 = bitcast %struct.secp256k1_fe* %x220 to i8*
  %34 = bitcast %struct.secp256k1_fe* %x176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc49, %for.end44
  %35 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %35, 44
  br i1 %cmp46, label %for.body48, label %for.end51

for.body48:                                       ; preds = %for.cond45
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x220, %struct.secp256k1_fe* noundef %x220)
  br label %for.inc49

for.inc49:                                        ; preds = %for.body48
  %36 = load i32, i32* %j, align 4
  %inc50 = add nsw i32 %36, 1
  store i32 %inc50, i32* %j, align 4
  br label %for.cond45, !llvm.loop !22

for.end51:                                        ; preds = %for.cond45
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x220, %struct.secp256k1_fe* noundef %x220, %struct.secp256k1_fe* noundef %x44)
  %37 = bitcast %struct.secp256k1_fe* %x223 to i8*
  %38 = bitcast %struct.secp256k1_fe* %x220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc56, %for.end51
  %39 = load i32, i32* %j, align 4
  %cmp53 = icmp slt i32 %39, 3
  br i1 %cmp53, label %for.body55, label %for.end58

for.body55:                                       ; preds = %for.cond52
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x223, %struct.secp256k1_fe* noundef %x223)
  br label %for.inc56

for.inc56:                                        ; preds = %for.body55
  %40 = load i32, i32* %j, align 4
  %inc57 = add nsw i32 %40, 1
  store i32 %inc57, i32* %j, align 4
  br label %for.cond52, !llvm.loop !23

for.end58:                                        ; preds = %for.cond52
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x223, %struct.secp256k1_fe* noundef %x223, %struct.secp256k1_fe* noundef %x3)
  %41 = bitcast %struct.secp256k1_fe* %t1 to i8*
  %42 = bitcast %struct.secp256k1_fe* %x223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 40, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc63, %for.end58
  %43 = load i32, i32* %j, align 4
  %cmp60 = icmp slt i32 %43, 23
  br i1 %cmp60, label %for.body62, label %for.end65

for.body62:                                       ; preds = %for.cond59
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %t1)
  br label %for.inc63

for.inc63:                                        ; preds = %for.body62
  %44 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %44, 1
  store i32 %inc64, i32* %j, align 4
  br label %for.cond59, !llvm.loop !24

for.end65:                                        ; preds = %for.cond59
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %x22)
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc70, %for.end65
  %45 = load i32, i32* %j, align 4
  %cmp67 = icmp slt i32 %45, 6
  br i1 %cmp67, label %for.body69, label %for.end72

for.body69:                                       ; preds = %for.cond66
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %t1)
  br label %for.inc70

for.inc70:                                        ; preds = %for.body69
  %46 = load i32, i32* %j, align 4
  %inc71 = add nsw i32 %46, 1
  store i32 %inc71, i32* %j, align 4
  br label %for.cond66, !llvm.loop !25

for.end72:                                        ; preds = %for.cond66
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %x2)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %t1)
  %47 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %47, %struct.secp256k1_fe* noundef %t1)
  %48 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %48)
  %49 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %call = call i32 @secp256k1_fe_equal(%struct.secp256k1_fe* noundef %t1, %struct.secp256k1_fe* noundef %49)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_normalize_var(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %t2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %t3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %t4, align 8
  %10 = load i64, i64* %t4, align 8
  %shr = lshr i64 %10, 48
  store i64 %shr, i64* %x, align 8
  %11 = load i64, i64* %t4, align 8
  %and = and i64 %11, 281474976710655
  store i64 %and, i64* %t4, align 8
  %12 = load i64, i64* %x, align 8
  %mul = mul i64 %12, 4294968273
  %13 = load i64, i64* %t0, align 8
  %add = add i64 %13, %mul
  store i64 %add, i64* %t0, align 8
  %14 = load i64, i64* %t0, align 8
  %shr9 = lshr i64 %14, 52
  %15 = load i64, i64* %t1, align 8
  %add10 = add i64 %15, %shr9
  store i64 %add10, i64* %t1, align 8
  %16 = load i64, i64* %t0, align 8
  %and11 = and i64 %16, 4503599627370495
  store i64 %and11, i64* %t0, align 8
  %17 = load i64, i64* %t1, align 8
  %shr12 = lshr i64 %17, 52
  %18 = load i64, i64* %t2, align 8
  %add13 = add i64 %18, %shr12
  store i64 %add13, i64* %t2, align 8
  %19 = load i64, i64* %t1, align 8
  %and14 = and i64 %19, 4503599627370495
  store i64 %and14, i64* %t1, align 8
  %20 = load i64, i64* %t1, align 8
  store i64 %20, i64* %m, align 8
  %21 = load i64, i64* %t2, align 8
  %shr15 = lshr i64 %21, 52
  %22 = load i64, i64* %t3, align 8
  %add16 = add i64 %22, %shr15
  store i64 %add16, i64* %t3, align 8
  %23 = load i64, i64* %t2, align 8
  %and17 = and i64 %23, 4503599627370495
  store i64 %and17, i64* %t2, align 8
  %24 = load i64, i64* %t2, align 8
  %25 = load i64, i64* %m, align 8
  %and18 = and i64 %25, %24
  store i64 %and18, i64* %m, align 8
  %26 = load i64, i64* %t3, align 8
  %shr19 = lshr i64 %26, 52
  %27 = load i64, i64* %t4, align 8
  %add20 = add i64 %27, %shr19
  store i64 %add20, i64* %t4, align 8
  %28 = load i64, i64* %t3, align 8
  %and21 = and i64 %28, 4503599627370495
  store i64 %and21, i64* %t3, align 8
  %29 = load i64, i64* %t3, align 8
  %30 = load i64, i64* %m, align 8
  %and22 = and i64 %30, %29
  store i64 %and22, i64* %m, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %31 = load i64, i64* %t4, align 8
  %shr23 = lshr i64 %31, 49
  %cmp = icmp eq i64 %shr23, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %32 = load i64, i64* %t4, align 8
  %shr24 = lshr i64 %32, 48
  %33 = load i64, i64* %t4, align 8
  %cmp25 = icmp eq i64 %33, 281474976710655
  %conv26 = zext i1 %cmp25 to i32
  %34 = load i64, i64* %m, align 8
  %cmp27 = icmp eq i64 %34, 4503599627370495
  %conv28 = zext i1 %cmp27 to i32
  %and29 = and i32 %conv26, %conv28
  %35 = load i64, i64* %t0, align 8
  %cmp30 = icmp uge i64 %35, 4503595332402223
  %conv31 = zext i1 %cmp30 to i32
  %and32 = and i32 %and29, %conv31
  %conv33 = sext i32 %and32 to i64
  %or = or i64 %shr24, %conv33
  store i64 %or, i64* %x, align 8
  %36 = load i64, i64* %x, align 8
  %tobool = icmp ne i64 %36, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %37 = load i64, i64* %t0, align 8
  %add34 = add i64 %37, 4294968273
  store i64 %add34, i64* %t0, align 8
  %38 = load i64, i64* %t0, align 8
  %shr35 = lshr i64 %38, 52
  %39 = load i64, i64* %t1, align 8
  %add36 = add i64 %39, %shr35
  store i64 %add36, i64* %t1, align 8
  %40 = load i64, i64* %t0, align 8
  %and37 = and i64 %40, 4503599627370495
  store i64 %and37, i64* %t0, align 8
  %41 = load i64, i64* %t1, align 8
  %shr38 = lshr i64 %41, 52
  %42 = load i64, i64* %t2, align 8
  %add39 = add i64 %42, %shr38
  store i64 %add39, i64* %t2, align 8
  %43 = load i64, i64* %t1, align 8
  %and40 = and i64 %43, 4503599627370495
  store i64 %and40, i64* %t1, align 8
  %44 = load i64, i64* %t2, align 8
  %shr41 = lshr i64 %44, 52
  %45 = load i64, i64* %t3, align 8
  %add42 = add i64 %45, %shr41
  store i64 %add42, i64* %t3, align 8
  %46 = load i64, i64* %t2, align 8
  %and43 = and i64 %46, 4503599627370495
  store i64 %and43, i64* %t2, align 8
  %47 = load i64, i64* %t3, align 8
  %shr44 = lshr i64 %47, 52
  %48 = load i64, i64* %t4, align 8
  %add45 = add i64 %48, %shr44
  store i64 %add45, i64* %t4, align 8
  %49 = load i64, i64* %t3, align 8
  %and46 = and i64 %49, 4503599627370495
  store i64 %and46, i64* %t3, align 8
  br label %do.body47

do.body47:                                        ; preds = %if.then
  %50 = load i64, i64* %t4, align 8
  %shr48 = lshr i64 %50, 48
  %51 = load i64, i64* %x, align 8
  %cmp49 = icmp eq i64 %shr48, %51
  %conv50 = zext i1 %cmp49 to i32
  br label %do.end51

do.end51:                                         ; preds = %do.body47
  %52 = load i64, i64* %t4, align 8
  %and52 = and i64 %52, 281474976710655
  store i64 %and52, i64* %t4, align 8
  br label %if.end

if.end:                                           ; preds = %do.end51, %do.end
  %53 = load i64, i64* %t0, align 8
  %54 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n53 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %54, i32 0, i32 0
  %arrayidx54 = getelementptr inbounds [5 x i64], [5 x i64]* %n53, i64 0, i64 0
  store i64 %53, i64* %arrayidx54, align 8
  %55 = load i64, i64* %t1, align 8
  %56 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n55 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %56, i32 0, i32 0
  %arrayidx56 = getelementptr inbounds [5 x i64], [5 x i64]* %n55, i64 0, i64 1
  store i64 %55, i64* %arrayidx56, align 8
  %57 = load i64, i64* %t2, align 8
  %58 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n57 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %58, i32 0, i32 0
  %arrayidx58 = getelementptr inbounds [5 x i64], [5 x i64]* %n57, i64 0, i64 2
  store i64 %57, i64* %arrayidx58, align 8
  %59 = load i64, i64* %t3, align 8
  %60 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n59 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %60, i32 0, i32 0
  %arrayidx60 = getelementptr inbounds [5 x i64], [5 x i64]* %n59, i64 0, i64 3
  store i64 %59, i64* %arrayidx60, align 8
  %61 = load i64, i64* %t4, align 8
  %62 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n61 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %62, i32 0, i32 0
  %arrayidx62 = getelementptr inbounds [5 x i64], [5 x i64]* %n61, i64 0, i64 4
  store i64 %61, i64* %arrayidx62, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a, i32 noundef %m) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %m.addr = alloca i32, align 4
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %m.addr, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 9007190664804446, %conv
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %sub = sub i64 %mul, %2
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %3, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  store i64 %sub, i64* %arrayidx2, align 8
  %4 = load i32, i32* %m.addr, align 4
  %add3 = add nsw i32 %4, 1
  %conv4 = sext i32 %add3 to i64
  %mul5 = mul i64 9007199254740990, %conv4
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %5, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n6, i64 0, i64 1
  %6 = load i64, i64* %arrayidx7, align 8
  %sub8 = sub i64 %mul5, %6
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n9 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %n9, i64 0, i64 1
  store i64 %sub8, i64* %arrayidx10, align 8
  %8 = load i32, i32* %m.addr, align 4
  %add11 = add nsw i32 %8, 1
  %conv12 = sext i32 %add11 to i64
  %mul13 = mul i64 9007199254740990, %conv12
  %9 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n14 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %9, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [5 x i64], [5 x i64]* %n14, i64 0, i64 2
  %10 = load i64, i64* %arrayidx15, align 8
  %sub16 = sub i64 %mul13, %10
  %11 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n17 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %11, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [5 x i64], [5 x i64]* %n17, i64 0, i64 2
  store i64 %sub16, i64* %arrayidx18, align 8
  %12 = load i32, i32* %m.addr, align 4
  %add19 = add nsw i32 %12, 1
  %conv20 = sext i32 %add19 to i64
  %mul21 = mul i64 9007199254740990, %conv20
  %13 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n22 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %13, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %n22, i64 0, i64 3
  %14 = load i64, i64* %arrayidx23, align 8
  %sub24 = sub i64 %mul21, %14
  %15 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n25 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %15, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [5 x i64], [5 x i64]* %n25, i64 0, i64 3
  store i64 %sub24, i64* %arrayidx26, align 8
  %16 = load i32, i32* %m.addr, align 4
  %add27 = add nsw i32 %16, 1
  %conv28 = sext i32 %add27 to i64
  %mul29 = mul i64 562949953421310, %conv28
  %17 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n30 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %17, i32 0, i32 0
  %arrayidx31 = getelementptr inbounds [5 x i64], [5 x i64]* %n30, i64 0, i64 4
  %18 = load i64, i64* %arrayidx31, align 8
  %sub32 = sub i64 %mul29, %18
  %19 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n33 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %19, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [5 x i64], [5 x i64]* %n33, i64 0, i64 4
  store i64 %sub32, i64* %arrayidx34, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_sqr_inner(i64* noundef %r, i64* noundef %a) #0 {
entry:
  %r.addr = alloca i64*, align 8
  %a.addr = alloca i64*, align 8
  %c = alloca i128, align 16
  %d = alloca i128, align 16
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  %a4 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %tx = alloca i64, align 8
  %u0 = alloca i64, align 8
  %M = alloca i64, align 8
  %R = alloca i64, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64* %a, i64** %a.addr, align 8
  %0 = load i64*, i64** %a.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load i64*, i64** %a.addr, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1
  %3 = load i64, i64* %arrayidx1, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load i64*, i64** %a.addr, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 2
  %5 = load i64, i64* %arrayidx2, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load i64*, i64** %a.addr, align 8
  %arrayidx3 = getelementptr inbounds i64, i64* %6, i64 3
  %7 = load i64, i64* %arrayidx3, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load i64*, i64** %a.addr, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %8, i64 4
  %9 = load i64, i64* %arrayidx4, align 8
  store i64 %9, i64* %a4, align 8
  store i64 4503599627370495, i64* %M, align 8
  store i64 68719492368, i64* %R, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body5

do.body5:                                         ; preds = %do.end
  br label %do.end6

do.end6:                                          ; preds = %do.body5
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  br label %do.end8

do.end8:                                          ; preds = %do.body7
  br label %do.body9

do.body9:                                         ; preds = %do.end8
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  br label %do.end12

do.end12:                                         ; preds = %do.body11
  %10 = load i64, i64* %a0, align 8
  %mul = mul i64 %10, 2
  %11 = load i64, i64* %a3, align 8
  call void @secp256k1_u128_mul(i128* noundef %d, i64 noundef %mul, i64 noundef %11)
  %12 = load i64, i64* %a1, align 8
  %mul13 = mul i64 %12, 2
  %13 = load i64, i64* %a2, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %mul13, i64 noundef %13)
  br label %do.body14

do.body14:                                        ; preds = %do.end12
  br label %do.end15

do.end15:                                         ; preds = %do.body14
  %14 = load i64, i64* %a4, align 8
  %15 = load i64, i64* %a4, align 8
  call void @secp256k1_u128_mul(i128* noundef %c, i64 noundef %14, i64 noundef %15)
  br label %do.body16

do.body16:                                        ; preds = %do.end15
  br label %do.end17

do.end17:                                         ; preds = %do.body16
  %call = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef 68719492368, i64 noundef %call)
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 64)
  br label %do.body18

do.body18:                                        ; preds = %do.end17
  br label %do.end19

do.end19:                                         ; preds = %do.body18
  br label %do.body20

do.body20:                                        ; preds = %do.end19
  br label %do.end21

do.end21:                                         ; preds = %do.body20
  %call22 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and = and i64 %call22, 4503599627370495
  store i64 %and, i64* %t3, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body23

do.body23:                                        ; preds = %do.end21
  br label %do.end24

do.end24:                                         ; preds = %do.body23
  br label %do.body25

do.body25:                                        ; preds = %do.end24
  br label %do.end26

do.end26:                                         ; preds = %do.body25
  %16 = load i64, i64* %a4, align 8
  %mul27 = mul i64 %16, 2
  store i64 %mul27, i64* %a4, align 8
  %17 = load i64, i64* %a0, align 8
  %18 = load i64, i64* %a4, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %17, i64 noundef %18)
  %19 = load i64, i64* %a1, align 8
  %mul28 = mul i64 %19, 2
  %20 = load i64, i64* %a3, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %mul28, i64 noundef %20)
  %21 = load i64, i64* %a2, align 8
  %22 = load i64, i64* %a2, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %21, i64 noundef %22)
  br label %do.body29

do.body29:                                        ; preds = %do.end26
  br label %do.end30

do.end30:                                         ; preds = %do.body29
  %call31 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef 281475040739328, i64 noundef %call31)
  br label %do.body32

do.body32:                                        ; preds = %do.end30
  br label %do.end33

do.end33:                                         ; preds = %do.body32
  %call34 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and35 = and i64 %call34, 4503599627370495
  store i64 %and35, i64* %t4, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body36

do.body36:                                        ; preds = %do.end33
  br label %do.end37

do.end37:                                         ; preds = %do.body36
  br label %do.body38

do.body38:                                        ; preds = %do.end37
  br label %do.end39

do.end39:                                         ; preds = %do.body38
  %23 = load i64, i64* %t4, align 8
  %shr = ashr i64 %23, 48
  store i64 %shr, i64* %tx, align 8
  %24 = load i64, i64* %t4, align 8
  %and40 = and i64 %24, 281474976710655
  store i64 %and40, i64* %t4, align 8
  br label %do.body41

do.body41:                                        ; preds = %do.end39
  br label %do.end42

do.end42:                                         ; preds = %do.body41
  br label %do.body43

do.body43:                                        ; preds = %do.end42
  br label %do.end44

do.end44:                                         ; preds = %do.body43
  %25 = load i64, i64* %a0, align 8
  %26 = load i64, i64* %a0, align 8
  call void @secp256k1_u128_mul(i128* noundef %c, i64 noundef %25, i64 noundef %26)
  br label %do.body45

do.body45:                                        ; preds = %do.end44
  br label %do.end46

do.end46:                                         ; preds = %do.body45
  %27 = load i64, i64* %a1, align 8
  %28 = load i64, i64* %a4, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %27, i64 noundef %28)
  %29 = load i64, i64* %a2, align 8
  %mul47 = mul i64 %29, 2
  %30 = load i64, i64* %a3, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %mul47, i64 noundef %30)
  br label %do.body48

do.body48:                                        ; preds = %do.end46
  br label %do.end49

do.end49:                                         ; preds = %do.body48
  %call50 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and51 = and i64 %call50, 4503599627370495
  store i64 %and51, i64* %u0, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body52

do.body52:                                        ; preds = %do.end49
  br label %do.end53

do.end53:                                         ; preds = %do.body52
  br label %do.body54

do.body54:                                        ; preds = %do.end53
  br label %do.end55

do.end55:                                         ; preds = %do.body54
  %31 = load i64, i64* %u0, align 8
  %shl = shl i64 %31, 4
  %32 = load i64, i64* %tx, align 8
  %or = or i64 %shl, %32
  store i64 %or, i64* %u0, align 8
  br label %do.body56

do.body56:                                        ; preds = %do.end55
  br label %do.end57

do.end57:                                         ; preds = %do.body56
  %33 = load i64, i64* %u0, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %33, i64 noundef 4294968273)
  br label %do.body58

do.body58:                                        ; preds = %do.end57
  br label %do.end59

do.end59:                                         ; preds = %do.body58
  %call60 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and61 = and i64 %call60, 4503599627370495
  %34 = load i64*, i64** %r.addr, align 8
  %arrayidx62 = getelementptr inbounds i64, i64* %34, i64 0
  store i64 %and61, i64* %arrayidx62, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body63

do.body63:                                        ; preds = %do.end59
  br label %do.end64

do.end64:                                         ; preds = %do.body63
  br label %do.body65

do.body65:                                        ; preds = %do.end64
  br label %do.end66

do.end66:                                         ; preds = %do.body65
  %35 = load i64, i64* %a0, align 8
  %mul67 = mul i64 %35, 2
  store i64 %mul67, i64* %a0, align 8
  %36 = load i64, i64* %a0, align 8
  %37 = load i64, i64* %a1, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %36, i64 noundef %37)
  br label %do.body68

do.body68:                                        ; preds = %do.end66
  br label %do.end69

do.end69:                                         ; preds = %do.body68
  %38 = load i64, i64* %a2, align 8
  %39 = load i64, i64* %a4, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %38, i64 noundef %39)
  %40 = load i64, i64* %a3, align 8
  %41 = load i64, i64* %a3, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %40, i64 noundef %41)
  br label %do.body70

do.body70:                                        ; preds = %do.end69
  br label %do.end71

do.end71:                                         ; preds = %do.body70
  %call72 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and73 = and i64 %call72, 4503599627370495
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %and73, i64 noundef 68719492368)
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body74

do.body74:                                        ; preds = %do.end71
  br label %do.end75

do.end75:                                         ; preds = %do.body74
  br label %do.body76

do.body76:                                        ; preds = %do.end75
  br label %do.end77

do.end77:                                         ; preds = %do.body76
  %call78 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and79 = and i64 %call78, 4503599627370495
  %42 = load i64*, i64** %r.addr, align 8
  %arrayidx80 = getelementptr inbounds i64, i64* %42, i64 1
  store i64 %and79, i64* %arrayidx80, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body81

do.body81:                                        ; preds = %do.end77
  br label %do.end82

do.end82:                                         ; preds = %do.body81
  br label %do.body83

do.body83:                                        ; preds = %do.end82
  br label %do.end84

do.end84:                                         ; preds = %do.body83
  %43 = load i64, i64* %a0, align 8
  %44 = load i64, i64* %a2, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %43, i64 noundef %44)
  %45 = load i64, i64* %a1, align 8
  %46 = load i64, i64* %a1, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %45, i64 noundef %46)
  br label %do.body85

do.body85:                                        ; preds = %do.end84
  br label %do.end86

do.end86:                                         ; preds = %do.body85
  %47 = load i64, i64* %a3, align 8
  %48 = load i64, i64* %a4, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %47, i64 noundef %48)
  br label %do.body87

do.body87:                                        ; preds = %do.end86
  br label %do.end88

do.end88:                                         ; preds = %do.body87
  %call89 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef 68719492368, i64 noundef %call89)
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 64)
  br label %do.body90

do.body90:                                        ; preds = %do.end88
  br label %do.end91

do.end91:                                         ; preds = %do.body90
  br label %do.body92

do.body92:                                        ; preds = %do.end91
  br label %do.end93

do.end93:                                         ; preds = %do.body92
  %call94 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and95 = and i64 %call94, 4503599627370495
  %49 = load i64*, i64** %r.addr, align 8
  %arrayidx96 = getelementptr inbounds i64, i64* %49, i64 2
  store i64 %and95, i64* %arrayidx96, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body97

do.body97:                                        ; preds = %do.end93
  br label %do.end98

do.end98:                                         ; preds = %do.body97
  br label %do.body99

do.body99:                                        ; preds = %do.end98
  br label %do.end100

do.end100:                                        ; preds = %do.body99
  %call101 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef 281475040739328, i64 noundef %call101)
  %50 = load i64, i64* %t3, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %c, i64 noundef %50)
  br label %do.body102

do.body102:                                       ; preds = %do.end100
  br label %do.end103

do.end103:                                        ; preds = %do.body102
  %call104 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and105 = and i64 %call104, 4503599627370495
  %51 = load i64*, i64** %r.addr, align 8
  %arrayidx106 = getelementptr inbounds i64, i64* %51, i64 3
  store i64 %and105, i64* %arrayidx106, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body107

do.body107:                                       ; preds = %do.end103
  br label %do.end108

do.end108:                                        ; preds = %do.body107
  br label %do.body109

do.body109:                                       ; preds = %do.end108
  br label %do.end110

do.end110:                                        ; preds = %do.body109
  %call111 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %52 = load i64, i64* %t4, align 8
  %add = add i64 %call111, %52
  %53 = load i64*, i64** %r.addr, align 8
  %arrayidx112 = getelementptr inbounds i64, i64* %53, i64 4
  store i64 %add, i64* %arrayidx112, align 8
  br label %do.body113

do.body113:                                       ; preds = %do.end110
  br label %do.end114

do.end114:                                        ; preds = %do.body113
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_u128_mul(i128* noundef %r, i64 noundef %a, i64 noundef %b) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = zext i64 %0 to i128
  %1 = load i64, i64* %b.addr, align 8
  %conv1 = zext i64 %1 to i128
  %mul = mul i128 %conv, %conv1
  %2 = load i128*, i128** %r.addr, align 8
  store i128 %mul, i128* %2, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_u128_accum_mul(i128* noundef %r, i64 noundef %a, i64 noundef %b) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = zext i64 %0 to i128
  %1 = load i64, i64* %b.addr, align 8
  %conv1 = zext i64 %1 to i128
  %mul = mul i128 %conv, %conv1
  %2 = load i128*, i128** %r.addr, align 8
  %3 = load i128, i128* %2, align 16
  %add = add i128 %3, %mul
  store i128 %add, i128* %2, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @secp256k1_u128_to_u64(i128* noundef %a) #0 {
entry:
  %a.addr = alloca i128*, align 8
  store i128* %a, i128** %a.addr, align 8
  %0 = load i128*, i128** %a.addr, align 8
  %1 = load i128, i128* %0, align 16
  %conv = trunc i128 %1 to i64
  ret i64 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_u128_rshift(i128* noundef %r, i32 noundef %n) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %n.addr = alloca i32, align 4
  store i128* %r, i128** %r.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 128
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i128*, i128** %r.addr, align 8
  %3 = load i128, i128* %2, align 16
  %sh_prom = zext i32 %1 to i128
  %shr = lshr i128 %3, %sh_prom
  store i128 %shr, i128* %2, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_u128_accum_u64(i128* noundef %r, i64 noundef %a) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = zext i64 %0 to i128
  %1 = load i128*, i128** %r.addr, align 8
  %2 = load i128, i128* %1, align 16
  %add = add i128 %2, %conv
  store i128 %add, i128* %1, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_mul_inner(i64* noundef %r, i64* noundef %a, i64* noalias noundef %b) #0 {
entry:
  %r.addr = alloca i64*, align 8
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  %c = alloca i128, align 16
  %d = alloca i128, align 16
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %tx = alloca i64, align 8
  %u0 = alloca i64, align 8
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  %a4 = alloca i64, align 8
  %M = alloca i64, align 8
  %R = alloca i64, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  %0 = load i64*, i64** %a.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load i64*, i64** %a.addr, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1
  %3 = load i64, i64* %arrayidx1, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load i64*, i64** %a.addr, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 2
  %5 = load i64, i64* %arrayidx2, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load i64*, i64** %a.addr, align 8
  %arrayidx3 = getelementptr inbounds i64, i64* %6, i64 3
  %7 = load i64, i64* %arrayidx3, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load i64*, i64** %a.addr, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %8, i64 4
  %9 = load i64, i64* %arrayidx4, align 8
  store i64 %9, i64* %a4, align 8
  store i64 4503599627370495, i64* %M, align 8
  store i64 68719492368, i64* %R, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body5

do.body5:                                         ; preds = %do.end
  br label %do.end6

do.end6:                                          ; preds = %do.body5
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  br label %do.end8

do.end8:                                          ; preds = %do.body7
  br label %do.body9

do.body9:                                         ; preds = %do.end8
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  br label %do.end12

do.end12:                                         ; preds = %do.body11
  br label %do.body13

do.body13:                                        ; preds = %do.end12
  br label %do.end14

do.end14:                                         ; preds = %do.body13
  br label %do.body15

do.body15:                                        ; preds = %do.end14
  br label %do.end16

do.end16:                                         ; preds = %do.body15
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  br label %do.end18

do.end18:                                         ; preds = %do.body17
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  br label %do.end20

do.end20:                                         ; preds = %do.body19
  br label %do.body21

do.body21:                                        ; preds = %do.end20
  br label %do.end22

do.end22:                                         ; preds = %do.body21
  br label %do.body23

do.body23:                                        ; preds = %do.end22
  %10 = load i64*, i64** %r.addr, align 8
  %11 = load i64*, i64** %b.addr, align 8
  %cmp = icmp ne i64* %10, %11
  %conv = zext i1 %cmp to i32
  br label %do.end24

do.end24:                                         ; preds = %do.body23
  br label %do.body25

do.body25:                                        ; preds = %do.end24
  %12 = load i64*, i64** %a.addr, align 8
  %13 = load i64*, i64** %b.addr, align 8
  %cmp26 = icmp ne i64* %12, %13
  %conv27 = zext i1 %cmp26 to i32
  br label %do.end28

do.end28:                                         ; preds = %do.body25
  %14 = load i64, i64* %a0, align 8
  %15 = load i64*, i64** %b.addr, align 8
  %arrayidx29 = getelementptr inbounds i64, i64* %15, i64 3
  %16 = load i64, i64* %arrayidx29, align 8
  call void @secp256k1_u128_mul(i128* noundef %d, i64 noundef %14, i64 noundef %16)
  %17 = load i64, i64* %a1, align 8
  %18 = load i64*, i64** %b.addr, align 8
  %arrayidx30 = getelementptr inbounds i64, i64* %18, i64 2
  %19 = load i64, i64* %arrayidx30, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %17, i64 noundef %19)
  %20 = load i64, i64* %a2, align 8
  %21 = load i64*, i64** %b.addr, align 8
  %arrayidx31 = getelementptr inbounds i64, i64* %21, i64 1
  %22 = load i64, i64* %arrayidx31, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %20, i64 noundef %22)
  %23 = load i64, i64* %a3, align 8
  %24 = load i64*, i64** %b.addr, align 8
  %arrayidx32 = getelementptr inbounds i64, i64* %24, i64 0
  %25 = load i64, i64* %arrayidx32, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %23, i64 noundef %25)
  br label %do.body33

do.body33:                                        ; preds = %do.end28
  br label %do.end34

do.end34:                                         ; preds = %do.body33
  %26 = load i64, i64* %a4, align 8
  %27 = load i64*, i64** %b.addr, align 8
  %arrayidx35 = getelementptr inbounds i64, i64* %27, i64 4
  %28 = load i64, i64* %arrayidx35, align 8
  call void @secp256k1_u128_mul(i128* noundef %c, i64 noundef %26, i64 noundef %28)
  br label %do.body36

do.body36:                                        ; preds = %do.end34
  br label %do.end37

do.end37:                                         ; preds = %do.body36
  %call = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef 68719492368, i64 noundef %call)
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 64)
  br label %do.body38

do.body38:                                        ; preds = %do.end37
  br label %do.end39

do.end39:                                         ; preds = %do.body38
  br label %do.body40

do.body40:                                        ; preds = %do.end39
  br label %do.end41

do.end41:                                         ; preds = %do.body40
  %call42 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and = and i64 %call42, 4503599627370495
  store i64 %and, i64* %t3, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body43

do.body43:                                        ; preds = %do.end41
  br label %do.end44

do.end44:                                         ; preds = %do.body43
  br label %do.body45

do.body45:                                        ; preds = %do.end44
  br label %do.end46

do.end46:                                         ; preds = %do.body45
  %29 = load i64, i64* %a0, align 8
  %30 = load i64*, i64** %b.addr, align 8
  %arrayidx47 = getelementptr inbounds i64, i64* %30, i64 4
  %31 = load i64, i64* %arrayidx47, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %29, i64 noundef %31)
  %32 = load i64, i64* %a1, align 8
  %33 = load i64*, i64** %b.addr, align 8
  %arrayidx48 = getelementptr inbounds i64, i64* %33, i64 3
  %34 = load i64, i64* %arrayidx48, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %32, i64 noundef %34)
  %35 = load i64, i64* %a2, align 8
  %36 = load i64*, i64** %b.addr, align 8
  %arrayidx49 = getelementptr inbounds i64, i64* %36, i64 2
  %37 = load i64, i64* %arrayidx49, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %35, i64 noundef %37)
  %38 = load i64, i64* %a3, align 8
  %39 = load i64*, i64** %b.addr, align 8
  %arrayidx50 = getelementptr inbounds i64, i64* %39, i64 1
  %40 = load i64, i64* %arrayidx50, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %38, i64 noundef %40)
  %41 = load i64, i64* %a4, align 8
  %42 = load i64*, i64** %b.addr, align 8
  %arrayidx51 = getelementptr inbounds i64, i64* %42, i64 0
  %43 = load i64, i64* %arrayidx51, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %41, i64 noundef %43)
  br label %do.body52

do.body52:                                        ; preds = %do.end46
  br label %do.end53

do.end53:                                         ; preds = %do.body52
  %call54 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef 281475040739328, i64 noundef %call54)
  br label %do.body55

do.body55:                                        ; preds = %do.end53
  br label %do.end56

do.end56:                                         ; preds = %do.body55
  %call57 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and58 = and i64 %call57, 4503599627370495
  store i64 %and58, i64* %t4, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body59

do.body59:                                        ; preds = %do.end56
  br label %do.end60

do.end60:                                         ; preds = %do.body59
  br label %do.body61

do.body61:                                        ; preds = %do.end60
  br label %do.end62

do.end62:                                         ; preds = %do.body61
  %44 = load i64, i64* %t4, align 8
  %shr = lshr i64 %44, 48
  store i64 %shr, i64* %tx, align 8
  %45 = load i64, i64* %t4, align 8
  %and63 = and i64 %45, 281474976710655
  store i64 %and63, i64* %t4, align 8
  br label %do.body64

do.body64:                                        ; preds = %do.end62
  br label %do.end65

do.end65:                                         ; preds = %do.body64
  br label %do.body66

do.body66:                                        ; preds = %do.end65
  br label %do.end67

do.end67:                                         ; preds = %do.body66
  %46 = load i64, i64* %a0, align 8
  %47 = load i64*, i64** %b.addr, align 8
  %arrayidx68 = getelementptr inbounds i64, i64* %47, i64 0
  %48 = load i64, i64* %arrayidx68, align 8
  call void @secp256k1_u128_mul(i128* noundef %c, i64 noundef %46, i64 noundef %48)
  br label %do.body69

do.body69:                                        ; preds = %do.end67
  br label %do.end70

do.end70:                                         ; preds = %do.body69
  %49 = load i64, i64* %a1, align 8
  %50 = load i64*, i64** %b.addr, align 8
  %arrayidx71 = getelementptr inbounds i64, i64* %50, i64 4
  %51 = load i64, i64* %arrayidx71, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %49, i64 noundef %51)
  %52 = load i64, i64* %a2, align 8
  %53 = load i64*, i64** %b.addr, align 8
  %arrayidx72 = getelementptr inbounds i64, i64* %53, i64 3
  %54 = load i64, i64* %arrayidx72, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %52, i64 noundef %54)
  %55 = load i64, i64* %a3, align 8
  %56 = load i64*, i64** %b.addr, align 8
  %arrayidx73 = getelementptr inbounds i64, i64* %56, i64 2
  %57 = load i64, i64* %arrayidx73, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %55, i64 noundef %57)
  %58 = load i64, i64* %a4, align 8
  %59 = load i64*, i64** %b.addr, align 8
  %arrayidx74 = getelementptr inbounds i64, i64* %59, i64 1
  %60 = load i64, i64* %arrayidx74, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %58, i64 noundef %60)
  br label %do.body75

do.body75:                                        ; preds = %do.end70
  br label %do.end76

do.end76:                                         ; preds = %do.body75
  %call77 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and78 = and i64 %call77, 4503599627370495
  store i64 %and78, i64* %u0, align 8
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body79

do.body79:                                        ; preds = %do.end76
  br label %do.end80

do.end80:                                         ; preds = %do.body79
  br label %do.body81

do.body81:                                        ; preds = %do.end80
  br label %do.end82

do.end82:                                         ; preds = %do.body81
  %61 = load i64, i64* %u0, align 8
  %shl = shl i64 %61, 4
  %62 = load i64, i64* %tx, align 8
  %or = or i64 %shl, %62
  store i64 %or, i64* %u0, align 8
  br label %do.body83

do.body83:                                        ; preds = %do.end82
  br label %do.end84

do.end84:                                         ; preds = %do.body83
  %63 = load i64, i64* %u0, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %63, i64 noundef 4294968273)
  br label %do.body85

do.body85:                                        ; preds = %do.end84
  br label %do.end86

do.end86:                                         ; preds = %do.body85
  %call87 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and88 = and i64 %call87, 4503599627370495
  %64 = load i64*, i64** %r.addr, align 8
  %arrayidx89 = getelementptr inbounds i64, i64* %64, i64 0
  store i64 %and88, i64* %arrayidx89, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body90

do.body90:                                        ; preds = %do.end86
  br label %do.end91

do.end91:                                         ; preds = %do.body90
  br label %do.body92

do.body92:                                        ; preds = %do.end91
  br label %do.end93

do.end93:                                         ; preds = %do.body92
  %65 = load i64, i64* %a0, align 8
  %66 = load i64*, i64** %b.addr, align 8
  %arrayidx94 = getelementptr inbounds i64, i64* %66, i64 1
  %67 = load i64, i64* %arrayidx94, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %65, i64 noundef %67)
  %68 = load i64, i64* %a1, align 8
  %69 = load i64*, i64** %b.addr, align 8
  %arrayidx95 = getelementptr inbounds i64, i64* %69, i64 0
  %70 = load i64, i64* %arrayidx95, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %68, i64 noundef %70)
  br label %do.body96

do.body96:                                        ; preds = %do.end93
  br label %do.end97

do.end97:                                         ; preds = %do.body96
  %71 = load i64, i64* %a2, align 8
  %72 = load i64*, i64** %b.addr, align 8
  %arrayidx98 = getelementptr inbounds i64, i64* %72, i64 4
  %73 = load i64, i64* %arrayidx98, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %71, i64 noundef %73)
  %74 = load i64, i64* %a3, align 8
  %75 = load i64*, i64** %b.addr, align 8
  %arrayidx99 = getelementptr inbounds i64, i64* %75, i64 3
  %76 = load i64, i64* %arrayidx99, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %74, i64 noundef %76)
  %77 = load i64, i64* %a4, align 8
  %78 = load i64*, i64** %b.addr, align 8
  %arrayidx100 = getelementptr inbounds i64, i64* %78, i64 2
  %79 = load i64, i64* %arrayidx100, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %77, i64 noundef %79)
  br label %do.body101

do.body101:                                       ; preds = %do.end97
  br label %do.end102

do.end102:                                        ; preds = %do.body101
  %call103 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  %and104 = and i64 %call103, 4503599627370495
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %and104, i64 noundef 68719492368)
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 52)
  br label %do.body105

do.body105:                                       ; preds = %do.end102
  br label %do.end106

do.end106:                                        ; preds = %do.body105
  br label %do.body107

do.body107:                                       ; preds = %do.end106
  br label %do.end108

do.end108:                                        ; preds = %do.body107
  %call109 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and110 = and i64 %call109, 4503599627370495
  %80 = load i64*, i64** %r.addr, align 8
  %arrayidx111 = getelementptr inbounds i64, i64* %80, i64 1
  store i64 %and110, i64* %arrayidx111, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body112

do.body112:                                       ; preds = %do.end108
  br label %do.end113

do.end113:                                        ; preds = %do.body112
  br label %do.body114

do.body114:                                       ; preds = %do.end113
  br label %do.end115

do.end115:                                        ; preds = %do.body114
  %81 = load i64, i64* %a0, align 8
  %82 = load i64*, i64** %b.addr, align 8
  %arrayidx116 = getelementptr inbounds i64, i64* %82, i64 2
  %83 = load i64, i64* %arrayidx116, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %81, i64 noundef %83)
  %84 = load i64, i64* %a1, align 8
  %85 = load i64*, i64** %b.addr, align 8
  %arrayidx117 = getelementptr inbounds i64, i64* %85, i64 1
  %86 = load i64, i64* %arrayidx117, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %84, i64 noundef %86)
  %87 = load i64, i64* %a2, align 8
  %88 = load i64*, i64** %b.addr, align 8
  %arrayidx118 = getelementptr inbounds i64, i64* %88, i64 0
  %89 = load i64, i64* %arrayidx118, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef %87, i64 noundef %89)
  br label %do.body119

do.body119:                                       ; preds = %do.end115
  br label %do.end120

do.end120:                                        ; preds = %do.body119
  %90 = load i64, i64* %a3, align 8
  %91 = load i64*, i64** %b.addr, align 8
  %arrayidx121 = getelementptr inbounds i64, i64* %91, i64 4
  %92 = load i64, i64* %arrayidx121, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %90, i64 noundef %92)
  %93 = load i64, i64* %a4, align 8
  %94 = load i64*, i64** %b.addr, align 8
  %arrayidx122 = getelementptr inbounds i64, i64* %94, i64 3
  %95 = load i64, i64* %arrayidx122, align 8
  call void @secp256k1_u128_accum_mul(i128* noundef %d, i64 noundef %93, i64 noundef %95)
  br label %do.body123

do.body123:                                       ; preds = %do.end120
  br label %do.end124

do.end124:                                        ; preds = %do.body123
  %call125 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef 68719492368, i64 noundef %call125)
  call void @secp256k1_u128_rshift(i128* noundef %d, i32 noundef 64)
  br label %do.body126

do.body126:                                       ; preds = %do.end124
  br label %do.end127

do.end127:                                        ; preds = %do.body126
  br label %do.body128

do.body128:                                       ; preds = %do.end127
  br label %do.end129

do.end129:                                        ; preds = %do.body128
  %call130 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and131 = and i64 %call130, 4503599627370495
  %96 = load i64*, i64** %r.addr, align 8
  %arrayidx132 = getelementptr inbounds i64, i64* %96, i64 2
  store i64 %and131, i64* %arrayidx132, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body133

do.body133:                                       ; preds = %do.end129
  br label %do.end134

do.end134:                                        ; preds = %do.body133
  br label %do.body135

do.body135:                                       ; preds = %do.end134
  br label %do.end136

do.end136:                                        ; preds = %do.body135
  %call137 = call i64 @secp256k1_u128_to_u64(i128* noundef %d)
  call void @secp256k1_u128_accum_mul(i128* noundef %c, i64 noundef 281475040739328, i64 noundef %call137)
  %97 = load i64, i64* %t3, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %c, i64 noundef %97)
  br label %do.body138

do.body138:                                       ; preds = %do.end136
  br label %do.end139

do.end139:                                        ; preds = %do.body138
  %call140 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %and141 = and i64 %call140, 4503599627370495
  %98 = load i64*, i64** %r.addr, align 8
  %arrayidx142 = getelementptr inbounds i64, i64* %98, i64 3
  store i64 %and141, i64* %arrayidx142, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c, i32 noundef 52)
  br label %do.body143

do.body143:                                       ; preds = %do.end139
  br label %do.end144

do.end144:                                        ; preds = %do.body143
  br label %do.body145

do.body145:                                       ; preds = %do.end144
  br label %do.end146

do.end146:                                        ; preds = %do.body145
  %call147 = call i64 @secp256k1_u128_to_u64(i128* noundef %c)
  %99 = load i64, i64* %t4, align 8
  %add = add i64 %call147, %99
  %100 = load i64*, i64** %r.addr, align 8
  %arrayidx148 = getelementptr inbounds i64, i64* %100, i64 4
  store i64 %add, i64* %arrayidx148, align 8
  br label %do.body149

do.body149:                                       ; preds = %do.end146
  br label %do.end150

do.end150:                                        ; preds = %do.body149
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_equal(%struct.secp256k1_fe* noundef %a, %struct.secp256k1_fe* noundef %b) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %b.addr = alloca %struct.secp256k1_fe*, align 8
  %na = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store %struct.secp256k1_fe* %b, %struct.secp256k1_fe** %b.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %na, %struct.secp256k1_fe* noundef %0, i32 noundef 1)
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %b.addr, align 8
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %na, %struct.secp256k1_fe* noundef %1)
  %call = call i32 @secp256k1_fe_normalizes_to_zero(%struct.secp256k1_fe* noundef %na)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_normalizes_to_zero(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %t2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %t3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %t4, align 8
  %10 = load i64, i64* %t4, align 8
  %shr = lshr i64 %10, 48
  store i64 %shr, i64* %x, align 8
  %11 = load i64, i64* %t4, align 8
  %and = and i64 %11, 281474976710655
  store i64 %and, i64* %t4, align 8
  %12 = load i64, i64* %x, align 8
  %mul = mul i64 %12, 4294968273
  %13 = load i64, i64* %t0, align 8
  %add = add i64 %13, %mul
  store i64 %add, i64* %t0, align 8
  %14 = load i64, i64* %t0, align 8
  %shr9 = lshr i64 %14, 52
  %15 = load i64, i64* %t1, align 8
  %add10 = add i64 %15, %shr9
  store i64 %add10, i64* %t1, align 8
  %16 = load i64, i64* %t0, align 8
  %and11 = and i64 %16, 4503599627370495
  store i64 %and11, i64* %t0, align 8
  %17 = load i64, i64* %t0, align 8
  store i64 %17, i64* %z0, align 8
  %18 = load i64, i64* %t0, align 8
  %xor = xor i64 %18, 4294968272
  store i64 %xor, i64* %z1, align 8
  %19 = load i64, i64* %t1, align 8
  %shr12 = lshr i64 %19, 52
  %20 = load i64, i64* %t2, align 8
  %add13 = add i64 %20, %shr12
  store i64 %add13, i64* %t2, align 8
  %21 = load i64, i64* %t1, align 8
  %and14 = and i64 %21, 4503599627370495
  store i64 %and14, i64* %t1, align 8
  %22 = load i64, i64* %t1, align 8
  %23 = load i64, i64* %z0, align 8
  %or = or i64 %23, %22
  store i64 %or, i64* %z0, align 8
  %24 = load i64, i64* %t1, align 8
  %25 = load i64, i64* %z1, align 8
  %and15 = and i64 %25, %24
  store i64 %and15, i64* %z1, align 8
  %26 = load i64, i64* %t2, align 8
  %shr16 = lshr i64 %26, 52
  %27 = load i64, i64* %t3, align 8
  %add17 = add i64 %27, %shr16
  store i64 %add17, i64* %t3, align 8
  %28 = load i64, i64* %t2, align 8
  %and18 = and i64 %28, 4503599627370495
  store i64 %and18, i64* %t2, align 8
  %29 = load i64, i64* %t2, align 8
  %30 = load i64, i64* %z0, align 8
  %or19 = or i64 %30, %29
  store i64 %or19, i64* %z0, align 8
  %31 = load i64, i64* %t2, align 8
  %32 = load i64, i64* %z1, align 8
  %and20 = and i64 %32, %31
  store i64 %and20, i64* %z1, align 8
  %33 = load i64, i64* %t3, align 8
  %shr21 = lshr i64 %33, 52
  %34 = load i64, i64* %t4, align 8
  %add22 = add i64 %34, %shr21
  store i64 %add22, i64* %t4, align 8
  %35 = load i64, i64* %t3, align 8
  %and23 = and i64 %35, 4503599627370495
  store i64 %and23, i64* %t3, align 8
  %36 = load i64, i64* %t3, align 8
  %37 = load i64, i64* %z0, align 8
  %or24 = or i64 %37, %36
  store i64 %or24, i64* %z0, align 8
  %38 = load i64, i64* %t3, align 8
  %39 = load i64, i64* %z1, align 8
  %and25 = and i64 %39, %38
  store i64 %and25, i64* %z1, align 8
  %40 = load i64, i64* %t4, align 8
  %41 = load i64, i64* %z0, align 8
  %or26 = or i64 %41, %40
  store i64 %or26, i64* %z0, align 8
  %42 = load i64, i64* %t4, align 8
  %xor27 = xor i64 %42, 4222124650659840
  %43 = load i64, i64* %z1, align 8
  %and28 = and i64 %43, %xor27
  store i64 %and28, i64* %z1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %44 = load i64, i64* %t4, align 8
  %shr29 = lshr i64 %44, 49
  %cmp = icmp eq i64 %shr29, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %45 = load i64, i64* %z0, align 8
  %cmp30 = icmp eq i64 %45, 0
  %conv31 = zext i1 %cmp30 to i32
  %46 = load i64, i64* %z1, align 8
  %cmp32 = icmp eq i64 %46, 4503599627370495
  %conv33 = zext i1 %cmp32 to i32
  %or34 = or i32 %conv31, %conv33
  ret i32 %or34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %t2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %t3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %t4, align 8
  %10 = load i64, i64* %t4, align 8
  %shr = lshr i64 %10, 48
  store i64 %shr, i64* %x, align 8
  %11 = load i64, i64* %t4, align 8
  %and = and i64 %11, 281474976710655
  store i64 %and, i64* %t4, align 8
  %12 = load i64, i64* %x, align 8
  %mul = mul i64 %12, 4294968273
  %13 = load i64, i64* %t0, align 8
  %add = add i64 %13, %mul
  store i64 %add, i64* %t0, align 8
  %14 = load i64, i64* %t0, align 8
  %shr9 = lshr i64 %14, 52
  %15 = load i64, i64* %t1, align 8
  %add10 = add i64 %15, %shr9
  store i64 %add10, i64* %t1, align 8
  %16 = load i64, i64* %t0, align 8
  %and11 = and i64 %16, 4503599627370495
  store i64 %and11, i64* %t0, align 8
  %17 = load i64, i64* %t1, align 8
  %shr12 = lshr i64 %17, 52
  %18 = load i64, i64* %t2, align 8
  %add13 = add i64 %18, %shr12
  store i64 %add13, i64* %t2, align 8
  %19 = load i64, i64* %t1, align 8
  %and14 = and i64 %19, 4503599627370495
  store i64 %and14, i64* %t1, align 8
  %20 = load i64, i64* %t2, align 8
  %shr15 = lshr i64 %20, 52
  %21 = load i64, i64* %t3, align 8
  %add16 = add i64 %21, %shr15
  store i64 %add16, i64* %t3, align 8
  %22 = load i64, i64* %t2, align 8
  %and17 = and i64 %22, 4503599627370495
  store i64 %and17, i64* %t2, align 8
  %23 = load i64, i64* %t3, align 8
  %shr18 = lshr i64 %23, 52
  %24 = load i64, i64* %t4, align 8
  %add19 = add i64 %24, %shr18
  store i64 %add19, i64* %t4, align 8
  %25 = load i64, i64* %t3, align 8
  %and20 = and i64 %25, 4503599627370495
  store i64 %and20, i64* %t3, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %26 = load i64, i64* %t4, align 8
  %shr21 = lshr i64 %26, 49
  %cmp = icmp eq i64 %shr21, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %27 = load i64, i64* %t0, align 8
  %28 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n22 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %28, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %n22, i64 0, i64 0
  store i64 %27, i64* %arrayidx23, align 8
  %29 = load i64, i64* %t1, align 8
  %30 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n24 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %30, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [5 x i64], [5 x i64]* %n24, i64 0, i64 1
  store i64 %29, i64* %arrayidx25, align 8
  %31 = load i64, i64* %t2, align 8
  %32 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n26 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %32, i32 0, i32 0
  %arrayidx27 = getelementptr inbounds [5 x i64], [5 x i64]* %n26, i64 0, i64 2
  store i64 %31, i64* %arrayidx27, align 8
  %33 = load i64, i64* %t3, align 8
  %34 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n28 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %34, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [5 x i64], [5 x i64]* %n28, i64 0, i64 3
  store i64 %33, i64* %arrayidx29, align 8
  %35 = load i64, i64* %t4, align 8
  %36 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n30 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %36, i32 0, i32 0
  %arrayidx31 = getelementptr inbounds [5 x i64], [5 x i64]* %n30, i64 0, i64 4
  store i64 %35, i64* %arrayidx31, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_equal_var(%struct.secp256k1_fe* noundef %a, %struct.secp256k1_fe* noundef %b) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %b.addr = alloca %struct.secp256k1_fe*, align 8
  %na = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store %struct.secp256k1_fe* %b, %struct.secp256k1_fe** %b.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %na, %struct.secp256k1_fe* noundef %0, i32 noundef 1)
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %b.addr, align 8
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %na, %struct.secp256k1_fe* noundef %1)
  %call = call i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %na)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %z0 = alloca i64, align 8
  %z1 = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 4
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t4, align 8
  %4 = load i64, i64* %t4, align 8
  %shr = lshr i64 %4, 48
  store i64 %shr, i64* %x, align 8
  %5 = load i64, i64* %x, align 8
  %mul = mul i64 %5, 4294968273
  %6 = load i64, i64* %t0, align 8
  %add = add i64 %6, %mul
  store i64 %add, i64* %t0, align 8
  %7 = load i64, i64* %t0, align 8
  %and = and i64 %7, 4503599627370495
  store i64 %and, i64* %z0, align 8
  %8 = load i64, i64* %z0, align 8
  %xor = xor i64 %8, 4294968272
  store i64 %xor, i64* %z1, align 8
  %9 = load i64, i64* %z0, align 8
  %cmp = icmp ne i64 %9, 0
  %conv = zext i1 %cmp to i32
  %10 = load i64, i64* %z1, align 8
  %cmp3 = icmp ne i64 %10, 4503599627370495
  %conv4 = zext i1 %cmp3 to i32
  %and5 = and i32 %conv, %conv4
  %tobool = icmp ne i32 %and5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %11, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n6, i64 0, i64 1
  %12 = load i64, i64* %arrayidx7, align 8
  store i64 %12, i64* %t1, align 8
  %13 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %13, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 2
  %14 = load i64, i64* %arrayidx9, align 8
  store i64 %14, i64* %t2, align 8
  %15 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n10 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %15, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [5 x i64], [5 x i64]* %n10, i64 0, i64 3
  %16 = load i64, i64* %arrayidx11, align 8
  store i64 %16, i64* %t3, align 8
  %17 = load i64, i64* %t4, align 8
  %and12 = and i64 %17, 281474976710655
  store i64 %and12, i64* %t4, align 8
  %18 = load i64, i64* %t0, align 8
  %shr13 = lshr i64 %18, 52
  %19 = load i64, i64* %t1, align 8
  %add14 = add i64 %19, %shr13
  store i64 %add14, i64* %t1, align 8
  %20 = load i64, i64* %t1, align 8
  %shr15 = lshr i64 %20, 52
  %21 = load i64, i64* %t2, align 8
  %add16 = add i64 %21, %shr15
  store i64 %add16, i64* %t2, align 8
  %22 = load i64, i64* %t1, align 8
  %and17 = and i64 %22, 4503599627370495
  store i64 %and17, i64* %t1, align 8
  %23 = load i64, i64* %t1, align 8
  %24 = load i64, i64* %z0, align 8
  %or = or i64 %24, %23
  store i64 %or, i64* %z0, align 8
  %25 = load i64, i64* %t1, align 8
  %26 = load i64, i64* %z1, align 8
  %and18 = and i64 %26, %25
  store i64 %and18, i64* %z1, align 8
  %27 = load i64, i64* %t2, align 8
  %shr19 = lshr i64 %27, 52
  %28 = load i64, i64* %t3, align 8
  %add20 = add i64 %28, %shr19
  store i64 %add20, i64* %t3, align 8
  %29 = load i64, i64* %t2, align 8
  %and21 = and i64 %29, 4503599627370495
  store i64 %and21, i64* %t2, align 8
  %30 = load i64, i64* %t2, align 8
  %31 = load i64, i64* %z0, align 8
  %or22 = or i64 %31, %30
  store i64 %or22, i64* %z0, align 8
  %32 = load i64, i64* %t2, align 8
  %33 = load i64, i64* %z1, align 8
  %and23 = and i64 %33, %32
  store i64 %and23, i64* %z1, align 8
  %34 = load i64, i64* %t3, align 8
  %shr24 = lshr i64 %34, 52
  %35 = load i64, i64* %t4, align 8
  %add25 = add i64 %35, %shr24
  store i64 %add25, i64* %t4, align 8
  %36 = load i64, i64* %t3, align 8
  %and26 = and i64 %36, 4503599627370495
  store i64 %and26, i64* %t3, align 8
  %37 = load i64, i64* %t3, align 8
  %38 = load i64, i64* %z0, align 8
  %or27 = or i64 %38, %37
  store i64 %or27, i64* %z0, align 8
  %39 = load i64, i64* %t3, align 8
  %40 = load i64, i64* %z1, align 8
  %and28 = and i64 %40, %39
  store i64 %and28, i64* %z1, align 8
  %41 = load i64, i64* %t4, align 8
  %42 = load i64, i64* %z0, align 8
  %or29 = or i64 %42, %41
  store i64 %or29, i64* %z0, align 8
  %43 = load i64, i64* %t4, align 8
  %xor30 = xor i64 %43, 4222124650659840
  %44 = load i64, i64* %z1, align 8
  %and31 = and i64 %44, %xor30
  store i64 %and31, i64* %z1, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %45 = load i64, i64* %t4, align 8
  %shr32 = lshr i64 %45, 49
  %cmp33 = icmp eq i64 %shr32, 0
  %conv34 = zext i1 %cmp33 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %46 = load i64, i64* %z0, align 8
  %cmp35 = icmp eq i64 %46, 0
  %conv36 = zext i1 %cmp35 to i32
  %47 = load i64, i64* %z1, align 8
  %cmp37 = icmp eq i64 %47, 4503599627370495
  %conv38 = zext i1 %cmp37 to i32
  %or39 = or i32 %conv36, %conv38
  store i32 %or39, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_to_storage(%struct.secp256k1_ge_storage* noundef %r, %struct.secp256k1_ge* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge_storage*, align 8
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  %x = alloca %struct.secp256k1_fe, align 8
  %y = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge_storage* %r, %struct.secp256k1_ge_storage** %r.addr, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 0
  %3 = bitcast %struct.secp256k1_fe* %x to i8*
  %4 = bitcast %struct.secp256k1_fe* %x1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  call void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %x)
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %5, i32 0, i32 1
  %6 = bitcast %struct.secp256k1_fe* %y to i8*
  %7 = bitcast %struct.secp256k1_fe* %y2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 40, i1 false)
  call void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %y)
  %8 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %r.addr, align 8
  %x3 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %8, i32 0, i32 0
  call void @secp256k1_fe_to_storage(%struct.secp256k1_fe_storage* noundef %x3, %struct.secp256k1_fe* noundef %x)
  %9 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %r.addr, align 8
  %y4 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %9, i32 0, i32 1
  call void @secp256k1_fe_to_storage(%struct.secp256k1_fe_storage* noundef %y4, %struct.secp256k1_fe* noundef %y)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %t2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %t3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %t4, align 8
  %10 = load i64, i64* %t4, align 8
  %shr = lshr i64 %10, 48
  store i64 %shr, i64* %x, align 8
  %11 = load i64, i64* %t4, align 8
  %and = and i64 %11, 281474976710655
  store i64 %and, i64* %t4, align 8
  %12 = load i64, i64* %x, align 8
  %mul = mul i64 %12, 4294968273
  %13 = load i64, i64* %t0, align 8
  %add = add i64 %13, %mul
  store i64 %add, i64* %t0, align 8
  %14 = load i64, i64* %t0, align 8
  %shr9 = lshr i64 %14, 52
  %15 = load i64, i64* %t1, align 8
  %add10 = add i64 %15, %shr9
  store i64 %add10, i64* %t1, align 8
  %16 = load i64, i64* %t0, align 8
  %and11 = and i64 %16, 4503599627370495
  store i64 %and11, i64* %t0, align 8
  %17 = load i64, i64* %t1, align 8
  %shr12 = lshr i64 %17, 52
  %18 = load i64, i64* %t2, align 8
  %add13 = add i64 %18, %shr12
  store i64 %add13, i64* %t2, align 8
  %19 = load i64, i64* %t1, align 8
  %and14 = and i64 %19, 4503599627370495
  store i64 %and14, i64* %t1, align 8
  %20 = load i64, i64* %t1, align 8
  store i64 %20, i64* %m, align 8
  %21 = load i64, i64* %t2, align 8
  %shr15 = lshr i64 %21, 52
  %22 = load i64, i64* %t3, align 8
  %add16 = add i64 %22, %shr15
  store i64 %add16, i64* %t3, align 8
  %23 = load i64, i64* %t2, align 8
  %and17 = and i64 %23, 4503599627370495
  store i64 %and17, i64* %t2, align 8
  %24 = load i64, i64* %t2, align 8
  %25 = load i64, i64* %m, align 8
  %and18 = and i64 %25, %24
  store i64 %and18, i64* %m, align 8
  %26 = load i64, i64* %t3, align 8
  %shr19 = lshr i64 %26, 52
  %27 = load i64, i64* %t4, align 8
  %add20 = add i64 %27, %shr19
  store i64 %add20, i64* %t4, align 8
  %28 = load i64, i64* %t3, align 8
  %and21 = and i64 %28, 4503599627370495
  store i64 %and21, i64* %t3, align 8
  %29 = load i64, i64* %t3, align 8
  %30 = load i64, i64* %m, align 8
  %and22 = and i64 %30, %29
  store i64 %and22, i64* %m, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %31 = load i64, i64* %t4, align 8
  %shr23 = lshr i64 %31, 49
  %cmp = icmp eq i64 %shr23, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %32 = load i64, i64* %t4, align 8
  %shr24 = lshr i64 %32, 48
  %33 = load i64, i64* %t4, align 8
  %cmp25 = icmp eq i64 %33, 281474976710655
  %conv26 = zext i1 %cmp25 to i32
  %34 = load i64, i64* %m, align 8
  %cmp27 = icmp eq i64 %34, 4503599627370495
  %conv28 = zext i1 %cmp27 to i32
  %and29 = and i32 %conv26, %conv28
  %35 = load i64, i64* %t0, align 8
  %cmp30 = icmp uge i64 %35, 4503595332402223
  %conv31 = zext i1 %cmp30 to i32
  %and32 = and i32 %and29, %conv31
  %conv33 = sext i32 %and32 to i64
  %or = or i64 %shr24, %conv33
  store i64 %or, i64* %x, align 8
  %36 = load i64, i64* %x, align 8
  %mul34 = mul i64 %36, 4294968273
  %37 = load i64, i64* %t0, align 8
  %add35 = add i64 %37, %mul34
  store i64 %add35, i64* %t0, align 8
  %38 = load i64, i64* %t0, align 8
  %shr36 = lshr i64 %38, 52
  %39 = load i64, i64* %t1, align 8
  %add37 = add i64 %39, %shr36
  store i64 %add37, i64* %t1, align 8
  %40 = load i64, i64* %t0, align 8
  %and38 = and i64 %40, 4503599627370495
  store i64 %and38, i64* %t0, align 8
  %41 = load i64, i64* %t1, align 8
  %shr39 = lshr i64 %41, 52
  %42 = load i64, i64* %t2, align 8
  %add40 = add i64 %42, %shr39
  store i64 %add40, i64* %t2, align 8
  %43 = load i64, i64* %t1, align 8
  %and41 = and i64 %43, 4503599627370495
  store i64 %and41, i64* %t1, align 8
  %44 = load i64, i64* %t2, align 8
  %shr42 = lshr i64 %44, 52
  %45 = load i64, i64* %t3, align 8
  %add43 = add i64 %45, %shr42
  store i64 %add43, i64* %t3, align 8
  %46 = load i64, i64* %t2, align 8
  %and44 = and i64 %46, 4503599627370495
  store i64 %and44, i64* %t2, align 8
  %47 = load i64, i64* %t3, align 8
  %shr45 = lshr i64 %47, 52
  %48 = load i64, i64* %t4, align 8
  %add46 = add i64 %48, %shr45
  store i64 %add46, i64* %t4, align 8
  %49 = load i64, i64* %t3, align 8
  %and47 = and i64 %49, 4503599627370495
  store i64 %and47, i64* %t3, align 8
  br label %do.body48

do.body48:                                        ; preds = %do.end
  %50 = load i64, i64* %t4, align 8
  %shr49 = lshr i64 %50, 48
  %51 = load i64, i64* %x, align 8
  %cmp50 = icmp eq i64 %shr49, %51
  %conv51 = zext i1 %cmp50 to i32
  br label %do.end52

do.end52:                                         ; preds = %do.body48
  %52 = load i64, i64* %t4, align 8
  %and53 = and i64 %52, 281474976710655
  store i64 %and53, i64* %t4, align 8
  %53 = load i64, i64* %t0, align 8
  %54 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n54 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %54, i32 0, i32 0
  %arrayidx55 = getelementptr inbounds [5 x i64], [5 x i64]* %n54, i64 0, i64 0
  store i64 %53, i64* %arrayidx55, align 8
  %55 = load i64, i64* %t1, align 8
  %56 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n56 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %56, i32 0, i32 0
  %arrayidx57 = getelementptr inbounds [5 x i64], [5 x i64]* %n56, i64 0, i64 1
  store i64 %55, i64* %arrayidx57, align 8
  %57 = load i64, i64* %t2, align 8
  %58 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n58 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %58, i32 0, i32 0
  %arrayidx59 = getelementptr inbounds [5 x i64], [5 x i64]* %n58, i64 0, i64 2
  store i64 %57, i64* %arrayidx59, align 8
  %59 = load i64, i64* %t3, align 8
  %60 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n60 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %60, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [5 x i64], [5 x i64]* %n60, i64 0, i64 3
  store i64 %59, i64* %arrayidx61, align 8
  %61 = load i64, i64* %t4, align 8
  %62 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n62 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %62, i32 0, i32 0
  %arrayidx63 = getelementptr inbounds [5 x i64], [5 x i64]* %n62, i64 0, i64 4
  store i64 %61, i64* %arrayidx63, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_to_storage(%struct.secp256k1_fe_storage* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe_storage*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_fe_storage* %r, %struct.secp256k1_fe_storage** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  %shl = shl i64 %3, 52
  %or = or i64 %1, %shl
  %4 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %n3, i64 0, i64 0
  store i64 %or, i64* %arrayidx4, align 8
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %5, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 1
  %6 = load i64, i64* %arrayidx6, align 8
  %shr = lshr i64 %6, 12
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 2
  %8 = load i64, i64* %arrayidx8, align 8
  %shl9 = shl i64 %8, 40
  %or10 = or i64 %shr, %shl9
  %9 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n11 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %9, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x i64], [4 x i64]* %n11, i64 0, i64 1
  store i64 %or10, i64* %arrayidx12, align 8
  %10 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n13 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %10, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %n13, i64 0, i64 2
  %11 = load i64, i64* %arrayidx14, align 8
  %shr15 = lshr i64 %11, 24
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n16 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [5 x i64], [5 x i64]* %n16, i64 0, i64 3
  %13 = load i64, i64* %arrayidx17, align 8
  %shl18 = shl i64 %13, 28
  %or19 = or i64 %shr15, %shl18
  %14 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n20 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %14, i32 0, i32 0
  %arrayidx21 = getelementptr inbounds [4 x i64], [4 x i64]* %n20, i64 0, i64 2
  store i64 %or19, i64* %arrayidx21, align 8
  %15 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n22 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %15, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %n22, i64 0, i64 3
  %16 = load i64, i64* %arrayidx23, align 8
  %shr24 = lshr i64 %16, 36
  %17 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n25 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %17, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [5 x i64], [5 x i64]* %n25, i64 0, i64 4
  %18 = load i64, i64* %arrayidx26, align 8
  %shl27 = shl i64 %18, 16
  %or28 = or i64 %shr24, %shl27
  %19 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n29 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %19, i32 0, i32 0
  %arrayidx30 = getelementptr inbounds [4 x i64], [4 x i64]* %n29, i64 0, i64 3
  store i64 %or28, i64* %arrayidx30, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_from_storage(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_ge_storage* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %a.addr = alloca %struct.secp256k1_ge_storage*, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_ge_storage* %a, %struct.secp256k1_ge_storage** %a.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 0
  %1 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %1, i32 0, i32 0
  call void @secp256k1_fe_from_storage(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe_storage* noundef %x1)
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 1
  %3 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %a.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %3, i32 0, i32 1
  call void @secp256k1_fe_from_storage(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe_storage* noundef %y2)
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 2
  store i32 0, i32* %infinity, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_is_zero(%struct.secp256k1_fe* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %t = alloca i64*, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  store i64* %arraydecay, i64** %t, align 8
  %1 = load i64*, i64** %t, align 8
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %3 = load i64*, i64** %t, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i64 1
  %4 = load i64, i64* %arrayidx1, align 8
  %or = or i64 %2, %4
  %5 = load i64*, i64** %t, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i64 2
  %6 = load i64, i64* %arrayidx2, align 8
  %or3 = or i64 %or, %6
  %7 = load i64*, i64** %t, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %7, i64 3
  %8 = load i64, i64* %arrayidx4, align 8
  %or5 = or i64 %or3, %8
  %9 = load i64*, i64** %t, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %9, i64 4
  %10 = load i64, i64* %arrayidx6, align 8
  %or7 = or i64 %or5, %10
  %cmp = icmp eq i64 %or7, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_from_storage(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe_storage* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe_storage*, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe_storage* %a, %struct.secp256k1_fe_storage** %a.addr, align 8
  %0 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %and = and i64 %1, 4503599627370495
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  store i64 %and, i64* %arrayidx2, align 8
  %3 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %3, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %n3, i64 0, i64 0
  %4 = load i64, i64* %arrayidx4, align 8
  %shr = lshr i64 %4, 52
  %5 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %5, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %n5, i64 0, i64 1
  %6 = load i64, i64* %arrayidx6, align 8
  %shl = shl i64 %6, 12
  %and7 = and i64 %shl, 4503599627370495
  %or = or i64 %shr, %and7
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 1
  store i64 %or, i64* %arrayidx9, align 8
  %8 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n10 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %8, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [4 x i64], [4 x i64]* %n10, i64 0, i64 1
  %9 = load i64, i64* %arrayidx11, align 8
  %shr12 = lshr i64 %9, 40
  %10 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n13 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %10, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %n13, i64 0, i64 2
  %11 = load i64, i64* %arrayidx14, align 8
  %shl15 = shl i64 %11, 24
  %and16 = and i64 %shl15, 4503599627370495
  %or17 = or i64 %shr12, %and16
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n18 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [5 x i64], [5 x i64]* %n18, i64 0, i64 2
  store i64 %or17, i64* %arrayidx19, align 8
  %13 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n20 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %13, i32 0, i32 0
  %arrayidx21 = getelementptr inbounds [4 x i64], [4 x i64]* %n20, i64 0, i64 2
  %14 = load i64, i64* %arrayidx21, align 8
  %shr22 = lshr i64 %14, 28
  %15 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n23 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %15, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds [4 x i64], [4 x i64]* %n23, i64 0, i64 3
  %16 = load i64, i64* %arrayidx24, align 8
  %shl25 = shl i64 %16, 36
  %and26 = and i64 %shl25, 4503599627370495
  %or27 = or i64 %shr22, %and26
  %17 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n28 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %17, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [5 x i64], [5 x i64]* %n28, i64 0, i64 3
  store i64 %or27, i64* %arrayidx29, align 8
  %18 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n30 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %18, i32 0, i32 0
  %arrayidx31 = getelementptr inbounds [4 x i64], [4 x i64]* %n30, i64 0, i64 3
  %19 = load i64, i64* %arrayidx31, align 8
  %shr32 = lshr i64 %19, 16
  %20 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n33 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %20, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [5 x i64], [5 x i64]* %n33, i64 0, i64 4
  store i64 %shr32, i64* %arrayidx34, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ge_is_infinity(%struct.secp256k1_ge* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  %1 = load i32, i32* %infinity, align 8
  ret i32 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_get_b32(i8* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca i8*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  store i8* %r, i8** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 4
  %1 = load i64, i64* %arrayidx, align 8
  %shr = lshr i64 %1, 40
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i8
  %2 = load i8*, i8** %r.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0
  store i8 %conv, i8* %arrayidx1, align 1
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n2 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %3, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %n2, i64 0, i64 4
  %4 = load i64, i64* %arrayidx3, align 8
  %shr4 = lshr i64 %4, 32
  %and5 = and i64 %shr4, 255
  %conv6 = trunc i64 %and5 to i8
  %5 = load i8*, i8** %r.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv6, i8* %arrayidx7, align 1
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 4
  %7 = load i64, i64* %arrayidx9, align 8
  %shr10 = lshr i64 %7, 24
  %and11 = and i64 %shr10, 255
  %conv12 = trunc i64 %and11 to i8
  %8 = load i8*, i8** %r.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %8, i64 2
  store i8 %conv12, i8* %arrayidx13, align 1
  %9 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n14 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %9, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [5 x i64], [5 x i64]* %n14, i64 0, i64 4
  %10 = load i64, i64* %arrayidx15, align 8
  %shr16 = lshr i64 %10, 16
  %and17 = and i64 %shr16, 255
  %conv18 = trunc i64 %and17 to i8
  %11 = load i8*, i8** %r.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %11, i64 3
  store i8 %conv18, i8* %arrayidx19, align 1
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n20 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i32 0, i32 0
  %arrayidx21 = getelementptr inbounds [5 x i64], [5 x i64]* %n20, i64 0, i64 4
  %13 = load i64, i64* %arrayidx21, align 8
  %shr22 = lshr i64 %13, 8
  %and23 = and i64 %shr22, 255
  %conv24 = trunc i64 %and23 to i8
  %14 = load i8*, i8** %r.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %14, i64 4
  store i8 %conv24, i8* %arrayidx25, align 1
  %15 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n26 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %15, i32 0, i32 0
  %arrayidx27 = getelementptr inbounds [5 x i64], [5 x i64]* %n26, i64 0, i64 4
  %16 = load i64, i64* %arrayidx27, align 8
  %and28 = and i64 %16, 255
  %conv29 = trunc i64 %and28 to i8
  %17 = load i8*, i8** %r.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %conv29, i8* %arrayidx30, align 1
  %18 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n31 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %18, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [5 x i64], [5 x i64]* %n31, i64 0, i64 3
  %19 = load i64, i64* %arrayidx32, align 8
  %shr33 = lshr i64 %19, 44
  %and34 = and i64 %shr33, 255
  %conv35 = trunc i64 %and34 to i8
  %20 = load i8*, i8** %r.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %20, i64 6
  store i8 %conv35, i8* %arrayidx36, align 1
  %21 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n37 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %21, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [5 x i64], [5 x i64]* %n37, i64 0, i64 3
  %22 = load i64, i64* %arrayidx38, align 8
  %shr39 = lshr i64 %22, 36
  %and40 = and i64 %shr39, 255
  %conv41 = trunc i64 %and40 to i8
  %23 = load i8*, i8** %r.addr, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %23, i64 7
  store i8 %conv41, i8* %arrayidx42, align 1
  %24 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n43 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %24, i32 0, i32 0
  %arrayidx44 = getelementptr inbounds [5 x i64], [5 x i64]* %n43, i64 0, i64 3
  %25 = load i64, i64* %arrayidx44, align 8
  %shr45 = lshr i64 %25, 28
  %and46 = and i64 %shr45, 255
  %conv47 = trunc i64 %and46 to i8
  %26 = load i8*, i8** %r.addr, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %26, i64 8
  store i8 %conv47, i8* %arrayidx48, align 1
  %27 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n49 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %27, i32 0, i32 0
  %arrayidx50 = getelementptr inbounds [5 x i64], [5 x i64]* %n49, i64 0, i64 3
  %28 = load i64, i64* %arrayidx50, align 8
  %shr51 = lshr i64 %28, 20
  %and52 = and i64 %shr51, 255
  %conv53 = trunc i64 %and52 to i8
  %29 = load i8*, i8** %r.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %29, i64 9
  store i8 %conv53, i8* %arrayidx54, align 1
  %30 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n55 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %30, i32 0, i32 0
  %arrayidx56 = getelementptr inbounds [5 x i64], [5 x i64]* %n55, i64 0, i64 3
  %31 = load i64, i64* %arrayidx56, align 8
  %shr57 = lshr i64 %31, 12
  %and58 = and i64 %shr57, 255
  %conv59 = trunc i64 %and58 to i8
  %32 = load i8*, i8** %r.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %32, i64 10
  store i8 %conv59, i8* %arrayidx60, align 1
  %33 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n61 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %33, i32 0, i32 0
  %arrayidx62 = getelementptr inbounds [5 x i64], [5 x i64]* %n61, i64 0, i64 3
  %34 = load i64, i64* %arrayidx62, align 8
  %shr63 = lshr i64 %34, 4
  %and64 = and i64 %shr63, 255
  %conv65 = trunc i64 %and64 to i8
  %35 = load i8*, i8** %r.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %35, i64 11
  store i8 %conv65, i8* %arrayidx66, align 1
  %36 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n67 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %36, i32 0, i32 0
  %arrayidx68 = getelementptr inbounds [5 x i64], [5 x i64]* %n67, i64 0, i64 2
  %37 = load i64, i64* %arrayidx68, align 8
  %shr69 = lshr i64 %37, 48
  %and70 = and i64 %shr69, 15
  %38 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n71 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %38, i32 0, i32 0
  %arrayidx72 = getelementptr inbounds [5 x i64], [5 x i64]* %n71, i64 0, i64 3
  %39 = load i64, i64* %arrayidx72, align 8
  %and73 = and i64 %39, 15
  %shl = shl i64 %and73, 4
  %or = or i64 %and70, %shl
  %conv74 = trunc i64 %or to i8
  %40 = load i8*, i8** %r.addr, align 8
  %arrayidx75 = getelementptr inbounds i8, i8* %40, i64 12
  store i8 %conv74, i8* %arrayidx75, align 1
  %41 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n76 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %41, i32 0, i32 0
  %arrayidx77 = getelementptr inbounds [5 x i64], [5 x i64]* %n76, i64 0, i64 2
  %42 = load i64, i64* %arrayidx77, align 8
  %shr78 = lshr i64 %42, 40
  %and79 = and i64 %shr78, 255
  %conv80 = trunc i64 %and79 to i8
  %43 = load i8*, i8** %r.addr, align 8
  %arrayidx81 = getelementptr inbounds i8, i8* %43, i64 13
  store i8 %conv80, i8* %arrayidx81, align 1
  %44 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n82 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %44, i32 0, i32 0
  %arrayidx83 = getelementptr inbounds [5 x i64], [5 x i64]* %n82, i64 0, i64 2
  %45 = load i64, i64* %arrayidx83, align 8
  %shr84 = lshr i64 %45, 32
  %and85 = and i64 %shr84, 255
  %conv86 = trunc i64 %and85 to i8
  %46 = load i8*, i8** %r.addr, align 8
  %arrayidx87 = getelementptr inbounds i8, i8* %46, i64 14
  store i8 %conv86, i8* %arrayidx87, align 1
  %47 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n88 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %47, i32 0, i32 0
  %arrayidx89 = getelementptr inbounds [5 x i64], [5 x i64]* %n88, i64 0, i64 2
  %48 = load i64, i64* %arrayidx89, align 8
  %shr90 = lshr i64 %48, 24
  %and91 = and i64 %shr90, 255
  %conv92 = trunc i64 %and91 to i8
  %49 = load i8*, i8** %r.addr, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %49, i64 15
  store i8 %conv92, i8* %arrayidx93, align 1
  %50 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n94 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %50, i32 0, i32 0
  %arrayidx95 = getelementptr inbounds [5 x i64], [5 x i64]* %n94, i64 0, i64 2
  %51 = load i64, i64* %arrayidx95, align 8
  %shr96 = lshr i64 %51, 16
  %and97 = and i64 %shr96, 255
  %conv98 = trunc i64 %and97 to i8
  %52 = load i8*, i8** %r.addr, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %52, i64 16
  store i8 %conv98, i8* %arrayidx99, align 1
  %53 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n100 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %53, i32 0, i32 0
  %arrayidx101 = getelementptr inbounds [5 x i64], [5 x i64]* %n100, i64 0, i64 2
  %54 = load i64, i64* %arrayidx101, align 8
  %shr102 = lshr i64 %54, 8
  %and103 = and i64 %shr102, 255
  %conv104 = trunc i64 %and103 to i8
  %55 = load i8*, i8** %r.addr, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %55, i64 17
  store i8 %conv104, i8* %arrayidx105, align 1
  %56 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n106 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %56, i32 0, i32 0
  %arrayidx107 = getelementptr inbounds [5 x i64], [5 x i64]* %n106, i64 0, i64 2
  %57 = load i64, i64* %arrayidx107, align 8
  %and108 = and i64 %57, 255
  %conv109 = trunc i64 %and108 to i8
  %58 = load i8*, i8** %r.addr, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %58, i64 18
  store i8 %conv109, i8* %arrayidx110, align 1
  %59 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n111 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %59, i32 0, i32 0
  %arrayidx112 = getelementptr inbounds [5 x i64], [5 x i64]* %n111, i64 0, i64 1
  %60 = load i64, i64* %arrayidx112, align 8
  %shr113 = lshr i64 %60, 44
  %and114 = and i64 %shr113, 255
  %conv115 = trunc i64 %and114 to i8
  %61 = load i8*, i8** %r.addr, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %61, i64 19
  store i8 %conv115, i8* %arrayidx116, align 1
  %62 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n117 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %62, i32 0, i32 0
  %arrayidx118 = getelementptr inbounds [5 x i64], [5 x i64]* %n117, i64 0, i64 1
  %63 = load i64, i64* %arrayidx118, align 8
  %shr119 = lshr i64 %63, 36
  %and120 = and i64 %shr119, 255
  %conv121 = trunc i64 %and120 to i8
  %64 = load i8*, i8** %r.addr, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %64, i64 20
  store i8 %conv121, i8* %arrayidx122, align 1
  %65 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n123 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %65, i32 0, i32 0
  %arrayidx124 = getelementptr inbounds [5 x i64], [5 x i64]* %n123, i64 0, i64 1
  %66 = load i64, i64* %arrayidx124, align 8
  %shr125 = lshr i64 %66, 28
  %and126 = and i64 %shr125, 255
  %conv127 = trunc i64 %and126 to i8
  %67 = load i8*, i8** %r.addr, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %67, i64 21
  store i8 %conv127, i8* %arrayidx128, align 1
  %68 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n129 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %68, i32 0, i32 0
  %arrayidx130 = getelementptr inbounds [5 x i64], [5 x i64]* %n129, i64 0, i64 1
  %69 = load i64, i64* %arrayidx130, align 8
  %shr131 = lshr i64 %69, 20
  %and132 = and i64 %shr131, 255
  %conv133 = trunc i64 %and132 to i8
  %70 = load i8*, i8** %r.addr, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %70, i64 22
  store i8 %conv133, i8* %arrayidx134, align 1
  %71 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n135 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %71, i32 0, i32 0
  %arrayidx136 = getelementptr inbounds [5 x i64], [5 x i64]* %n135, i64 0, i64 1
  %72 = load i64, i64* %arrayidx136, align 8
  %shr137 = lshr i64 %72, 12
  %and138 = and i64 %shr137, 255
  %conv139 = trunc i64 %and138 to i8
  %73 = load i8*, i8** %r.addr, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %73, i64 23
  store i8 %conv139, i8* %arrayidx140, align 1
  %74 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n141 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %74, i32 0, i32 0
  %arrayidx142 = getelementptr inbounds [5 x i64], [5 x i64]* %n141, i64 0, i64 1
  %75 = load i64, i64* %arrayidx142, align 8
  %shr143 = lshr i64 %75, 4
  %and144 = and i64 %shr143, 255
  %conv145 = trunc i64 %and144 to i8
  %76 = load i8*, i8** %r.addr, align 8
  %arrayidx146 = getelementptr inbounds i8, i8* %76, i64 24
  store i8 %conv145, i8* %arrayidx146, align 1
  %77 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n147 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %77, i32 0, i32 0
  %arrayidx148 = getelementptr inbounds [5 x i64], [5 x i64]* %n147, i64 0, i64 0
  %78 = load i64, i64* %arrayidx148, align 8
  %shr149 = lshr i64 %78, 48
  %and150 = and i64 %shr149, 15
  %79 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n151 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %79, i32 0, i32 0
  %arrayidx152 = getelementptr inbounds [5 x i64], [5 x i64]* %n151, i64 0, i64 1
  %80 = load i64, i64* %arrayidx152, align 8
  %and153 = and i64 %80, 15
  %shl154 = shl i64 %and153, 4
  %or155 = or i64 %and150, %shl154
  %conv156 = trunc i64 %or155 to i8
  %81 = load i8*, i8** %r.addr, align 8
  %arrayidx157 = getelementptr inbounds i8, i8* %81, i64 25
  store i8 %conv156, i8* %arrayidx157, align 1
  %82 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n158 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %82, i32 0, i32 0
  %arrayidx159 = getelementptr inbounds [5 x i64], [5 x i64]* %n158, i64 0, i64 0
  %83 = load i64, i64* %arrayidx159, align 8
  %shr160 = lshr i64 %83, 40
  %and161 = and i64 %shr160, 255
  %conv162 = trunc i64 %and161 to i8
  %84 = load i8*, i8** %r.addr, align 8
  %arrayidx163 = getelementptr inbounds i8, i8* %84, i64 26
  store i8 %conv162, i8* %arrayidx163, align 1
  %85 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n164 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %85, i32 0, i32 0
  %arrayidx165 = getelementptr inbounds [5 x i64], [5 x i64]* %n164, i64 0, i64 0
  %86 = load i64, i64* %arrayidx165, align 8
  %shr166 = lshr i64 %86, 32
  %and167 = and i64 %shr166, 255
  %conv168 = trunc i64 %and167 to i8
  %87 = load i8*, i8** %r.addr, align 8
  %arrayidx169 = getelementptr inbounds i8, i8* %87, i64 27
  store i8 %conv168, i8* %arrayidx169, align 1
  %88 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n170 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %88, i32 0, i32 0
  %arrayidx171 = getelementptr inbounds [5 x i64], [5 x i64]* %n170, i64 0, i64 0
  %89 = load i64, i64* %arrayidx171, align 8
  %shr172 = lshr i64 %89, 24
  %and173 = and i64 %shr172, 255
  %conv174 = trunc i64 %and173 to i8
  %90 = load i8*, i8** %r.addr, align 8
  %arrayidx175 = getelementptr inbounds i8, i8* %90, i64 28
  store i8 %conv174, i8* %arrayidx175, align 1
  %91 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n176 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %91, i32 0, i32 0
  %arrayidx177 = getelementptr inbounds [5 x i64], [5 x i64]* %n176, i64 0, i64 0
  %92 = load i64, i64* %arrayidx177, align 8
  %shr178 = lshr i64 %92, 16
  %and179 = and i64 %shr178, 255
  %conv180 = trunc i64 %and179 to i8
  %93 = load i8*, i8** %r.addr, align 8
  %arrayidx181 = getelementptr inbounds i8, i8* %93, i64 29
  store i8 %conv180, i8* %arrayidx181, align 1
  %94 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n182 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %94, i32 0, i32 0
  %arrayidx183 = getelementptr inbounds [5 x i64], [5 x i64]* %n182, i64 0, i64 0
  %95 = load i64, i64* %arrayidx183, align 8
  %shr184 = lshr i64 %95, 8
  %and185 = and i64 %shr184, 255
  %conv186 = trunc i64 %and185 to i8
  %96 = load i8*, i8** %r.addr, align 8
  %arrayidx187 = getelementptr inbounds i8, i8* %96, i64 30
  store i8 %conv186, i8* %arrayidx187, align 1
  %97 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n188 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %97, i32 0, i32 0
  %arrayidx189 = getelementptr inbounds [5 x i64], [5 x i64]* %n188, i64 0, i64 0
  %98 = load i64, i64* %arrayidx189, align 8
  %and190 = and i64 %98, 255
  %conv191 = trunc i64 %and190 to i8
  %99 = load i8*, i8** %r.addr, align 8
  %arrayidx192 = getelementptr inbounds i8, i8* %99, i64 31
  store i8 %conv191, i8* %arrayidx192, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_der_read_len(i64* noundef %len, i8** noundef %sigp, i8* noundef %sigend) #0 {
entry:
  %retval = alloca i32, align 4
  %len.addr = alloca i64*, align 8
  %sigp.addr = alloca i8**, align 8
  %sigend.addr = alloca i8*, align 8
  %lenleft = alloca i64, align 8
  %b1 = alloca i8, align 1
  store i64* %len, i64** %len.addr, align 8
  store i8** %sigp, i8*** %sigp.addr, align 8
  store i8* %sigend, i8** %sigend.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64*, i64** %len.addr, align 8
  %cmp = icmp ne i64* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i64*, i64** %len.addr, align 8
  store i64 0, i64* %1, align 8
  %2 = load i8**, i8*** %sigp.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8*, i8** %sigend.addr, align 8
  %cmp1 = icmp uge i8* %3, %4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load i8**, i8*** %sigp.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %5, align 8
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %b1, align 1
  %8 = load i8, i8* %b1, align 1
  %conv3 = zext i8 %8 to i32
  %cmp4 = icmp eq i32 %conv3, 255
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end
  %9 = load i8, i8* %b1, align 1
  %conv8 = zext i8 %9 to i32
  %and = and i32 %conv8, 128
  %cmp9 = icmp eq i32 %and, 0
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end7
  %10 = load i8, i8* %b1, align 1
  %conv12 = zext i8 %10 to i64
  %11 = load i64*, i64** %len.addr, align 8
  store i64 %conv12, i64* %11, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end7
  %12 = load i8, i8* %b1, align 1
  %conv14 = zext i8 %12 to i32
  %cmp15 = icmp eq i32 %conv14, 128
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end13
  %13 = load i8, i8* %b1, align 1
  %conv19 = zext i8 %13 to i32
  %and20 = and i32 %conv19, 127
  %conv21 = sext i32 %and20 to i64
  store i64 %conv21, i64* %lenleft, align 8
  %14 = load i64, i64* %lenleft, align 8
  %15 = load i8*, i8** %sigend.addr, align 8
  %16 = load i8**, i8*** %sigp.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp22 = icmp ugt i64 %14, %sub.ptr.sub
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end18
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.end18
  %18 = load i8**, i8*** %sigp.addr, align 8
  %19 = load i8*, i8** %18, align 8
  %20 = load i8, i8* %19, align 1
  %conv26 = zext i8 %20 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end25
  store i32 0, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end25
  %21 = load i64, i64* %lenleft, align 8
  %cmp31 = icmp ugt i64 %21, 8
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end30
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end34
  %22 = load i64, i64* %lenleft, align 8
  %cmp35 = icmp ugt i64 %22, 0
  br i1 %cmp35, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %23 = load i64*, i64** %len.addr, align 8
  %24 = load i64, i64* %23, align 8
  %shl = shl i64 %24, 8
  %25 = load i8**, i8*** %sigp.addr, align 8
  %26 = load i8*, i8** %25, align 8
  %27 = load i8, i8* %26, align 1
  %conv37 = zext i8 %27 to i64
  %or = or i64 %shl, %conv37
  %28 = load i64*, i64** %len.addr, align 8
  store i64 %or, i64* %28, align 8
  %29 = load i8**, i8*** %sigp.addr, align 8
  %30 = load i8*, i8** %29, align 8
  %incdec.ptr38 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr38, i8** %29, align 8
  %31 = load i64, i64* %lenleft, align 8
  %dec = add i64 %31, -1
  store i64 %dec, i64* %lenleft, align 8
  br label %while.cond, !llvm.loop !26

while.end:                                        ; preds = %while.cond
  %32 = load i64*, i64** %len.addr, align 8
  %33 = load i64, i64* %32, align 8
  %34 = load i8*, i8** %sigend.addr, align 8
  %35 = load i8**, i8*** %sigp.addr, align 8
  %36 = load i8*, i8** %35, align 8
  %sub.ptr.lhs.cast39 = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast40 = ptrtoint i8* %36 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %cmp42 = icmp ugt i64 %33, %sub.ptr.sub41
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %while.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %while.end
  %37 = load i64*, i64** %len.addr, align 8
  %38 = load i64, i64* %37, align 8
  %cmp46 = icmp ult i64 %38, 128
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end45
  store i32 0, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %if.end45
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end49, %if.then48, %if.then44, %if.then33, %if.then29, %if.then24, %if.then17, %if.then11, %if.then6, %if.then
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_der_parse_integer(%struct.secp256k1_scalar* noundef %r, i8** noundef %sig, i8* noundef %sigend) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %sig.addr = alloca i8**, align 8
  %sigend.addr = alloca i8*, align 8
  %overflow = alloca i32, align 4
  %ra = alloca [32 x i8], align 16
  %rlen = alloca i64, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i8** %sig, i8*** %sig.addr, align 8
  store i8* %sigend, i8** %sigend.addr, align 8
  store i32 0, i32* %overflow, align 4
  %0 = bitcast [32 x i8]* %ra to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 32, i1 false)
  %1 = load i8**, i8*** %sig.addr, align 8
  %2 = load i8*, i8** %1, align 8
  %3 = load i8*, i8** %sigend.addr, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8**, i8*** %sig.addr, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  %cmp1 = icmp ne i32 %conv, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i8**, i8*** %sig.addr, align 8
  %8 = load i8*, i8** %7, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %7, align 8
  %9 = load i8**, i8*** %sig.addr, align 8
  %10 = load i8*, i8** %sigend.addr, align 8
  %call = call i32 @secp256k1_der_read_len(i64* noundef %rlen, i8** noundef %9, i8* noundef %10)
  %cmp3 = icmp eq i32 %call, 0
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %11 = load i64, i64* %rlen, align 8
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %if.then12, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %if.end6
  %12 = load i64, i64* %rlen, align 8
  %13 = load i8*, i8** %sigend.addr, align 8
  %14 = load i8**, i8*** %sig.addr, align 8
  %15 = load i8*, i8** %14, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp10 = icmp ugt i64 %12, %sub.ptr.sub
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false9, %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %lor.lhs.false9
  %16 = load i8**, i8*** %sig.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %18 = load i8, i8* %17, align 1
  %conv14 = zext i8 %18 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end13
  %19 = load i64, i64* %rlen, align 8
  %cmp17 = icmp ugt i64 %19, 1
  br i1 %cmp17, label %land.lhs.true19, label %if.end24

land.lhs.true19:                                  ; preds = %land.lhs.true
  %20 = load i8**, i8*** %sig.addr, align 8
  %21 = load i8*, i8** %20, align 8
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx, align 1
  %conv20 = zext i8 %22 to i32
  %and = and i32 %conv20, 128
  %cmp21 = icmp eq i32 %and, 0
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true19
  store i32 0, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %land.lhs.true19, %land.lhs.true, %if.end13
  %23 = load i8**, i8*** %sig.addr, align 8
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 1
  %conv25 = zext i8 %25 to i32
  %cmp26 = icmp eq i32 %conv25, 255
  br i1 %cmp26, label %land.lhs.true28, label %if.end38

land.lhs.true28:                                  ; preds = %if.end24
  %26 = load i64, i64* %rlen, align 8
  %cmp29 = icmp ugt i64 %26, 1
  br i1 %cmp29, label %land.lhs.true31, label %if.end38

land.lhs.true31:                                  ; preds = %land.lhs.true28
  %27 = load i8**, i8*** %sig.addr, align 8
  %28 = load i8*, i8** %27, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %29 to i32
  %and34 = and i32 %conv33, 128
  %cmp35 = icmp eq i32 %and34, 128
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %land.lhs.true31
  store i32 0, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %land.lhs.true31, %land.lhs.true28, %if.end24
  %30 = load i8**, i8*** %sig.addr, align 8
  %31 = load i8*, i8** %30, align 8
  %32 = load i8, i8* %31, align 1
  %conv39 = zext i8 %32 to i32
  %and40 = and i32 %conv39, 128
  %cmp41 = icmp eq i32 %and40, 128
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end38
  store i32 1, i32* %overflow, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end38
  %33 = load i64, i64* %rlen, align 8
  %cmp45 = icmp ugt i64 %33, 0
  br i1 %cmp45, label %land.lhs.true47, label %if.end53

land.lhs.true47:                                  ; preds = %if.end44
  %34 = load i8**, i8*** %sig.addr, align 8
  %35 = load i8*, i8** %34, align 8
  %36 = load i8, i8* %35, align 1
  %conv48 = zext i8 %36 to i32
  %cmp49 = icmp eq i32 %conv48, 0
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %land.lhs.true47
  %37 = load i64, i64* %rlen, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %rlen, align 8
  %38 = load i8**, i8*** %sig.addr, align 8
  %39 = load i8*, i8** %38, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr52, i8** %38, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %land.lhs.true47, %if.end44
  %40 = load i64, i64* %rlen, align 8
  %cmp54 = icmp ugt i64 %40, 32
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.end53
  store i32 1, i32* %overflow, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.end53
  %41 = load i32, i32* %overflow, align 4
  %tobool = icmp ne i32 %41, 0
  br i1 %tobool, label %if.end64, label %if.then58

if.then58:                                        ; preds = %if.end57
  %42 = load i64, i64* %rlen, align 8
  %tobool59 = icmp ne i64 %42, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %if.then58
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %ra, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 32
  %43 = load i64, i64* %rlen, align 8
  %idx.neg = sub i64 0, %43
  %add.ptr61 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %44 = load i8**, i8*** %sig.addr, align 8
  %45 = load i8*, i8** %44, align 8
  %46 = load i64, i64* %rlen, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr61, i8* align 1 %45, i64 %46, i1 false)
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %if.then58
  %47 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %arraydecay63 = getelementptr inbounds [32 x i8], [32 x i8]* %ra, i64 0, i64 0
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %47, i8* noundef %arraydecay63, i32* noundef %overflow)
  br label %if.end64

if.end64:                                         ; preds = %if.end62, %if.end57
  %48 = load i32, i32* %overflow, align 4
  %tobool65 = icmp ne i32 %48, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end64
  %49 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  call void @secp256k1_scalar_set_int(%struct.secp256k1_scalar* noundef %49, i32 noundef 0)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end64
  %50 = load i64, i64* %rlen, align 8
  %51 = load i8**, i8*** %sig.addr, align 8
  %52 = load i8*, i8** %51, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %52, i64 %50
  store i8* %add.ptr68, i8** %51, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end67, %if.then37, %if.then23, %if.then12, %if.then5, %if.then
  %53 = load i32, i32* %retval, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_set_int(%struct.secp256k1_scalar* noundef %r, i32 noundef %v) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %v.addr = alloca i32, align 4
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %conv = zext i32 %0 to i64
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 %conv, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 1
  store i64 0, i64* %arrayidx2, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 2
  store i64 0, i64* %arrayidx4, align 8
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 3
  store i64 0, i64* %arrayidx6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_reduce(%struct.secp256k1_scalar* noundef %r, i32 noundef %overflow) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %overflow.addr = alloca i32, align 4
  %t = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i32 %overflow, i32* %overflow.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %overflow.addr, align 4
  %cmp = icmp ule i32 %0, 1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  call void @secp256k1_u128_from_u64(i128* noundef %t, i64 noundef %2)
  %3 = load i32, i32* %overflow.addr, align 4
  %conv1 = zext i32 %3 to i64
  %mul = mul i64 %conv1, 4624529908474429119
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %mul)
  %call = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d2 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [4 x i64], [4 x i64]* %d2, i64 0, i64 0
  store i64 %call, i64* %arrayidx3, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d4 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %5, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [4 x i64], [4 x i64]* %d4, i64 0, i64 1
  %6 = load i64, i64* %arrayidx5, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %6)
  %7 = load i32, i32* %overflow.addr, align 4
  %conv6 = zext i32 %7 to i64
  %mul7 = mul i64 %conv6, 4994812053365940164
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %mul7)
  %call8 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d9 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [4 x i64], [4 x i64]* %d9, i64 0, i64 1
  store i64 %call8, i64* %arrayidx10, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d11 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %9, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x i64], [4 x i64]* %d11, i64 0, i64 2
  %10 = load i64, i64* %arrayidx12, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %10)
  %11 = load i32, i32* %overflow.addr, align 4
  %mul13 = mul i32 %11, 1
  %conv14 = zext i32 %mul13 to i64
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %conv14)
  %call15 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d16 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [4 x i64], [4 x i64]* %d16, i64 0, i64 2
  store i64 %call15, i64* %arrayidx17, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d18 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [4 x i64], [4 x i64]* %d18, i64 0, i64 3
  %14 = load i64, i64* %arrayidx19, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %14)
  %call20 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d21 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x i64], [4 x i64]* %d21, i64 0, i64 3
  store i64 %call20, i64* %arrayidx22, align 8
  %16 = load i32, i32* %overflow.addr, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_check_overflow(%struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %yes = alloca i32, align 4
  %no = alloca i32, align 4
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 0, i32* %yes, align 4
  store i32 0, i32* %no, align 4
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 3
  %1 = load i64, i64* %arrayidx, align 8
  %cmp = icmp ult i64 %1, -1
  %conv = zext i1 %cmp to i32
  %2 = load i32, i32* %no, align 4
  %or = or i32 %2, %conv
  store i32 %or, i32* %no, align 4
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 2
  %4 = load i64, i64* %arrayidx2, align 8
  %cmp3 = icmp ult i64 %4, -2
  %conv4 = zext i1 %cmp3 to i32
  %5 = load i32, i32* %no, align 4
  %or5 = or i32 %5, %conv4
  store i32 %or5, i32* %no, align 4
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d6 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %d6, i64 0, i64 2
  %7 = load i64, i64* %arrayidx7, align 8
  %cmp8 = icmp ugt i64 %7, -2
  %conv9 = zext i1 %cmp8 to i32
  %8 = load i32, i32* %no, align 4
  %neg = xor i32 %8, -1
  %and = and i32 %conv9, %neg
  %9 = load i32, i32* %yes, align 4
  %or10 = or i32 %9, %and
  store i32 %or10, i32* %yes, align 4
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d11 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %10, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x i64], [4 x i64]* %d11, i64 0, i64 1
  %11 = load i64, i64* %arrayidx12, align 8
  %cmp13 = icmp ult i64 %11, -4994812053365940165
  %conv14 = zext i1 %cmp13 to i32
  %12 = load i32, i32* %no, align 4
  %or15 = or i32 %12, %conv14
  store i32 %or15, i32* %no, align 4
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d16 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [4 x i64], [4 x i64]* %d16, i64 0, i64 1
  %14 = load i64, i64* %arrayidx17, align 8
  %cmp18 = icmp ugt i64 %14, -4994812053365940165
  %conv19 = zext i1 %cmp18 to i32
  %15 = load i32, i32* %no, align 4
  %neg20 = xor i32 %15, -1
  %and21 = and i32 %conv19, %neg20
  %16 = load i32, i32* %yes, align 4
  %or22 = or i32 %16, %and21
  store i32 %or22, i32* %yes, align 4
  %17 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d23 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %17, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds [4 x i64], [4 x i64]* %d23, i64 0, i64 0
  %18 = load i64, i64* %arrayidx24, align 8
  %cmp25 = icmp uge i64 %18, -4624529908474429119
  %conv26 = zext i1 %cmp25 to i32
  %19 = load i32, i32* %no, align 4
  %neg27 = xor i32 %19, -1
  %and28 = and i32 %conv26, %neg27
  %20 = load i32, i32* %yes, align 4
  %or29 = or i32 %20, %and28
  store i32 %or29, i32* %yes, align 4
  %21 = load i32, i32* %yes, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_u128_from_u64(i128* noundef %r, i64 noundef %a) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = zext i64 %0 to i128
  %1 = load i128*, i128** %r.addr, align 8
  store i128 %conv, i128* %1, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  %or = or i64 %1, %3
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  %or5 = or i64 %or, %5
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d6 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %d6, i64 0, i64 3
  %7 = load i64, i64* %arrayidx7, align 8
  %or8 = or i64 %or5, %7
  %cmp = icmp eq i64 %or8, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_inverse_var(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %x) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %x.addr = alloca %struct.secp256k1_scalar*, align 8
  %s = alloca %struct.secp256k1_modinv64_signed62, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %x, %struct.secp256k1_scalar** %x.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %x.addr, align 8
  call void @secp256k1_scalar_to_signed62(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_scalar* noundef %0)
  call void @secp256k1_modinv64_var(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_modinv64_modinfo* noundef @secp256k1_const_modinfo_scalar)
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  call void @secp256k1_scalar_from_signed62(%struct.secp256k1_scalar* noundef %1, %struct.secp256k1_modinv64_signed62* noundef %s)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %a, %struct.secp256k1_scalar* noundef %b) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %b.addr = alloca %struct.secp256k1_scalar*, align 8
  %l = alloca [8 x i64], align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store %struct.secp256k1_scalar* %b, %struct.secp256k1_scalar** %b.addr, align 8
  %arraydecay = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 0
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  call void @secp256k1_scalar_mul_512(i64* noundef %arraydecay, %struct.secp256k1_scalar* noundef %0, %struct.secp256k1_scalar* noundef %1)
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %arraydecay1 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 0
  call void @secp256k1_scalar_reduce_512(%struct.secp256k1_scalar* noundef %2, i64* noundef %arraydecay1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_ge* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %0, i32 0, i32 2
  %1 = load i32, i32* %infinity, align 8
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 3
  store i32 %1, i32* %infinity1, align 8
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 0
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %x2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 0
  %5 = bitcast %struct.secp256k1_fe* %x to i8*
  %6 = bitcast %struct.secp256k1_fe* %x2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 40, i1 false)
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 1
  %8 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %y3 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %8, i32 0, i32 1
  %9 = bitcast %struct.secp256k1_fe* %y to i8*
  %10 = bitcast %struct.secp256k1_fe* %y3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %11, i32 0, i32 2
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %z, i32 noundef 1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_scalar* noundef %na, %struct.secp256k1_scalar* noundef %ng) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %na.addr = alloca %struct.secp256k1_scalar*, align 8
  %ng.addr = alloca %struct.secp256k1_scalar*, align 8
  %aux = alloca [8 x %struct.secp256k1_fe], align 16
  %pre_a = alloca [8 x %struct.secp256k1_ge], align 16
  %ps = alloca [1 x %struct.secp256k1_strauss_point_state], align 16
  %state = alloca %struct.secp256k1_strauss_state, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_scalar* %na, %struct.secp256k1_scalar** %na.addr, align 8
  store %struct.secp256k1_scalar* %ng, %struct.secp256k1_scalar** %ng.addr, align 8
  %arraydecay = getelementptr inbounds [8 x %struct.secp256k1_fe], [8 x %struct.secp256k1_fe]* %aux, i64 0, i64 0
  %aux1 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %state, i32 0, i32 0
  store %struct.secp256k1_fe* %arraydecay, %struct.secp256k1_fe** %aux1, align 8
  %arraydecay2 = getelementptr inbounds [8 x %struct.secp256k1_ge], [8 x %struct.secp256k1_ge]* %pre_a, i64 0, i64 0
  %pre_a3 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %state, i32 0, i32 1
  store %struct.secp256k1_ge* %arraydecay2, %struct.secp256k1_ge** %pre_a3, align 8
  %arraydecay4 = getelementptr inbounds [1 x %struct.secp256k1_strauss_point_state], [1 x %struct.secp256k1_strauss_point_state]* %ps, i64 0, i64 0
  %ps5 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %state, i32 0, i32 2
  store %struct.secp256k1_strauss_point_state* %arraydecay4, %struct.secp256k1_strauss_point_state** %ps5, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %1 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %na.addr, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %ng.addr, align 8
  call void @secp256k1_ecmult_strauss_wnaf(%struct.secp256k1_strauss_state* noundef %state, %struct.secp256k1_gej* noundef %0, i64 noundef 1, %struct.secp256k1_gej* noundef %1, %struct.secp256k1_scalar* noundef %2, %struct.secp256k1_scalar* noundef %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_gej_eq_x_var(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_gej* noundef %a) #0 {
entry:
  %x.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %r = alloca %struct.secp256k1_fe, align 8
  %r2 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_fe* %x, %struct.secp256k1_fe** %x.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 2
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %z)
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %3)
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 0
  %5 = bitcast %struct.secp256k1_fe* %r2 to i8*
  %6 = bitcast %struct.secp256k1_fe* %x1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %r2)
  %call = call i32 @secp256k1_fe_equal_var(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %r2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_fe_cmp_var(%struct.secp256k1_fe* noundef %a, %struct.secp256k1_fe* noundef %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %b.addr = alloca %struct.secp256k1_fe*, align 8
  %i = alloca i32, align 4
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store %struct.secp256k1_fe* %b, %struct.secp256k1_fe** %b.addr, align 8
  store i32 4, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %b.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 %idxprom2
  %6 = load i64, i64* %arrayidx3, align 8
  %cmp4 = icmp ugt i64 %3, %6
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 %idxprom6
  %9 = load i64, i64* %arrayidx7, align 8
  %10 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %b.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %10, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 %idxprom9
  %12 = load i64, i64* %arrayidx10, align 8
  %cmp11 = icmp ult i64 %9, %12
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %13 = load i32, i32* %i, align 4
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond, !llvm.loop !27

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then12, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_to_signed62(%struct.secp256k1_modinv64_signed62* noundef %r, %struct.secp256k1_scalar* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %M62 = alloca i64, align 8
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  store %struct.secp256k1_modinv64_signed62* %r, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load i64, i64* %a0, align 8
  %and = and i64 %8, 4611686018427387903
  %9 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %9, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  store i64 %and, i64* %arrayidx7, align 8
  %10 = load i64, i64* %a0, align 8
  %shr = lshr i64 %10, 62
  %11 = load i64, i64* %a1, align 8
  %shl = shl i64 %11, 2
  %or = or i64 %shr, %shl
  %and8 = and i64 %or, 4611686018427387903
  %12 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v9 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %12, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %v9, i64 0, i64 1
  store i64 %and8, i64* %arrayidx10, align 8
  %13 = load i64, i64* %a1, align 8
  %shr11 = lshr i64 %13, 60
  %14 = load i64, i64* %a2, align 8
  %shl12 = shl i64 %14, 4
  %or13 = or i64 %shr11, %shl12
  %and14 = and i64 %or13, 4611686018427387903
  %15 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v15 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %15, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [5 x i64], [5 x i64]* %v15, i64 0, i64 2
  store i64 %and14, i64* %arrayidx16, align 8
  %16 = load i64, i64* %a2, align 8
  %shr17 = lshr i64 %16, 58
  %17 = load i64, i64* %a3, align 8
  %shl18 = shl i64 %17, 6
  %or19 = or i64 %shr17, %shl18
  %and20 = and i64 %or19, 4611686018427387903
  %18 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v21 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %18, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [5 x i64], [5 x i64]* %v21, i64 0, i64 3
  store i64 %and20, i64* %arrayidx22, align 8
  %19 = load i64, i64* %a3, align 8
  %shr23 = lshr i64 %19, 56
  %20 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v24 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %20, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [5 x i64], [5 x i64]* %v24, i64 0, i64 4
  store i64 %shr23, i64* %arrayidx25, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64_var(%struct.secp256k1_modinv64_signed62* noundef %x, %struct.secp256k1_modinv64_modinfo* noundef %modinfo) #0 {
entry:
  %x.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %modinfo.addr = alloca %struct.secp256k1_modinv64_modinfo*, align 8
  %d = alloca %struct.secp256k1_modinv64_signed62, align 8
  %e = alloca %struct.secp256k1_modinv64_signed62, align 8
  %f = alloca %struct.secp256k1_modinv64_signed62, align 8
  %g = alloca %struct.secp256k1_modinv64_signed62, align 8
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %eta = alloca i64, align 8
  %cond = alloca i64, align 8
  %fn = alloca i64, align 8
  %gn = alloca i64, align 8
  %t = alloca %struct.secp256k1_modinv64_trans2x2, align 8
  store %struct.secp256k1_modinv64_signed62* %x, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  store %struct.secp256k1_modinv64_modinfo* %modinfo, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %0 = bitcast %struct.secp256k1_modinv64_signed62* %d to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 40, i1 false)
  %1 = bitcast %struct.secp256k1_modinv64_signed62* %e to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false)
  %2 = bitcast i8* %1 to %struct.secp256k1_modinv64_signed62*
  %3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %4 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i32 0, i32 0
  store i64 1, i64* %4, align 8
  %5 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %5, i32 0, i32 0
  %6 = bitcast %struct.secp256k1_modinv64_signed62* %f to i8*
  %7 = bitcast %struct.secp256k1_modinv64_signed62* %modulus to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 40, i1 false)
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  %9 = bitcast %struct.secp256k1_modinv64_signed62* %g to i8*
  %10 = bitcast %struct.secp256k1_modinv64_signed62* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  store i32 5, i32* %len, align 4
  store i64 -1, i64* %eta, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %if.end38
  %11 = load i64, i64* %eta, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %12 = load i64, i64* %arrayidx, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 0
  %13 = load i64, i64* %arrayidx2, align 8
  %call = call i64 @secp256k1_modinv64_divsteps_62_var(i64 noundef %11, i64 noundef %12, i64 noundef %13, %struct.secp256k1_modinv64_trans2x2* noundef %t)
  store i64 %call, i64* %eta, align 8
  %14 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  call void @secp256k1_modinv64_update_de_62(%struct.secp256k1_modinv64_signed62* noundef %d, %struct.secp256k1_modinv64_signed62* noundef %e, %struct.secp256k1_modinv64_trans2x2* noundef %t, %struct.secp256k1_modinv64_modinfo* noundef %14)
  %15 = load i32, i32* %len, align 4
  call void @secp256k1_modinv64_update_fg_62_var(i32 noundef %15, %struct.secp256k1_modinv64_signed62* noundef %f, %struct.secp256k1_modinv64_signed62* noundef %g, %struct.secp256k1_modinv64_trans2x2* noundef %t)
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 0
  %16 = load i64, i64* %arrayidx4, align 8
  %cmp = icmp eq i64 %16, 0
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %while.body
  store i64 0, i64* %cond, align 8
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len, align 4
  %cmp5 = icmp slt i32 %17, %18
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %v6 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %19 = load i32, i32* %j, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %v6, i64 0, i64 %idxprom
  %20 = load i64, i64* %arrayidx7, align 8
  %21 = load i64, i64* %cond, align 8
  %or = or i64 %21, %20
  store i64 %or, i64* %cond, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond, !llvm.loop !28

for.end:                                          ; preds = %for.cond
  %23 = load i64, i64* %cond, align 8
  %cmp8 = icmp eq i64 %23, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %for.end
  br label %while.end

if.end:                                           ; preds = %for.end
  br label %if.end10

if.end10:                                         ; preds = %if.end, %while.body
  %v11 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %24 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %24, 1
  %idxprom12 = sext i32 %sub to i64
  %arrayidx13 = getelementptr inbounds [5 x i64], [5 x i64]* %v11, i64 0, i64 %idxprom12
  %25 = load i64, i64* %arrayidx13, align 8
  store i64 %25, i64* %fn, align 8
  %v14 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %26 = load i32, i32* %len, align 4
  %sub15 = sub nsw i32 %26, 1
  %idxprom16 = sext i32 %sub15 to i64
  %arrayidx17 = getelementptr inbounds [5 x i64], [5 x i64]* %v14, i64 0, i64 %idxprom16
  %27 = load i64, i64* %arrayidx17, align 8
  store i64 %27, i64* %gn, align 8
  %28 = load i32, i32* %len, align 4
  %conv = sext i32 %28 to i64
  %sub18 = sub nsw i64 %conv, 2
  %shr = ashr i64 %sub18, 63
  store i64 %shr, i64* %cond, align 8
  %29 = load i64, i64* %fn, align 8
  %30 = load i64, i64* %fn, align 8
  %shr19 = ashr i64 %30, 63
  %xor = xor i64 %29, %shr19
  %31 = load i64, i64* %cond, align 8
  %or20 = or i64 %31, %xor
  store i64 %or20, i64* %cond, align 8
  %32 = load i64, i64* %gn, align 8
  %33 = load i64, i64* %gn, align 8
  %shr21 = ashr i64 %33, 63
  %xor22 = xor i64 %32, %shr21
  %34 = load i64, i64* %cond, align 8
  %or23 = or i64 %34, %xor22
  store i64 %or23, i64* %cond, align 8
  %35 = load i64, i64* %cond, align 8
  %cmp24 = icmp eq i64 %35, 0
  br i1 %cmp24, label %if.then26, label %if.end38

if.then26:                                        ; preds = %if.end10
  %36 = load i64, i64* %fn, align 8
  %shl = shl i64 %36, 62
  %v27 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %37 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %37, 2
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [5 x i64], [5 x i64]* %v27, i64 0, i64 %idxprom29
  %38 = load i64, i64* %arrayidx30, align 8
  %or31 = or i64 %38, %shl
  store i64 %or31, i64* %arrayidx30, align 8
  %39 = load i64, i64* %gn, align 8
  %shl32 = shl i64 %39, 62
  %v33 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %40 = load i32, i32* %len, align 4
  %sub34 = sub nsw i32 %40, 2
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds [5 x i64], [5 x i64]* %v33, i64 0, i64 %idxprom35
  %41 = load i64, i64* %arrayidx36, align 8
  %or37 = or i64 %41, %shl32
  store i64 %or37, i64* %arrayidx36, align 8
  %42 = load i32, i32* %len, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %len, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then26, %if.end10
  br label %while.body

while.end:                                        ; preds = %if.then9
  %v39 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %43 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %43, 1
  %idxprom41 = sext i32 %sub40 to i64
  %arrayidx42 = getelementptr inbounds [5 x i64], [5 x i64]* %v39, i64 0, i64 %idxprom41
  %44 = load i64, i64* %arrayidx42, align 8
  %45 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  call void @secp256k1_modinv64_normalize_62(%struct.secp256k1_modinv64_signed62* noundef %d, i64 noundef %44, %struct.secp256k1_modinv64_modinfo* noundef %45)
  %46 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  %47 = bitcast %struct.secp256k1_modinv64_signed62* %46 to i8*
  %48 = bitcast %struct.secp256k1_modinv64_signed62* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 40, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_from_signed62(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_modinv64_signed62* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  %a4 = alloca i64, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_modinv64_signed62* %a, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %0 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v7 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %v7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %a4, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %10 = load i64, i64* %a0, align 8
  %shr = lshr i64 %10, 62
  %cmp = icmp eq i64 %shr, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body9

do.body9:                                         ; preds = %do.end
  %11 = load i64, i64* %a1, align 8
  %shr10 = lshr i64 %11, 62
  %cmp11 = icmp eq i64 %shr10, 0
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body9
  br label %do.body14

do.body14:                                        ; preds = %do.end13
  %12 = load i64, i64* %a2, align 8
  %shr15 = lshr i64 %12, 62
  %cmp16 = icmp eq i64 %shr15, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %do.end18

do.end18:                                         ; preds = %do.body14
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  %13 = load i64, i64* %a3, align 8
  %shr20 = lshr i64 %13, 62
  %cmp21 = icmp eq i64 %shr20, 0
  %conv22 = zext i1 %cmp21 to i32
  br label %do.end23

do.end23:                                         ; preds = %do.body19
  br label %do.body24

do.body24:                                        ; preds = %do.end23
  %14 = load i64, i64* %a4, align 8
  %shr25 = lshr i64 %14, 8
  %cmp26 = icmp eq i64 %shr25, 0
  %conv27 = zext i1 %cmp26 to i32
  br label %do.end28

do.end28:                                         ; preds = %do.body24
  %15 = load i64, i64* %a0, align 8
  %16 = load i64, i64* %a1, align 8
  %shl = shl i64 %16, 62
  %or = or i64 %15, %shl
  %17 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %17, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 %or, i64* %arrayidx29, align 8
  %18 = load i64, i64* %a1, align 8
  %shr30 = lshr i64 %18, 2
  %19 = load i64, i64* %a2, align 8
  %shl31 = shl i64 %19, 60
  %or32 = or i64 %shr30, %shl31
  %20 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d33 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %20, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [4 x i64], [4 x i64]* %d33, i64 0, i64 1
  store i64 %or32, i64* %arrayidx34, align 8
  %21 = load i64, i64* %a2, align 8
  %shr35 = lshr i64 %21, 4
  %22 = load i64, i64* %a3, align 8
  %shl36 = shl i64 %22, 58
  %or37 = or i64 %shr35, %shl36
  %23 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d38 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %23, i32 0, i32 0
  %arrayidx39 = getelementptr inbounds [4 x i64], [4 x i64]* %d38, i64 0, i64 2
  store i64 %or37, i64* %arrayidx39, align 8
  %24 = load i64, i64* %a3, align 8
  %shr40 = lshr i64 %24, 6
  %25 = load i64, i64* %a4, align 8
  %shl41 = shl i64 %25, 56
  %or42 = or i64 %shr40, %shl41
  %26 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d43 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %26, i32 0, i32 0
  %arrayidx44 = getelementptr inbounds [4 x i64], [4 x i64]* %d43, i64 0, i64 3
  store i64 %or42, i64* %arrayidx44, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @secp256k1_modinv64_divsteps_62_var(i64 noundef %eta, i64 noundef %f0, i64 noundef %g0, %struct.secp256k1_modinv64_trans2x2* noundef %t) #0 {
entry:
  %eta.addr = alloca i64, align 8
  %f0.addr = alloca i64, align 8
  %g0.addr = alloca i64, align 8
  %t.addr = alloca %struct.secp256k1_modinv64_trans2x2*, align 8
  %u = alloca i64, align 8
  %v = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %f = alloca i64, align 8
  %g = alloca i64, align 8
  %m = alloca i64, align 8
  %w = alloca i32, align 4
  %i = alloca i32, align 4
  %limit = alloca i32, align 4
  %zeros = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i64 %eta, i64* %eta.addr, align 8
  store i64 %f0, i64* %f0.addr, align 8
  store i64 %g0, i64* %g0.addr, align 8
  store %struct.secp256k1_modinv64_trans2x2* %t, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  store i64 1, i64* %u, align 8
  store i64 0, i64* %v, align 8
  store i64 0, i64* %q, align 8
  store i64 1, i64* %r, align 8
  %0 = load i64, i64* %f0.addr, align 8
  store i64 %0, i64* %f, align 8
  %1 = load i64, i64* %g0.addr, align 8
  store i64 %1, i64* %g, align 8
  store i32 62, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %do.end118, %entry
  %2 = load i64, i64* %g, align 8
  %3 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %3 to i64
  %shl = shl i64 -1, %sh_prom
  %or = or i64 %2, %shl
  %call = call i32 @secp256k1_ctz64_var(i64 noundef %or)
  store i32 %call, i32* %zeros, align 4
  %4 = load i32, i32* %zeros, align 4
  %5 = load i64, i64* %g, align 8
  %sh_prom1 = zext i32 %4 to i64
  %shr = lshr i64 %5, %sh_prom1
  store i64 %shr, i64* %g, align 8
  %6 = load i32, i32* %zeros, align 4
  %7 = load i64, i64* %u, align 8
  %sh_prom2 = zext i32 %6 to i64
  %shl3 = shl i64 %7, %sh_prom2
  store i64 %shl3, i64* %u, align 8
  %8 = load i32, i32* %zeros, align 4
  %9 = load i64, i64* %v, align 8
  %sh_prom4 = zext i32 %8 to i64
  %shl5 = shl i64 %9, %sh_prom4
  store i64 %shl5, i64* %v, align 8
  %10 = load i32, i32* %zeros, align 4
  %conv = sext i32 %10 to i64
  %11 = load i64, i64* %eta.addr, align 8
  %sub = sub nsw i64 %11, %conv
  store i64 %sub, i64* %eta.addr, align 8
  %12 = load i32, i32* %zeros, align 4
  %13 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %13, %12
  store i32 %sub6, i32* %i, align 4
  %14 = load i32, i32* %i, align 4
  %cmp = icmp eq i32 %14, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %if.end
  %15 = load i64, i64* %f, align 8
  %and = and i64 %15, 1
  %cmp8 = icmp eq i64 %and, 1
  %conv9 = zext i1 %cmp8 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body10

do.body10:                                        ; preds = %do.end
  %16 = load i64, i64* %g, align 8
  %and11 = and i64 %16, 1
  %cmp12 = icmp eq i64 %and11, 1
  %conv13 = zext i1 %cmp12 to i32
  br label %do.end14

do.end14:                                         ; preds = %do.body10
  br label %do.body15

do.body15:                                        ; preds = %do.end14
  %17 = load i64, i64* %u, align 8
  %18 = load i64, i64* %f0.addr, align 8
  %mul = mul i64 %17, %18
  %19 = load i64, i64* %v, align 8
  %20 = load i64, i64* %g0.addr, align 8
  %mul16 = mul i64 %19, %20
  %add = add i64 %mul, %mul16
  %21 = load i64, i64* %f, align 8
  %22 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 62, %22
  %sh_prom18 = zext i32 %sub17 to i64
  %shl19 = shl i64 %21, %sh_prom18
  %cmp20 = icmp eq i64 %add, %shl19
  %conv21 = zext i1 %cmp20 to i32
  br label %do.end22

do.end22:                                         ; preds = %do.body15
  br label %do.body23

do.body23:                                        ; preds = %do.end22
  %23 = load i64, i64* %q, align 8
  %24 = load i64, i64* %f0.addr, align 8
  %mul24 = mul i64 %23, %24
  %25 = load i64, i64* %r, align 8
  %26 = load i64, i64* %g0.addr, align 8
  %mul25 = mul i64 %25, %26
  %add26 = add i64 %mul24, %mul25
  %27 = load i64, i64* %g, align 8
  %28 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 62, %28
  %sh_prom28 = zext i32 %sub27 to i64
  %shl29 = shl i64 %27, %sh_prom28
  %cmp30 = icmp eq i64 %add26, %shl29
  %conv31 = zext i1 %cmp30 to i32
  br label %do.end32

do.end32:                                         ; preds = %do.body23
  br label %do.body33

do.body33:                                        ; preds = %do.end32
  %29 = load i64, i64* %eta.addr, align 8
  %cmp34 = icmp sge i64 %29, -745
  br i1 %cmp34, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body33
  %30 = load i64, i64* %eta.addr, align 8
  %cmp36 = icmp sle i64 %30, 745
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body33
  %31 = phi i1 [ false, %do.body33 ], [ %cmp36, %land.rhs ]
  %land.ext = zext i1 %31 to i32
  br label %do.end38

do.end38:                                         ; preds = %land.end
  %32 = load i64, i64* %eta.addr, align 8
  %cmp39 = icmp slt i64 %32, 0
  br i1 %cmp39, label %if.then41, label %if.else

if.then41:                                        ; preds = %do.end38
  %33 = load i64, i64* %eta.addr, align 8
  %sub42 = sub nsw i64 0, %33
  store i64 %sub42, i64* %eta.addr, align 8
  %34 = load i64, i64* %f, align 8
  store i64 %34, i64* %tmp, align 8
  %35 = load i64, i64* %g, align 8
  store i64 %35, i64* %f, align 8
  %36 = load i64, i64* %tmp, align 8
  %sub43 = sub i64 0, %36
  store i64 %sub43, i64* %g, align 8
  %37 = load i64, i64* %u, align 8
  store i64 %37, i64* %tmp, align 8
  %38 = load i64, i64* %q, align 8
  store i64 %38, i64* %u, align 8
  %39 = load i64, i64* %tmp, align 8
  %sub44 = sub i64 0, %39
  store i64 %sub44, i64* %q, align 8
  %40 = load i64, i64* %v, align 8
  store i64 %40, i64* %tmp, align 8
  %41 = load i64, i64* %r, align 8
  store i64 %41, i64* %v, align 8
  %42 = load i64, i64* %tmp, align 8
  %sub45 = sub i64 0, %42
  store i64 %sub45, i64* %r, align 8
  %43 = load i64, i64* %eta.addr, align 8
  %conv46 = trunc i64 %43 to i32
  %add47 = add nsw i32 %conv46, 1
  %44 = load i32, i32* %i, align 4
  %cmp48 = icmp sgt i32 %add47, %44
  br i1 %cmp48, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then41
  %45 = load i32, i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then41
  %46 = load i64, i64* %eta.addr, align 8
  %conv50 = trunc i64 %46 to i32
  %add51 = add nsw i32 %conv50, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %45, %cond.true ], [ %add51, %cond.false ]
  store i32 %cond, i32* %limit, align 4
  br label %do.body52

do.body52:                                        ; preds = %cond.end
  %47 = load i32, i32* %limit, align 4
  %cmp53 = icmp sgt i32 %47, 0
  br i1 %cmp53, label %land.rhs55, label %land.end58

land.rhs55:                                       ; preds = %do.body52
  %48 = load i32, i32* %limit, align 4
  %cmp56 = icmp sle i32 %48, 62
  br label %land.end58

land.end58:                                       ; preds = %land.rhs55, %do.body52
  %49 = phi i1 [ false, %do.body52 ], [ %cmp56, %land.rhs55 ]
  %land.ext59 = zext i1 %49 to i32
  br label %do.end60

do.end60:                                         ; preds = %land.end58
  %50 = load i32, i32* %limit, align 4
  %sub61 = sub nsw i32 64, %50
  %sh_prom62 = zext i32 %sub61 to i64
  %shr63 = lshr i64 -1, %sh_prom62
  %and64 = and i64 %shr63, 63
  store i64 %and64, i64* %m, align 8
  %51 = load i64, i64* %f, align 8
  %52 = load i64, i64* %g, align 8
  %mul65 = mul i64 %51, %52
  %53 = load i64, i64* %f, align 8
  %54 = load i64, i64* %f, align 8
  %mul66 = mul i64 %53, %54
  %sub67 = sub i64 %mul66, 2
  %mul68 = mul i64 %mul65, %sub67
  %55 = load i64, i64* %m, align 8
  %and69 = and i64 %mul68, %55
  %conv70 = trunc i64 %and69 to i32
  store i32 %conv70, i32* %w, align 4
  br label %if.end104

if.else:                                          ; preds = %do.end38
  %56 = load i64, i64* %eta.addr, align 8
  %conv71 = trunc i64 %56 to i32
  %add72 = add nsw i32 %conv71, 1
  %57 = load i32, i32* %i, align 4
  %cmp73 = icmp sgt i32 %add72, %57
  br i1 %cmp73, label %cond.true75, label %cond.false76

cond.true75:                                      ; preds = %if.else
  %58 = load i32, i32* %i, align 4
  br label %cond.end79

cond.false76:                                     ; preds = %if.else
  %59 = load i64, i64* %eta.addr, align 8
  %conv77 = trunc i64 %59 to i32
  %add78 = add nsw i32 %conv77, 1
  br label %cond.end79

cond.end79:                                       ; preds = %cond.false76, %cond.true75
  %cond80 = phi i32 [ %58, %cond.true75 ], [ %add78, %cond.false76 ]
  store i32 %cond80, i32* %limit, align 4
  br label %do.body81

do.body81:                                        ; preds = %cond.end79
  %60 = load i32, i32* %limit, align 4
  %cmp82 = icmp sgt i32 %60, 0
  br i1 %cmp82, label %land.rhs84, label %land.end87

land.rhs84:                                       ; preds = %do.body81
  %61 = load i32, i32* %limit, align 4
  %cmp85 = icmp sle i32 %61, 62
  br label %land.end87

land.end87:                                       ; preds = %land.rhs84, %do.body81
  %62 = phi i1 [ false, %do.body81 ], [ %cmp85, %land.rhs84 ]
  %land.ext88 = zext i1 %62 to i32
  br label %do.end89

do.end89:                                         ; preds = %land.end87
  %63 = load i32, i32* %limit, align 4
  %sub90 = sub nsw i32 64, %63
  %sh_prom91 = zext i32 %sub90 to i64
  %shr92 = lshr i64 -1, %sh_prom91
  %and93 = and i64 %shr92, 15
  store i64 %and93, i64* %m, align 8
  %64 = load i64, i64* %f, align 8
  %65 = load i64, i64* %f, align 8
  %add94 = add i64 %65, 1
  %and95 = and i64 %add94, 4
  %shl96 = shl i64 %and95, 1
  %add97 = add i64 %64, %shl96
  %conv98 = trunc i64 %add97 to i32
  store i32 %conv98, i32* %w, align 4
  %66 = load i32, i32* %w, align 4
  %sub99 = sub i32 0, %66
  %conv100 = zext i32 %sub99 to i64
  %67 = load i64, i64* %g, align 8
  %mul101 = mul i64 %conv100, %67
  %68 = load i64, i64* %m, align 8
  %and102 = and i64 %mul101, %68
  %conv103 = trunc i64 %and102 to i32
  store i32 %conv103, i32* %w, align 4
  br label %if.end104

if.end104:                                        ; preds = %do.end89, %do.end60
  %69 = load i64, i64* %f, align 8
  %70 = load i32, i32* %w, align 4
  %conv105 = zext i32 %70 to i64
  %mul106 = mul i64 %69, %conv105
  %71 = load i64, i64* %g, align 8
  %add107 = add i64 %71, %mul106
  store i64 %add107, i64* %g, align 8
  %72 = load i64, i64* %u, align 8
  %73 = load i32, i32* %w, align 4
  %conv108 = zext i32 %73 to i64
  %mul109 = mul i64 %72, %conv108
  %74 = load i64, i64* %q, align 8
  %add110 = add i64 %74, %mul109
  store i64 %add110, i64* %q, align 8
  %75 = load i64, i64* %v, align 8
  %76 = load i32, i32* %w, align 4
  %conv111 = zext i32 %76 to i64
  %mul112 = mul i64 %75, %conv111
  %77 = load i64, i64* %r, align 8
  %add113 = add i64 %77, %mul112
  store i64 %add113, i64* %r, align 8
  br label %do.body114

do.body114:                                       ; preds = %if.end104
  %78 = load i64, i64* %g, align 8
  %79 = load i64, i64* %m, align 8
  %and115 = and i64 %78, %79
  %cmp116 = icmp eq i64 %and115, 0
  %conv117 = zext i1 %cmp116 to i32
  br label %do.end118

do.end118:                                        ; preds = %do.body114
  br label %for.cond

for.end:                                          ; preds = %if.then
  %80 = load i64, i64* %u, align 8
  %81 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %u119 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %81, i32 0, i32 0
  store i64 %80, i64* %u119, align 8
  %82 = load i64, i64* %v, align 8
  %83 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %v120 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %83, i32 0, i32 1
  store i64 %82, i64* %v120, align 8
  %84 = load i64, i64* %q, align 8
  %85 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %q121 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %85, i32 0, i32 2
  store i64 %84, i64* %q121, align 8
  %86 = load i64, i64* %r, align 8
  %87 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %r122 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %87, i32 0, i32 3
  store i64 %86, i64* %r122, align 8
  %88 = load i64, i64* %eta.addr, align 8
  ret i64 %88
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64_update_de_62(%struct.secp256k1_modinv64_signed62* noundef %d, %struct.secp256k1_modinv64_signed62* noundef %e, %struct.secp256k1_modinv64_trans2x2* noundef %t, %struct.secp256k1_modinv64_modinfo* noundef %modinfo) #0 {
entry:
  %d.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %e.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %t.addr = alloca %struct.secp256k1_modinv64_trans2x2*, align 8
  %modinfo.addr = alloca %struct.secp256k1_modinv64_modinfo*, align 8
  %M62 = alloca i64, align 8
  %d0 = alloca i64, align 8
  %d1 = alloca i64, align 8
  %d2 = alloca i64, align 8
  %d3 = alloca i64, align 8
  %d4 = alloca i64, align 8
  %e0 = alloca i64, align 8
  %e1 = alloca i64, align 8
  %e2 = alloca i64, align 8
  %e3 = alloca i64, align 8
  %e4 = alloca i64, align 8
  %u = alloca i64, align 8
  %v20 = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %md = alloca i64, align 8
  %me = alloca i64, align 8
  %sd = alloca i64, align 8
  %se = alloca i64, align 8
  %cd = alloca i128, align 16
  %ce = alloca i128, align 16
  store %struct.secp256k1_modinv64_signed62* %d, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  store %struct.secp256k1_modinv64_signed62* %e, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  store %struct.secp256k1_modinv64_trans2x2* %t, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  store %struct.secp256k1_modinv64_modinfo* %modinfo, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %d0, align 8
  %2 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %d1, align 8
  %4 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %d2, align 8
  %6 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %d3, align 8
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v7 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %v7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %d4, align 8
  %10 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v9 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %10, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %v9, i64 0, i64 0
  %11 = load i64, i64* %arrayidx10, align 8
  store i64 %11, i64* %e0, align 8
  %12 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v11 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %12, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [5 x i64], [5 x i64]* %v11, i64 0, i64 1
  %13 = load i64, i64* %arrayidx12, align 8
  store i64 %13, i64* %e1, align 8
  %14 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v13 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %14, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %v13, i64 0, i64 2
  %15 = load i64, i64* %arrayidx14, align 8
  store i64 %15, i64* %e2, align 8
  %16 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v15 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %16, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [5 x i64], [5 x i64]* %v15, i64 0, i64 3
  %17 = load i64, i64* %arrayidx16, align 8
  store i64 %17, i64* %e3, align 8
  %18 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v17 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %18, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [5 x i64], [5 x i64]* %v17, i64 0, i64 4
  %19 = load i64, i64* %arrayidx18, align 8
  store i64 %19, i64* %e4, align 8
  %20 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %u19 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %20, i32 0, i32 0
  %21 = load i64, i64* %u19, align 8
  store i64 %21, i64* %u, align 8
  %22 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %v21 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %22, i32 0, i32 1
  %23 = load i64, i64* %v21, align 8
  store i64 %23, i64* %v20, align 8
  %24 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %q22 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %24, i32 0, i32 2
  %25 = load i64, i64* %q22, align 8
  store i64 %25, i64* %q, align 8
  %26 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %r23 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %26, i32 0, i32 3
  %27 = load i64, i64* %r23, align 8
  store i64 %27, i64* %r, align 8
  %28 = load i64, i64* %d4, align 8
  %shr = ashr i64 %28, 63
  store i64 %shr, i64* %sd, align 8
  %29 = load i64, i64* %e4, align 8
  %shr24 = ashr i64 %29, 63
  store i64 %shr24, i64* %se, align 8
  %30 = load i64, i64* %u, align 8
  %31 = load i64, i64* %sd, align 8
  %and = and i64 %30, %31
  %32 = load i64, i64* %v20, align 8
  %33 = load i64, i64* %se, align 8
  %and25 = and i64 %32, %33
  %add = add nsw i64 %and, %and25
  store i64 %add, i64* %md, align 8
  %34 = load i64, i64* %q, align 8
  %35 = load i64, i64* %sd, align 8
  %and26 = and i64 %34, %35
  %36 = load i64, i64* %r, align 8
  %37 = load i64, i64* %se, align 8
  %and27 = and i64 %36, %37
  %add28 = add nsw i64 %and26, %and27
  store i64 %add28, i64* %me, align 8
  %38 = load i64, i64* %u, align 8
  %39 = load i64, i64* %d0, align 8
  call void @secp256k1_i128_mul(i128* noundef %cd, i64 noundef %38, i64 noundef %39)
  %40 = load i64, i64* %v20, align 8
  %41 = load i64, i64* %e0, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %40, i64 noundef %41)
  %42 = load i64, i64* %q, align 8
  %43 = load i64, i64* %d0, align 8
  call void @secp256k1_i128_mul(i128* noundef %ce, i64 noundef %42, i64 noundef %43)
  %44 = load i64, i64* %r, align 8
  %45 = load i64, i64* %e0, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %44, i64 noundef %45)
  %46 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus_inv62 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %46, i32 0, i32 1
  %47 = load i64, i64* %modulus_inv62, align 8
  %call = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %mul = mul i64 %47, %call
  %48 = load i64, i64* %md, align 8
  %add29 = add i64 %mul, %48
  %and30 = and i64 %add29, 4611686018427387903
  %49 = load i64, i64* %md, align 8
  %sub = sub i64 %49, %and30
  store i64 %sub, i64* %md, align 8
  %50 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus_inv6231 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %50, i32 0, i32 1
  %51 = load i64, i64* %modulus_inv6231, align 8
  %call32 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %mul33 = mul i64 %51, %call32
  %52 = load i64, i64* %me, align 8
  %add34 = add i64 %mul33, %52
  %and35 = and i64 %add34, 4611686018427387903
  %53 = load i64, i64* %me, align 8
  %sub36 = sub i64 %53, %and35
  store i64 %sub36, i64* %me, align 8
  %54 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %54, i32 0, i32 0
  %v37 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [5 x i64], [5 x i64]* %v37, i64 0, i64 0
  %55 = load i64, i64* %arrayidx38, align 8
  %56 = load i64, i64* %md, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %55, i64 noundef %56)
  %57 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus39 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %57, i32 0, i32 0
  %v40 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus39, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [5 x i64], [5 x i64]* %v40, i64 0, i64 0
  %58 = load i64, i64* %arrayidx41, align 8
  %59 = load i64, i64* %me, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %58, i64 noundef %59)
  br label %do.body

do.body:                                          ; preds = %entry
  %call42 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %and43 = and i64 %call42, 4611686018427387903
  %cmp = icmp eq i64 %and43, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  call void @secp256k1_i128_rshift(i128* noundef %cd, i32 noundef 62)
  br label %do.body44

do.body44:                                        ; preds = %do.end
  %call45 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %and46 = and i64 %call45, 4611686018427387903
  %cmp47 = icmp eq i64 %and46, 0
  %conv48 = zext i1 %cmp47 to i32
  br label %do.end49

do.end49:                                         ; preds = %do.body44
  call void @secp256k1_i128_rshift(i128* noundef %ce, i32 noundef 62)
  %60 = load i64, i64* %u, align 8
  %61 = load i64, i64* %d1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %60, i64 noundef %61)
  %62 = load i64, i64* %v20, align 8
  %63 = load i64, i64* %e1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %62, i64 noundef %63)
  %64 = load i64, i64* %q, align 8
  %65 = load i64, i64* %d1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %64, i64 noundef %65)
  %66 = load i64, i64* %r, align 8
  %67 = load i64, i64* %e1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %66, i64 noundef %67)
  %68 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus50 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %68, i32 0, i32 0
  %v51 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus50, i32 0, i32 0
  %arrayidx52 = getelementptr inbounds [5 x i64], [5 x i64]* %v51, i64 0, i64 1
  %69 = load i64, i64* %arrayidx52, align 8
  %tobool = icmp ne i64 %69, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end49
  %70 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus53 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %70, i32 0, i32 0
  %v54 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus53, i32 0, i32 0
  %arrayidx55 = getelementptr inbounds [5 x i64], [5 x i64]* %v54, i64 0, i64 1
  %71 = load i64, i64* %arrayidx55, align 8
  %72 = load i64, i64* %md, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %71, i64 noundef %72)
  %73 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus56 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %73, i32 0, i32 0
  %v57 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus56, i32 0, i32 0
  %arrayidx58 = getelementptr inbounds [5 x i64], [5 x i64]* %v57, i64 0, i64 1
  %74 = load i64, i64* %arrayidx58, align 8
  %75 = load i64, i64* %me, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %74, i64 noundef %75)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end49
  %call59 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %and60 = and i64 %call59, 4611686018427387903
  %76 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v61 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %76, i32 0, i32 0
  %arrayidx62 = getelementptr inbounds [5 x i64], [5 x i64]* %v61, i64 0, i64 0
  store i64 %and60, i64* %arrayidx62, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cd, i32 noundef 62)
  %call63 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %and64 = and i64 %call63, 4611686018427387903
  %77 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v65 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %77, i32 0, i32 0
  %arrayidx66 = getelementptr inbounds [5 x i64], [5 x i64]* %v65, i64 0, i64 0
  store i64 %and64, i64* %arrayidx66, align 8
  call void @secp256k1_i128_rshift(i128* noundef %ce, i32 noundef 62)
  %78 = load i64, i64* %u, align 8
  %79 = load i64, i64* %d2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %78, i64 noundef %79)
  %80 = load i64, i64* %v20, align 8
  %81 = load i64, i64* %e2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %80, i64 noundef %81)
  %82 = load i64, i64* %q, align 8
  %83 = load i64, i64* %d2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %82, i64 noundef %83)
  %84 = load i64, i64* %r, align 8
  %85 = load i64, i64* %e2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %84, i64 noundef %85)
  %86 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus67 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %86, i32 0, i32 0
  %v68 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus67, i32 0, i32 0
  %arrayidx69 = getelementptr inbounds [5 x i64], [5 x i64]* %v68, i64 0, i64 2
  %87 = load i64, i64* %arrayidx69, align 8
  %tobool70 = icmp ne i64 %87, 0
  br i1 %tobool70, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end
  %88 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus72 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %88, i32 0, i32 0
  %v73 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus72, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [5 x i64], [5 x i64]* %v73, i64 0, i64 2
  %89 = load i64, i64* %arrayidx74, align 8
  %90 = load i64, i64* %md, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %89, i64 noundef %90)
  %91 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus75 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %91, i32 0, i32 0
  %v76 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus75, i32 0, i32 0
  %arrayidx77 = getelementptr inbounds [5 x i64], [5 x i64]* %v76, i64 0, i64 2
  %92 = load i64, i64* %arrayidx77, align 8
  %93 = load i64, i64* %me, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %92, i64 noundef %93)
  br label %if.end78

if.end78:                                         ; preds = %if.then71, %if.end
  %call79 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %and80 = and i64 %call79, 4611686018427387903
  %94 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v81 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %94, i32 0, i32 0
  %arrayidx82 = getelementptr inbounds [5 x i64], [5 x i64]* %v81, i64 0, i64 1
  store i64 %and80, i64* %arrayidx82, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cd, i32 noundef 62)
  %call83 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %and84 = and i64 %call83, 4611686018427387903
  %95 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v85 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %95, i32 0, i32 0
  %arrayidx86 = getelementptr inbounds [5 x i64], [5 x i64]* %v85, i64 0, i64 1
  store i64 %and84, i64* %arrayidx86, align 8
  call void @secp256k1_i128_rshift(i128* noundef %ce, i32 noundef 62)
  %96 = load i64, i64* %u, align 8
  %97 = load i64, i64* %d3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %96, i64 noundef %97)
  %98 = load i64, i64* %v20, align 8
  %99 = load i64, i64* %e3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %98, i64 noundef %99)
  %100 = load i64, i64* %q, align 8
  %101 = load i64, i64* %d3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %100, i64 noundef %101)
  %102 = load i64, i64* %r, align 8
  %103 = load i64, i64* %e3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %102, i64 noundef %103)
  %104 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus87 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %104, i32 0, i32 0
  %v88 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus87, i32 0, i32 0
  %arrayidx89 = getelementptr inbounds [5 x i64], [5 x i64]* %v88, i64 0, i64 3
  %105 = load i64, i64* %arrayidx89, align 8
  %tobool90 = icmp ne i64 %105, 0
  br i1 %tobool90, label %if.then91, label %if.end98

if.then91:                                        ; preds = %if.end78
  %106 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus92 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %106, i32 0, i32 0
  %v93 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus92, i32 0, i32 0
  %arrayidx94 = getelementptr inbounds [5 x i64], [5 x i64]* %v93, i64 0, i64 3
  %107 = load i64, i64* %arrayidx94, align 8
  %108 = load i64, i64* %md, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %107, i64 noundef %108)
  %109 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus95 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %109, i32 0, i32 0
  %v96 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus95, i32 0, i32 0
  %arrayidx97 = getelementptr inbounds [5 x i64], [5 x i64]* %v96, i64 0, i64 3
  %110 = load i64, i64* %arrayidx97, align 8
  %111 = load i64, i64* %me, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %110, i64 noundef %111)
  br label %if.end98

if.end98:                                         ; preds = %if.then91, %if.end78
  %call99 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %and100 = and i64 %call99, 4611686018427387903
  %112 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v101 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %112, i32 0, i32 0
  %arrayidx102 = getelementptr inbounds [5 x i64], [5 x i64]* %v101, i64 0, i64 2
  store i64 %and100, i64* %arrayidx102, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cd, i32 noundef 62)
  %call103 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %and104 = and i64 %call103, 4611686018427387903
  %113 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v105 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %113, i32 0, i32 0
  %arrayidx106 = getelementptr inbounds [5 x i64], [5 x i64]* %v105, i64 0, i64 2
  store i64 %and104, i64* %arrayidx106, align 8
  call void @secp256k1_i128_rshift(i128* noundef %ce, i32 noundef 62)
  %114 = load i64, i64* %u, align 8
  %115 = load i64, i64* %d4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %114, i64 noundef %115)
  %116 = load i64, i64* %v20, align 8
  %117 = load i64, i64* %e4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %116, i64 noundef %117)
  %118 = load i64, i64* %q, align 8
  %119 = load i64, i64* %d4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %118, i64 noundef %119)
  %120 = load i64, i64* %r, align 8
  %121 = load i64, i64* %e4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %120, i64 noundef %121)
  %122 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus107 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %122, i32 0, i32 0
  %v108 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus107, i32 0, i32 0
  %arrayidx109 = getelementptr inbounds [5 x i64], [5 x i64]* %v108, i64 0, i64 4
  %123 = load i64, i64* %arrayidx109, align 8
  %124 = load i64, i64* %md, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cd, i64 noundef %123, i64 noundef %124)
  %125 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus110 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %125, i32 0, i32 0
  %v111 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus110, i32 0, i32 0
  %arrayidx112 = getelementptr inbounds [5 x i64], [5 x i64]* %v111, i64 0, i64 4
  %126 = load i64, i64* %arrayidx112, align 8
  %127 = load i64, i64* %me, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %ce, i64 noundef %126, i64 noundef %127)
  %call113 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %and114 = and i64 %call113, 4611686018427387903
  %128 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v115 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %128, i32 0, i32 0
  %arrayidx116 = getelementptr inbounds [5 x i64], [5 x i64]* %v115, i64 0, i64 3
  store i64 %and114, i64* %arrayidx116, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cd, i32 noundef 62)
  %call117 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %and118 = and i64 %call117, 4611686018427387903
  %129 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v119 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %129, i32 0, i32 0
  %arrayidx120 = getelementptr inbounds [5 x i64], [5 x i64]* %v119, i64 0, i64 3
  store i64 %and118, i64* %arrayidx120, align 8
  call void @secp256k1_i128_rshift(i128* noundef %ce, i32 noundef 62)
  %call121 = call i64 @secp256k1_i128_to_i64(i128* noundef %cd)
  %130 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %d.addr, align 8
  %v122 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %130, i32 0, i32 0
  %arrayidx123 = getelementptr inbounds [5 x i64], [5 x i64]* %v122, i64 0, i64 4
  store i64 %call121, i64* %arrayidx123, align 8
  %call124 = call i64 @secp256k1_i128_to_i64(i128* noundef %ce)
  %131 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %e.addr, align 8
  %v125 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %131, i32 0, i32 0
  %arrayidx126 = getelementptr inbounds [5 x i64], [5 x i64]* %v125, i64 0, i64 4
  store i64 %call124, i64* %arrayidx126, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64_update_fg_62_var(i32 noundef %len, %struct.secp256k1_modinv64_signed62* noundef %f, %struct.secp256k1_modinv64_signed62* noundef %g, %struct.secp256k1_modinv64_trans2x2* noundef %t) #0 {
entry:
  %len.addr = alloca i32, align 4
  %f.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %g.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %t.addr = alloca %struct.secp256k1_modinv64_trans2x2*, align 8
  %M62 = alloca i64, align 8
  %u = alloca i64, align 8
  %v = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %fi = alloca i64, align 8
  %gi = alloca i64, align 8
  %cf = alloca i128, align 16
  %cg = alloca i128, align 16
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.secp256k1_modinv64_signed62* %f, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  store %struct.secp256k1_modinv64_signed62* %g, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  store %struct.secp256k1_modinv64_trans2x2* %t, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %u1 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %0, i32 0, i32 0
  %1 = load i64, i64* %u1, align 8
  store i64 %1, i64* %u, align 8
  %2 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %v2 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %2, i32 0, i32 1
  %3 = load i64, i64* %v2, align 8
  store i64 %3, i64* %v, align 8
  %4 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %q3 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %4, i32 0, i32 2
  %5 = load i64, i64* %q3, align 8
  store i64 %5, i64* %q, align 8
  %6 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %r4 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %6, i32 0, i32 3
  %7 = load i64, i64* %r4, align 8
  store i64 %7, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %8 = load i32, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %8, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %9 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %9, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 0
  %10 = load i64, i64* %arrayidx, align 8
  store i64 %10, i64* %fi, align 8
  %11 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v6 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %11, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %v6, i64 0, i64 0
  %12 = load i64, i64* %arrayidx7, align 8
  store i64 %12, i64* %gi, align 8
  %13 = load i64, i64* %u, align 8
  %14 = load i64, i64* %fi, align 8
  call void @secp256k1_i128_mul(i128* noundef %cf, i64 noundef %13, i64 noundef %14)
  %15 = load i64, i64* %v, align 8
  %16 = load i64, i64* %gi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %15, i64 noundef %16)
  %17 = load i64, i64* %q, align 8
  %18 = load i64, i64* %fi, align 8
  call void @secp256k1_i128_mul(i128* noundef %cg, i64 noundef %17, i64 noundef %18)
  %19 = load i64, i64* %r, align 8
  %20 = load i64, i64* %gi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %19, i64 noundef %20)
  br label %do.body8

do.body8:                                         ; preds = %do.end
  %call = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and = and i64 %call, 4611686018427387903
  %cmp9 = icmp eq i64 %and, 0
  %conv10 = zext i1 %cmp9 to i32
  br label %do.end11

do.end11:                                         ; preds = %do.body8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  br label %do.body12

do.body12:                                        ; preds = %do.end11
  %call13 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and14 = and i64 %call13, 4611686018427387903
  %cmp15 = icmp eq i64 %and14, 0
  %conv16 = zext i1 %cmp15 to i32
  br label %do.end17

do.end17:                                         ; preds = %do.body12
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end17
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %len.addr, align 4
  %cmp18 = icmp slt i32 %21, %22
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v20 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %23, i32 0, i32 0
  %24 = load i32, i32* %i, align 4
  %idxprom = sext i32 %24 to i64
  %arrayidx21 = getelementptr inbounds [5 x i64], [5 x i64]* %v20, i64 0, i64 %idxprom
  %25 = load i64, i64* %arrayidx21, align 8
  store i64 %25, i64* %fi, align 8
  %26 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v22 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %26, i32 0, i32 0
  %27 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %27 to i64
  %arrayidx24 = getelementptr inbounds [5 x i64], [5 x i64]* %v22, i64 0, i64 %idxprom23
  %28 = load i64, i64* %arrayidx24, align 8
  store i64 %28, i64* %gi, align 8
  %29 = load i64, i64* %u, align 8
  %30 = load i64, i64* %fi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %29, i64 noundef %30)
  %31 = load i64, i64* %v, align 8
  %32 = load i64, i64* %gi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %31, i64 noundef %32)
  %33 = load i64, i64* %q, align 8
  %34 = load i64, i64* %fi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %33, i64 noundef %34)
  %35 = load i64, i64* %r, align 8
  %36 = load i64, i64* %gi, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %35, i64 noundef %36)
  %call25 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and26 = and i64 %call25, 4611686018427387903
  %37 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v27 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %37, i32 0, i32 0
  %38 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %38, 1
  %idxprom28 = sext i32 %sub to i64
  %arrayidx29 = getelementptr inbounds [5 x i64], [5 x i64]* %v27, i64 0, i64 %idxprom28
  store i64 %and26, i64* %arrayidx29, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  %call30 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and31 = and i64 %call30, 4611686018427387903
  %39 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v32 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %39, i32 0, i32 0
  %40 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %40, 1
  %idxprom34 = sext i32 %sub33 to i64
  %arrayidx35 = getelementptr inbounds [5 x i64], [5 x i64]* %v32, i64 0, i64 %idxprom34
  store i64 %and31, i64* %arrayidx35, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %41 = load i32, i32* %i, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !29

for.end:                                          ; preds = %for.cond
  %call36 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %42 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v37 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %42, i32 0, i32 0
  %43 = load i32, i32* %len.addr, align 4
  %sub38 = sub nsw i32 %43, 1
  %idxprom39 = sext i32 %sub38 to i64
  %arrayidx40 = getelementptr inbounds [5 x i64], [5 x i64]* %v37, i64 0, i64 %idxprom39
  store i64 %call36, i64* %arrayidx40, align 8
  %call41 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %44 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v42 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %44, i32 0, i32 0
  %45 = load i32, i32* %len.addr, align 4
  %sub43 = sub nsw i32 %45, 1
  %idxprom44 = sext i32 %sub43 to i64
  %arrayidx45 = getelementptr inbounds [5 x i64], [5 x i64]* %v42, i64 0, i64 %idxprom44
  store i64 %call41, i64* %arrayidx45, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64_normalize_62(%struct.secp256k1_modinv64_signed62* noundef %r, i64 noundef %sign, %struct.secp256k1_modinv64_modinfo* noundef %modinfo) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %sign.addr = alloca i64, align 8
  %modinfo.addr = alloca %struct.secp256k1_modinv64_modinfo*, align 8
  %M62 = alloca i64, align 8
  %r0 = alloca i64, align 8
  %r1 = alloca i64, align 8
  %r2 = alloca i64, align 8
  %r3 = alloca i64, align 8
  %r4 = alloca i64, align 8
  %cond_add = alloca i64, align 8
  %cond_negate = alloca i64, align 8
  store %struct.secp256k1_modinv64_signed62* %r, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  store i64 %sign, i64* %sign.addr, align 8
  store %struct.secp256k1_modinv64_modinfo* %modinfo, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %r0, align 8
  %2 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %r1, align 8
  %4 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %r2, align 8
  %6 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %r3, align 8
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v7 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %v7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %r4, align 8
  %10 = load i64, i64* %r4, align 8
  %shr = ashr i64 %10, 63
  store i64 %shr, i64* %cond_add, align 8
  %11 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %11, i32 0, i32 0
  %v9 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %v9, i64 0, i64 0
  %12 = load i64, i64* %arrayidx10, align 8
  %13 = load i64, i64* %cond_add, align 8
  %and = and i64 %12, %13
  %14 = load i64, i64* %r0, align 8
  %add = add nsw i64 %14, %and
  store i64 %add, i64* %r0, align 8
  %15 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus11 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %15, i32 0, i32 0
  %v12 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus11, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [5 x i64], [5 x i64]* %v12, i64 0, i64 1
  %16 = load i64, i64* %arrayidx13, align 8
  %17 = load i64, i64* %cond_add, align 8
  %and14 = and i64 %16, %17
  %18 = load i64, i64* %r1, align 8
  %add15 = add nsw i64 %18, %and14
  store i64 %add15, i64* %r1, align 8
  %19 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus16 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %19, i32 0, i32 0
  %v17 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus16, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [5 x i64], [5 x i64]* %v17, i64 0, i64 2
  %20 = load i64, i64* %arrayidx18, align 8
  %21 = load i64, i64* %cond_add, align 8
  %and19 = and i64 %20, %21
  %22 = load i64, i64* %r2, align 8
  %add20 = add nsw i64 %22, %and19
  store i64 %add20, i64* %r2, align 8
  %23 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus21 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %23, i32 0, i32 0
  %v22 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus21, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %v22, i64 0, i64 3
  %24 = load i64, i64* %arrayidx23, align 8
  %25 = load i64, i64* %cond_add, align 8
  %and24 = and i64 %24, %25
  %26 = load i64, i64* %r3, align 8
  %add25 = add nsw i64 %26, %and24
  store i64 %add25, i64* %r3, align 8
  %27 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus26 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %27, i32 0, i32 0
  %v27 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus26, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [5 x i64], [5 x i64]* %v27, i64 0, i64 4
  %28 = load i64, i64* %arrayidx28, align 8
  %29 = load i64, i64* %cond_add, align 8
  %and29 = and i64 %28, %29
  %30 = load i64, i64* %r4, align 8
  %add30 = add nsw i64 %30, %and29
  store i64 %add30, i64* %r4, align 8
  %31 = load i64, i64* %sign.addr, align 8
  %shr31 = ashr i64 %31, 63
  store i64 %shr31, i64* %cond_negate, align 8
  %32 = load i64, i64* %r0, align 8
  %33 = load i64, i64* %cond_negate, align 8
  %xor = xor i64 %32, %33
  %34 = load i64, i64* %cond_negate, align 8
  %sub = sub nsw i64 %xor, %34
  store i64 %sub, i64* %r0, align 8
  %35 = load i64, i64* %r1, align 8
  %36 = load i64, i64* %cond_negate, align 8
  %xor32 = xor i64 %35, %36
  %37 = load i64, i64* %cond_negate, align 8
  %sub33 = sub nsw i64 %xor32, %37
  store i64 %sub33, i64* %r1, align 8
  %38 = load i64, i64* %r2, align 8
  %39 = load i64, i64* %cond_negate, align 8
  %xor34 = xor i64 %38, %39
  %40 = load i64, i64* %cond_negate, align 8
  %sub35 = sub nsw i64 %xor34, %40
  store i64 %sub35, i64* %r2, align 8
  %41 = load i64, i64* %r3, align 8
  %42 = load i64, i64* %cond_negate, align 8
  %xor36 = xor i64 %41, %42
  %43 = load i64, i64* %cond_negate, align 8
  %sub37 = sub nsw i64 %xor36, %43
  store i64 %sub37, i64* %r3, align 8
  %44 = load i64, i64* %r4, align 8
  %45 = load i64, i64* %cond_negate, align 8
  %xor38 = xor i64 %44, %45
  %46 = load i64, i64* %cond_negate, align 8
  %sub39 = sub nsw i64 %xor38, %46
  store i64 %sub39, i64* %r4, align 8
  %47 = load i64, i64* %r0, align 8
  %shr40 = ashr i64 %47, 62
  %48 = load i64, i64* %r1, align 8
  %add41 = add nsw i64 %48, %shr40
  store i64 %add41, i64* %r1, align 8
  %49 = load i64, i64* %r0, align 8
  %and42 = and i64 %49, 4611686018427387903
  store i64 %and42, i64* %r0, align 8
  %50 = load i64, i64* %r1, align 8
  %shr43 = ashr i64 %50, 62
  %51 = load i64, i64* %r2, align 8
  %add44 = add nsw i64 %51, %shr43
  store i64 %add44, i64* %r2, align 8
  %52 = load i64, i64* %r1, align 8
  %and45 = and i64 %52, 4611686018427387903
  store i64 %and45, i64* %r1, align 8
  %53 = load i64, i64* %r2, align 8
  %shr46 = ashr i64 %53, 62
  %54 = load i64, i64* %r3, align 8
  %add47 = add nsw i64 %54, %shr46
  store i64 %add47, i64* %r3, align 8
  %55 = load i64, i64* %r2, align 8
  %and48 = and i64 %55, 4611686018427387903
  store i64 %and48, i64* %r2, align 8
  %56 = load i64, i64* %r3, align 8
  %shr49 = ashr i64 %56, 62
  %57 = load i64, i64* %r4, align 8
  %add50 = add nsw i64 %57, %shr49
  store i64 %add50, i64* %r4, align 8
  %58 = load i64, i64* %r3, align 8
  %and51 = and i64 %58, 4611686018427387903
  store i64 %and51, i64* %r3, align 8
  %59 = load i64, i64* %r4, align 8
  %shr52 = ashr i64 %59, 63
  store i64 %shr52, i64* %cond_add, align 8
  %60 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus53 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %60, i32 0, i32 0
  %v54 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus53, i32 0, i32 0
  %arrayidx55 = getelementptr inbounds [5 x i64], [5 x i64]* %v54, i64 0, i64 0
  %61 = load i64, i64* %arrayidx55, align 8
  %62 = load i64, i64* %cond_add, align 8
  %and56 = and i64 %61, %62
  %63 = load i64, i64* %r0, align 8
  %add57 = add nsw i64 %63, %and56
  store i64 %add57, i64* %r0, align 8
  %64 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus58 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %64, i32 0, i32 0
  %v59 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus58, i32 0, i32 0
  %arrayidx60 = getelementptr inbounds [5 x i64], [5 x i64]* %v59, i64 0, i64 1
  %65 = load i64, i64* %arrayidx60, align 8
  %66 = load i64, i64* %cond_add, align 8
  %and61 = and i64 %65, %66
  %67 = load i64, i64* %r1, align 8
  %add62 = add nsw i64 %67, %and61
  store i64 %add62, i64* %r1, align 8
  %68 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus63 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %68, i32 0, i32 0
  %v64 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus63, i32 0, i32 0
  %arrayidx65 = getelementptr inbounds [5 x i64], [5 x i64]* %v64, i64 0, i64 2
  %69 = load i64, i64* %arrayidx65, align 8
  %70 = load i64, i64* %cond_add, align 8
  %and66 = and i64 %69, %70
  %71 = load i64, i64* %r2, align 8
  %add67 = add nsw i64 %71, %and66
  store i64 %add67, i64* %r2, align 8
  %72 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus68 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %72, i32 0, i32 0
  %v69 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus68, i32 0, i32 0
  %arrayidx70 = getelementptr inbounds [5 x i64], [5 x i64]* %v69, i64 0, i64 3
  %73 = load i64, i64* %arrayidx70, align 8
  %74 = load i64, i64* %cond_add, align 8
  %and71 = and i64 %73, %74
  %75 = load i64, i64* %r3, align 8
  %add72 = add nsw i64 %75, %and71
  store i64 %add72, i64* %r3, align 8
  %76 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus73 = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %76, i32 0, i32 0
  %v74 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %modulus73, i32 0, i32 0
  %arrayidx75 = getelementptr inbounds [5 x i64], [5 x i64]* %v74, i64 0, i64 4
  %77 = load i64, i64* %arrayidx75, align 8
  %78 = load i64, i64* %cond_add, align 8
  %and76 = and i64 %77, %78
  %79 = load i64, i64* %r4, align 8
  %add77 = add nsw i64 %79, %and76
  store i64 %add77, i64* %r4, align 8
  %80 = load i64, i64* %r0, align 8
  %shr78 = ashr i64 %80, 62
  %81 = load i64, i64* %r1, align 8
  %add79 = add nsw i64 %81, %shr78
  store i64 %add79, i64* %r1, align 8
  %82 = load i64, i64* %r0, align 8
  %and80 = and i64 %82, 4611686018427387903
  store i64 %and80, i64* %r0, align 8
  %83 = load i64, i64* %r1, align 8
  %shr81 = ashr i64 %83, 62
  %84 = load i64, i64* %r2, align 8
  %add82 = add nsw i64 %84, %shr81
  store i64 %add82, i64* %r2, align 8
  %85 = load i64, i64* %r1, align 8
  %and83 = and i64 %85, 4611686018427387903
  store i64 %and83, i64* %r1, align 8
  %86 = load i64, i64* %r2, align 8
  %shr84 = ashr i64 %86, 62
  %87 = load i64, i64* %r3, align 8
  %add85 = add nsw i64 %87, %shr84
  store i64 %add85, i64* %r3, align 8
  %88 = load i64, i64* %r2, align 8
  %and86 = and i64 %88, 4611686018427387903
  store i64 %and86, i64* %r2, align 8
  %89 = load i64, i64* %r3, align 8
  %shr87 = ashr i64 %89, 62
  %90 = load i64, i64* %r4, align 8
  %add88 = add nsw i64 %90, %shr87
  store i64 %add88, i64* %r4, align 8
  %91 = load i64, i64* %r3, align 8
  %and89 = and i64 %91, 4611686018427387903
  store i64 %and89, i64* %r3, align 8
  %92 = load i64, i64* %r0, align 8
  %93 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v90 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %93, i32 0, i32 0
  %arrayidx91 = getelementptr inbounds [5 x i64], [5 x i64]* %v90, i64 0, i64 0
  store i64 %92, i64* %arrayidx91, align 8
  %94 = load i64, i64* %r1, align 8
  %95 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v92 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %95, i32 0, i32 0
  %arrayidx93 = getelementptr inbounds [5 x i64], [5 x i64]* %v92, i64 0, i64 1
  store i64 %94, i64* %arrayidx93, align 8
  %96 = load i64, i64* %r2, align 8
  %97 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v94 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %97, i32 0, i32 0
  %arrayidx95 = getelementptr inbounds [5 x i64], [5 x i64]* %v94, i64 0, i64 2
  store i64 %96, i64* %arrayidx95, align 8
  %98 = load i64, i64* %r3, align 8
  %99 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v96 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %99, i32 0, i32 0
  %arrayidx97 = getelementptr inbounds [5 x i64], [5 x i64]* %v96, i64 0, i64 3
  store i64 %98, i64* %arrayidx97, align 8
  %100 = load i64, i64* %r4, align 8
  %101 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v98 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %101, i32 0, i32 0
  %arrayidx99 = getelementptr inbounds [5 x i64], [5 x i64]* %v98, i64 0, i64 4
  store i64 %100, i64* %arrayidx99, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ctz64_var(i64 noundef %x) #0 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %x.addr, align 8
  %cmp = icmp ne i64 %0, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i64, i64* %x.addr, align 8
  %2 = call i64 @llvm.cttz.i64(i64 %1, i1 true)
  %cast = trunc i64 %2 to i32
  ret i32 %cast
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_i128_mul(i128* noundef %r, i64 noundef %a, i64 noundef %b) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = sext i64 %0 to i128
  %1 = load i64, i64* %b.addr, align 8
  %conv1 = sext i64 %1 to i128
  %mul = mul nsw i128 %conv, %conv1
  %2 = load i128*, i128** %r.addr, align 8
  store i128 %mul, i128* %2, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_i128_accum_mul(i128* noundef %r, i64 noundef %a, i64 noundef %b) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %ab = alloca i128, align 16
  store i128* %r, i128** %r.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %conv = sext i64 %0 to i128
  %1 = load i64, i64* %b.addr, align 8
  %conv1 = sext i64 %1 to i128
  %mul = mul nsw i128 %conv, %conv1
  store i128 %mul, i128* %ab, align 16
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i128, i128* %ab, align 16
  %cmp = icmp sle i128 0, %2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %3 = load i128*, i128** %r.addr, align 8
  %4 = load i128, i128* %3, align 16
  %5 = load i128, i128* %ab, align 16
  %sub = sub nsw i128 170141183460469231731687303715884105727, %5
  %cmp3 = icmp sle i128 %4, %sub
  %conv4 = zext i1 %cmp3 to i32
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %6 = load i128, i128* %ab, align 16
  %sub5 = sub nsw i128 -170141183460469231731687303715884105728, %6
  %7 = load i128*, i128** %r.addr, align 8
  %8 = load i128, i128* %7, align 16
  %cmp6 = icmp sle i128 %sub5, %8
  %conv7 = zext i1 %cmp6 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %conv7, %cond.false ]
  br label %do.end

do.end:                                           ; preds = %cond.end
  %9 = load i128, i128* %ab, align 16
  %10 = load i128*, i128** %r.addr, align 8
  %11 = load i128, i128* %10, align 16
  %add = add nsw i128 %11, %9
  store i128 %add, i128* %10, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @secp256k1_i128_to_i64(i128* noundef %a) #0 {
entry:
  %a.addr = alloca i128*, align 8
  store i128* %a, i128** %a.addr, align 8
  %0 = load i128*, i128** %a.addr, align 8
  %1 = load i128, i128* %0, align 16
  %conv = trunc i128 %1 to i64
  ret i64 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_i128_rshift(i128* noundef %r, i32 noundef %n) #0 {
entry:
  %r.addr = alloca i128*, align 8
  %n.addr = alloca i32, align 4
  store i128* %r, i128** %r.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 128
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i128*, i128** %r.addr, align 8
  %3 = load i128, i128* %2, align 16
  %sh_prom = zext i32 %1 to i128
  %shr = ashr i128 %3, %sh_prom
  store i128 %shr, i128* %2, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_mul_512(i64* noundef %l, %struct.secp256k1_scalar* noundef %a, %struct.secp256k1_scalar* noundef %b) #0 {
entry:
  %l.addr = alloca i64*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %b.addr = alloca %struct.secp256k1_scalar*, align 8
  %c0 = alloca i64, align 8
  %c1 = alloca i64, align 8
  %c2 = alloca i32, align 4
  %tl = alloca i64, align 8
  %th = alloca i64, align 8
  %t = alloca i128, align 16
  %tl14 = alloca i64, align 8
  %th15 = alloca i64, align 8
  %t16 = alloca i128, align 16
  %tl38 = alloca i64, align 8
  %th39 = alloca i64, align 8
  %t40 = alloca i128, align 16
  %tl67 = alloca i64, align 8
  %th68 = alloca i64, align 8
  %t69 = alloca i128, align 16
  %tl94 = alloca i64, align 8
  %th95 = alloca i64, align 8
  %t96 = alloca i128, align 16
  %tl121 = alloca i64, align 8
  %th122 = alloca i64, align 8
  %t123 = alloca i128, align 16
  %tl150 = alloca i64, align 8
  %th151 = alloca i64, align 8
  %t152 = alloca i128, align 16
  %tl177 = alloca i64, align 8
  %th178 = alloca i64, align 8
  %t179 = alloca i128, align 16
  %tl204 = alloca i64, align 8
  %th205 = alloca i64, align 8
  %t206 = alloca i128, align 16
  %tl231 = alloca i64, align 8
  %th232 = alloca i64, align 8
  %t233 = alloca i128, align 16
  %tl260 = alloca i64, align 8
  %th261 = alloca i64, align 8
  %t262 = alloca i128, align 16
  %tl287 = alloca i64, align 8
  %th288 = alloca i64, align 8
  %t289 = alloca i128, align 16
  %tl314 = alloca i64, align 8
  %th315 = alloca i64, align 8
  %t316 = alloca i128, align 16
  %tl343 = alloca i64, align 8
  %th344 = alloca i64, align 8
  %t345 = alloca i128, align 16
  %tl370 = alloca i64, align 8
  %th371 = alloca i64, align 8
  %t372 = alloca i128, align 16
  %tl399 = alloca i64, align 8
  %th400 = alloca i64, align 8
  %t401 = alloca i128, align 16
  store i64* %l, i64** %l.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store %struct.secp256k1_scalar* %b, %struct.secp256k1_scalar** %b.addr, align 8
  store i64 0, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 0
  %3 = load i64, i64* %arrayidx2, align 8
  call void @secp256k1_u128_mul(i128* noundef %t, i64 noundef %1, i64 noundef %3)
  %call = call i64 @secp256k1_u128_hi_u64(i128* noundef %t)
  store i64 %call, i64* %th, align 8
  %call3 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  store i64 %call3, i64* %tl, align 8
  %4 = load i64, i64* %tl, align 8
  %5 = load i64, i64* %c0, align 8
  %add = add i64 %5, %4
  store i64 %add, i64* %c0, align 8
  %6 = load i64, i64* %c0, align 8
  %7 = load i64, i64* %tl, align 8
  %cmp = icmp ult i64 %6, %7
  %conv = zext i1 %cmp to i32
  %conv4 = sext i32 %conv to i64
  %8 = load i64, i64* %th, align 8
  %add5 = add i64 %8, %conv4
  store i64 %add5, i64* %th, align 8
  %9 = load i64, i64* %th, align 8
  %10 = load i64, i64* %c1, align 8
  %add6 = add i64 %10, %9
  store i64 %add6, i64* %c1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %11 = load i64, i64* %c1, align 8
  %12 = load i64, i64* %th, align 8
  %cmp7 = icmp uge i64 %11, %12
  %conv8 = zext i1 %cmp7 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %13 = load i64, i64* %c0, align 8
  %14 = load i64*, i64** %l.addr, align 8
  %arrayidx9 = getelementptr inbounds i64, i64* %14, i64 0
  store i64 %13, i64* %arrayidx9, align 8
  %15 = load i64, i64* %c1, align 8
  store i64 %15, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body10

do.body10:                                        ; preds = %do.end
  %16 = load i32, i32* %c2, align 4
  %cmp11 = icmp eq i32 %16, 0
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body10
  %17 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %17, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 0
  %18 = load i64, i64* %arrayidx18, align 8
  %19 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d19 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %19, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x i64], [4 x i64]* %d19, i64 0, i64 1
  %20 = load i64, i64* %arrayidx20, align 8
  call void @secp256k1_u128_mul(i128* noundef %t16, i64 noundef %18, i64 noundef %20)
  %call21 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t16)
  store i64 %call21, i64* %th15, align 8
  %call22 = call i64 @secp256k1_u128_to_u64(i128* noundef %t16)
  store i64 %call22, i64* %tl14, align 8
  %21 = load i64, i64* %tl14, align 8
  %22 = load i64, i64* %c0, align 8
  %add23 = add i64 %22, %21
  store i64 %add23, i64* %c0, align 8
  %23 = load i64, i64* %c0, align 8
  %24 = load i64, i64* %tl14, align 8
  %cmp24 = icmp ult i64 %23, %24
  %conv25 = zext i1 %cmp24 to i32
  %conv26 = sext i32 %conv25 to i64
  %25 = load i64, i64* %th15, align 8
  %add27 = add i64 %25, %conv26
  store i64 %add27, i64* %th15, align 8
  %26 = load i64, i64* %th15, align 8
  %27 = load i64, i64* %c1, align 8
  %add28 = add i64 %27, %26
  store i64 %add28, i64* %c1, align 8
  %28 = load i64, i64* %c1, align 8
  %29 = load i64, i64* %th15, align 8
  %cmp29 = icmp ult i64 %28, %29
  %conv30 = zext i1 %cmp29 to i32
  %30 = load i32, i32* %c2, align 4
  %add31 = add i32 %30, %conv30
  store i32 %add31, i32* %c2, align 4
  br label %do.body32

do.body32:                                        ; preds = %do.end13
  %31 = load i64, i64* %c1, align 8
  %32 = load i64, i64* %th15, align 8
  %cmp33 = icmp uge i64 %31, %32
  br i1 %cmp33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body32
  %33 = load i32, i32* %c2, align 4
  %cmp35 = icmp ne i32 %33, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body32
  %34 = phi i1 [ true, %do.body32 ], [ %cmp35, %lor.rhs ]
  %lor.ext = zext i1 %34 to i32
  br label %do.end37

do.end37:                                         ; preds = %lor.end
  %35 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d41 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %35, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds [4 x i64], [4 x i64]* %d41, i64 0, i64 1
  %36 = load i64, i64* %arrayidx42, align 8
  %37 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d43 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %37, i32 0, i32 0
  %arrayidx44 = getelementptr inbounds [4 x i64], [4 x i64]* %d43, i64 0, i64 0
  %38 = load i64, i64* %arrayidx44, align 8
  call void @secp256k1_u128_mul(i128* noundef %t40, i64 noundef %36, i64 noundef %38)
  %call45 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t40)
  store i64 %call45, i64* %th39, align 8
  %call46 = call i64 @secp256k1_u128_to_u64(i128* noundef %t40)
  store i64 %call46, i64* %tl38, align 8
  %39 = load i64, i64* %tl38, align 8
  %40 = load i64, i64* %c0, align 8
  %add47 = add i64 %40, %39
  store i64 %add47, i64* %c0, align 8
  %41 = load i64, i64* %c0, align 8
  %42 = load i64, i64* %tl38, align 8
  %cmp48 = icmp ult i64 %41, %42
  %conv49 = zext i1 %cmp48 to i32
  %conv50 = sext i32 %conv49 to i64
  %43 = load i64, i64* %th39, align 8
  %add51 = add i64 %43, %conv50
  store i64 %add51, i64* %th39, align 8
  %44 = load i64, i64* %th39, align 8
  %45 = load i64, i64* %c1, align 8
  %add52 = add i64 %45, %44
  store i64 %add52, i64* %c1, align 8
  %46 = load i64, i64* %c1, align 8
  %47 = load i64, i64* %th39, align 8
  %cmp53 = icmp ult i64 %46, %47
  %conv54 = zext i1 %cmp53 to i32
  %48 = load i32, i32* %c2, align 4
  %add55 = add i32 %48, %conv54
  store i32 %add55, i32* %c2, align 4
  br label %do.body56

do.body56:                                        ; preds = %do.end37
  %49 = load i64, i64* %c1, align 8
  %50 = load i64, i64* %th39, align 8
  %cmp57 = icmp uge i64 %49, %50
  br i1 %cmp57, label %lor.end62, label %lor.rhs59

lor.rhs59:                                        ; preds = %do.body56
  %51 = load i32, i32* %c2, align 4
  %cmp60 = icmp ne i32 %51, 0
  br label %lor.end62

lor.end62:                                        ; preds = %lor.rhs59, %do.body56
  %52 = phi i1 [ true, %do.body56 ], [ %cmp60, %lor.rhs59 ]
  %lor.ext63 = zext i1 %52 to i32
  br label %do.end64

do.end64:                                         ; preds = %lor.end62
  %53 = load i64, i64* %c0, align 8
  %54 = load i64*, i64** %l.addr, align 8
  %arrayidx65 = getelementptr inbounds i64, i64* %54, i64 1
  store i64 %53, i64* %arrayidx65, align 8
  %55 = load i64, i64* %c1, align 8
  store i64 %55, i64* %c0, align 8
  %56 = load i32, i32* %c2, align 4
  %conv66 = zext i32 %56 to i64
  store i64 %conv66, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %57 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d70 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %57, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x i64], [4 x i64]* %d70, i64 0, i64 0
  %58 = load i64, i64* %arrayidx71, align 8
  %59 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d72 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %59, i32 0, i32 0
  %arrayidx73 = getelementptr inbounds [4 x i64], [4 x i64]* %d72, i64 0, i64 2
  %60 = load i64, i64* %arrayidx73, align 8
  call void @secp256k1_u128_mul(i128* noundef %t69, i64 noundef %58, i64 noundef %60)
  %call74 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t69)
  store i64 %call74, i64* %th68, align 8
  %call75 = call i64 @secp256k1_u128_to_u64(i128* noundef %t69)
  store i64 %call75, i64* %tl67, align 8
  %61 = load i64, i64* %tl67, align 8
  %62 = load i64, i64* %c0, align 8
  %add76 = add i64 %62, %61
  store i64 %add76, i64* %c0, align 8
  %63 = load i64, i64* %c0, align 8
  %64 = load i64, i64* %tl67, align 8
  %cmp77 = icmp ult i64 %63, %64
  %conv78 = zext i1 %cmp77 to i32
  %conv79 = sext i32 %conv78 to i64
  %65 = load i64, i64* %th68, align 8
  %add80 = add i64 %65, %conv79
  store i64 %add80, i64* %th68, align 8
  %66 = load i64, i64* %th68, align 8
  %67 = load i64, i64* %c1, align 8
  %add81 = add i64 %67, %66
  store i64 %add81, i64* %c1, align 8
  %68 = load i64, i64* %c1, align 8
  %69 = load i64, i64* %th68, align 8
  %cmp82 = icmp ult i64 %68, %69
  %conv83 = zext i1 %cmp82 to i32
  %70 = load i32, i32* %c2, align 4
  %add84 = add i32 %70, %conv83
  store i32 %add84, i32* %c2, align 4
  br label %do.body85

do.body85:                                        ; preds = %do.end64
  %71 = load i64, i64* %c1, align 8
  %72 = load i64, i64* %th68, align 8
  %cmp86 = icmp uge i64 %71, %72
  br i1 %cmp86, label %lor.end91, label %lor.rhs88

lor.rhs88:                                        ; preds = %do.body85
  %73 = load i32, i32* %c2, align 4
  %cmp89 = icmp ne i32 %73, 0
  br label %lor.end91

lor.end91:                                        ; preds = %lor.rhs88, %do.body85
  %74 = phi i1 [ true, %do.body85 ], [ %cmp89, %lor.rhs88 ]
  %lor.ext92 = zext i1 %74 to i32
  br label %do.end93

do.end93:                                         ; preds = %lor.end91
  %75 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d97 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %75, i32 0, i32 0
  %arrayidx98 = getelementptr inbounds [4 x i64], [4 x i64]* %d97, i64 0, i64 1
  %76 = load i64, i64* %arrayidx98, align 8
  %77 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d99 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %77, i32 0, i32 0
  %arrayidx100 = getelementptr inbounds [4 x i64], [4 x i64]* %d99, i64 0, i64 1
  %78 = load i64, i64* %arrayidx100, align 8
  call void @secp256k1_u128_mul(i128* noundef %t96, i64 noundef %76, i64 noundef %78)
  %call101 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t96)
  store i64 %call101, i64* %th95, align 8
  %call102 = call i64 @secp256k1_u128_to_u64(i128* noundef %t96)
  store i64 %call102, i64* %tl94, align 8
  %79 = load i64, i64* %tl94, align 8
  %80 = load i64, i64* %c0, align 8
  %add103 = add i64 %80, %79
  store i64 %add103, i64* %c0, align 8
  %81 = load i64, i64* %c0, align 8
  %82 = load i64, i64* %tl94, align 8
  %cmp104 = icmp ult i64 %81, %82
  %conv105 = zext i1 %cmp104 to i32
  %conv106 = sext i32 %conv105 to i64
  %83 = load i64, i64* %th95, align 8
  %add107 = add i64 %83, %conv106
  store i64 %add107, i64* %th95, align 8
  %84 = load i64, i64* %th95, align 8
  %85 = load i64, i64* %c1, align 8
  %add108 = add i64 %85, %84
  store i64 %add108, i64* %c1, align 8
  %86 = load i64, i64* %c1, align 8
  %87 = load i64, i64* %th95, align 8
  %cmp109 = icmp ult i64 %86, %87
  %conv110 = zext i1 %cmp109 to i32
  %88 = load i32, i32* %c2, align 4
  %add111 = add i32 %88, %conv110
  store i32 %add111, i32* %c2, align 4
  br label %do.body112

do.body112:                                       ; preds = %do.end93
  %89 = load i64, i64* %c1, align 8
  %90 = load i64, i64* %th95, align 8
  %cmp113 = icmp uge i64 %89, %90
  br i1 %cmp113, label %lor.end118, label %lor.rhs115

lor.rhs115:                                       ; preds = %do.body112
  %91 = load i32, i32* %c2, align 4
  %cmp116 = icmp ne i32 %91, 0
  br label %lor.end118

lor.end118:                                       ; preds = %lor.rhs115, %do.body112
  %92 = phi i1 [ true, %do.body112 ], [ %cmp116, %lor.rhs115 ]
  %lor.ext119 = zext i1 %92 to i32
  br label %do.end120

do.end120:                                        ; preds = %lor.end118
  %93 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d124 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %93, i32 0, i32 0
  %arrayidx125 = getelementptr inbounds [4 x i64], [4 x i64]* %d124, i64 0, i64 2
  %94 = load i64, i64* %arrayidx125, align 8
  %95 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d126 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %95, i32 0, i32 0
  %arrayidx127 = getelementptr inbounds [4 x i64], [4 x i64]* %d126, i64 0, i64 0
  %96 = load i64, i64* %arrayidx127, align 8
  call void @secp256k1_u128_mul(i128* noundef %t123, i64 noundef %94, i64 noundef %96)
  %call128 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t123)
  store i64 %call128, i64* %th122, align 8
  %call129 = call i64 @secp256k1_u128_to_u64(i128* noundef %t123)
  store i64 %call129, i64* %tl121, align 8
  %97 = load i64, i64* %tl121, align 8
  %98 = load i64, i64* %c0, align 8
  %add130 = add i64 %98, %97
  store i64 %add130, i64* %c0, align 8
  %99 = load i64, i64* %c0, align 8
  %100 = load i64, i64* %tl121, align 8
  %cmp131 = icmp ult i64 %99, %100
  %conv132 = zext i1 %cmp131 to i32
  %conv133 = sext i32 %conv132 to i64
  %101 = load i64, i64* %th122, align 8
  %add134 = add i64 %101, %conv133
  store i64 %add134, i64* %th122, align 8
  %102 = load i64, i64* %th122, align 8
  %103 = load i64, i64* %c1, align 8
  %add135 = add i64 %103, %102
  store i64 %add135, i64* %c1, align 8
  %104 = load i64, i64* %c1, align 8
  %105 = load i64, i64* %th122, align 8
  %cmp136 = icmp ult i64 %104, %105
  %conv137 = zext i1 %cmp136 to i32
  %106 = load i32, i32* %c2, align 4
  %add138 = add i32 %106, %conv137
  store i32 %add138, i32* %c2, align 4
  br label %do.body139

do.body139:                                       ; preds = %do.end120
  %107 = load i64, i64* %c1, align 8
  %108 = load i64, i64* %th122, align 8
  %cmp140 = icmp uge i64 %107, %108
  br i1 %cmp140, label %lor.end145, label %lor.rhs142

lor.rhs142:                                       ; preds = %do.body139
  %109 = load i32, i32* %c2, align 4
  %cmp143 = icmp ne i32 %109, 0
  br label %lor.end145

lor.end145:                                       ; preds = %lor.rhs142, %do.body139
  %110 = phi i1 [ true, %do.body139 ], [ %cmp143, %lor.rhs142 ]
  %lor.ext146 = zext i1 %110 to i32
  br label %do.end147

do.end147:                                        ; preds = %lor.end145
  %111 = load i64, i64* %c0, align 8
  %112 = load i64*, i64** %l.addr, align 8
  %arrayidx148 = getelementptr inbounds i64, i64* %112, i64 2
  store i64 %111, i64* %arrayidx148, align 8
  %113 = load i64, i64* %c1, align 8
  store i64 %113, i64* %c0, align 8
  %114 = load i32, i32* %c2, align 4
  %conv149 = zext i32 %114 to i64
  store i64 %conv149, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %115 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d153 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %115, i32 0, i32 0
  %arrayidx154 = getelementptr inbounds [4 x i64], [4 x i64]* %d153, i64 0, i64 0
  %116 = load i64, i64* %arrayidx154, align 8
  %117 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d155 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %117, i32 0, i32 0
  %arrayidx156 = getelementptr inbounds [4 x i64], [4 x i64]* %d155, i64 0, i64 3
  %118 = load i64, i64* %arrayidx156, align 8
  call void @secp256k1_u128_mul(i128* noundef %t152, i64 noundef %116, i64 noundef %118)
  %call157 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t152)
  store i64 %call157, i64* %th151, align 8
  %call158 = call i64 @secp256k1_u128_to_u64(i128* noundef %t152)
  store i64 %call158, i64* %tl150, align 8
  %119 = load i64, i64* %tl150, align 8
  %120 = load i64, i64* %c0, align 8
  %add159 = add i64 %120, %119
  store i64 %add159, i64* %c0, align 8
  %121 = load i64, i64* %c0, align 8
  %122 = load i64, i64* %tl150, align 8
  %cmp160 = icmp ult i64 %121, %122
  %conv161 = zext i1 %cmp160 to i32
  %conv162 = sext i32 %conv161 to i64
  %123 = load i64, i64* %th151, align 8
  %add163 = add i64 %123, %conv162
  store i64 %add163, i64* %th151, align 8
  %124 = load i64, i64* %th151, align 8
  %125 = load i64, i64* %c1, align 8
  %add164 = add i64 %125, %124
  store i64 %add164, i64* %c1, align 8
  %126 = load i64, i64* %c1, align 8
  %127 = load i64, i64* %th151, align 8
  %cmp165 = icmp ult i64 %126, %127
  %conv166 = zext i1 %cmp165 to i32
  %128 = load i32, i32* %c2, align 4
  %add167 = add i32 %128, %conv166
  store i32 %add167, i32* %c2, align 4
  br label %do.body168

do.body168:                                       ; preds = %do.end147
  %129 = load i64, i64* %c1, align 8
  %130 = load i64, i64* %th151, align 8
  %cmp169 = icmp uge i64 %129, %130
  br i1 %cmp169, label %lor.end174, label %lor.rhs171

lor.rhs171:                                       ; preds = %do.body168
  %131 = load i32, i32* %c2, align 4
  %cmp172 = icmp ne i32 %131, 0
  br label %lor.end174

lor.end174:                                       ; preds = %lor.rhs171, %do.body168
  %132 = phi i1 [ true, %do.body168 ], [ %cmp172, %lor.rhs171 ]
  %lor.ext175 = zext i1 %132 to i32
  br label %do.end176

do.end176:                                        ; preds = %lor.end174
  %133 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d180 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %133, i32 0, i32 0
  %arrayidx181 = getelementptr inbounds [4 x i64], [4 x i64]* %d180, i64 0, i64 1
  %134 = load i64, i64* %arrayidx181, align 8
  %135 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d182 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %135, i32 0, i32 0
  %arrayidx183 = getelementptr inbounds [4 x i64], [4 x i64]* %d182, i64 0, i64 2
  %136 = load i64, i64* %arrayidx183, align 8
  call void @secp256k1_u128_mul(i128* noundef %t179, i64 noundef %134, i64 noundef %136)
  %call184 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t179)
  store i64 %call184, i64* %th178, align 8
  %call185 = call i64 @secp256k1_u128_to_u64(i128* noundef %t179)
  store i64 %call185, i64* %tl177, align 8
  %137 = load i64, i64* %tl177, align 8
  %138 = load i64, i64* %c0, align 8
  %add186 = add i64 %138, %137
  store i64 %add186, i64* %c0, align 8
  %139 = load i64, i64* %c0, align 8
  %140 = load i64, i64* %tl177, align 8
  %cmp187 = icmp ult i64 %139, %140
  %conv188 = zext i1 %cmp187 to i32
  %conv189 = sext i32 %conv188 to i64
  %141 = load i64, i64* %th178, align 8
  %add190 = add i64 %141, %conv189
  store i64 %add190, i64* %th178, align 8
  %142 = load i64, i64* %th178, align 8
  %143 = load i64, i64* %c1, align 8
  %add191 = add i64 %143, %142
  store i64 %add191, i64* %c1, align 8
  %144 = load i64, i64* %c1, align 8
  %145 = load i64, i64* %th178, align 8
  %cmp192 = icmp ult i64 %144, %145
  %conv193 = zext i1 %cmp192 to i32
  %146 = load i32, i32* %c2, align 4
  %add194 = add i32 %146, %conv193
  store i32 %add194, i32* %c2, align 4
  br label %do.body195

do.body195:                                       ; preds = %do.end176
  %147 = load i64, i64* %c1, align 8
  %148 = load i64, i64* %th178, align 8
  %cmp196 = icmp uge i64 %147, %148
  br i1 %cmp196, label %lor.end201, label %lor.rhs198

lor.rhs198:                                       ; preds = %do.body195
  %149 = load i32, i32* %c2, align 4
  %cmp199 = icmp ne i32 %149, 0
  br label %lor.end201

lor.end201:                                       ; preds = %lor.rhs198, %do.body195
  %150 = phi i1 [ true, %do.body195 ], [ %cmp199, %lor.rhs198 ]
  %lor.ext202 = zext i1 %150 to i32
  br label %do.end203

do.end203:                                        ; preds = %lor.end201
  %151 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d207 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %151, i32 0, i32 0
  %arrayidx208 = getelementptr inbounds [4 x i64], [4 x i64]* %d207, i64 0, i64 2
  %152 = load i64, i64* %arrayidx208, align 8
  %153 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d209 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %153, i32 0, i32 0
  %arrayidx210 = getelementptr inbounds [4 x i64], [4 x i64]* %d209, i64 0, i64 1
  %154 = load i64, i64* %arrayidx210, align 8
  call void @secp256k1_u128_mul(i128* noundef %t206, i64 noundef %152, i64 noundef %154)
  %call211 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t206)
  store i64 %call211, i64* %th205, align 8
  %call212 = call i64 @secp256k1_u128_to_u64(i128* noundef %t206)
  store i64 %call212, i64* %tl204, align 8
  %155 = load i64, i64* %tl204, align 8
  %156 = load i64, i64* %c0, align 8
  %add213 = add i64 %156, %155
  store i64 %add213, i64* %c0, align 8
  %157 = load i64, i64* %c0, align 8
  %158 = load i64, i64* %tl204, align 8
  %cmp214 = icmp ult i64 %157, %158
  %conv215 = zext i1 %cmp214 to i32
  %conv216 = sext i32 %conv215 to i64
  %159 = load i64, i64* %th205, align 8
  %add217 = add i64 %159, %conv216
  store i64 %add217, i64* %th205, align 8
  %160 = load i64, i64* %th205, align 8
  %161 = load i64, i64* %c1, align 8
  %add218 = add i64 %161, %160
  store i64 %add218, i64* %c1, align 8
  %162 = load i64, i64* %c1, align 8
  %163 = load i64, i64* %th205, align 8
  %cmp219 = icmp ult i64 %162, %163
  %conv220 = zext i1 %cmp219 to i32
  %164 = load i32, i32* %c2, align 4
  %add221 = add i32 %164, %conv220
  store i32 %add221, i32* %c2, align 4
  br label %do.body222

do.body222:                                       ; preds = %do.end203
  %165 = load i64, i64* %c1, align 8
  %166 = load i64, i64* %th205, align 8
  %cmp223 = icmp uge i64 %165, %166
  br i1 %cmp223, label %lor.end228, label %lor.rhs225

lor.rhs225:                                       ; preds = %do.body222
  %167 = load i32, i32* %c2, align 4
  %cmp226 = icmp ne i32 %167, 0
  br label %lor.end228

lor.end228:                                       ; preds = %lor.rhs225, %do.body222
  %168 = phi i1 [ true, %do.body222 ], [ %cmp226, %lor.rhs225 ]
  %lor.ext229 = zext i1 %168 to i32
  br label %do.end230

do.end230:                                        ; preds = %lor.end228
  %169 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d234 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %169, i32 0, i32 0
  %arrayidx235 = getelementptr inbounds [4 x i64], [4 x i64]* %d234, i64 0, i64 3
  %170 = load i64, i64* %arrayidx235, align 8
  %171 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d236 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %171, i32 0, i32 0
  %arrayidx237 = getelementptr inbounds [4 x i64], [4 x i64]* %d236, i64 0, i64 0
  %172 = load i64, i64* %arrayidx237, align 8
  call void @secp256k1_u128_mul(i128* noundef %t233, i64 noundef %170, i64 noundef %172)
  %call238 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t233)
  store i64 %call238, i64* %th232, align 8
  %call239 = call i64 @secp256k1_u128_to_u64(i128* noundef %t233)
  store i64 %call239, i64* %tl231, align 8
  %173 = load i64, i64* %tl231, align 8
  %174 = load i64, i64* %c0, align 8
  %add240 = add i64 %174, %173
  store i64 %add240, i64* %c0, align 8
  %175 = load i64, i64* %c0, align 8
  %176 = load i64, i64* %tl231, align 8
  %cmp241 = icmp ult i64 %175, %176
  %conv242 = zext i1 %cmp241 to i32
  %conv243 = sext i32 %conv242 to i64
  %177 = load i64, i64* %th232, align 8
  %add244 = add i64 %177, %conv243
  store i64 %add244, i64* %th232, align 8
  %178 = load i64, i64* %th232, align 8
  %179 = load i64, i64* %c1, align 8
  %add245 = add i64 %179, %178
  store i64 %add245, i64* %c1, align 8
  %180 = load i64, i64* %c1, align 8
  %181 = load i64, i64* %th232, align 8
  %cmp246 = icmp ult i64 %180, %181
  %conv247 = zext i1 %cmp246 to i32
  %182 = load i32, i32* %c2, align 4
  %add248 = add i32 %182, %conv247
  store i32 %add248, i32* %c2, align 4
  br label %do.body249

do.body249:                                       ; preds = %do.end230
  %183 = load i64, i64* %c1, align 8
  %184 = load i64, i64* %th232, align 8
  %cmp250 = icmp uge i64 %183, %184
  br i1 %cmp250, label %lor.end255, label %lor.rhs252

lor.rhs252:                                       ; preds = %do.body249
  %185 = load i32, i32* %c2, align 4
  %cmp253 = icmp ne i32 %185, 0
  br label %lor.end255

lor.end255:                                       ; preds = %lor.rhs252, %do.body249
  %186 = phi i1 [ true, %do.body249 ], [ %cmp253, %lor.rhs252 ]
  %lor.ext256 = zext i1 %186 to i32
  br label %do.end257

do.end257:                                        ; preds = %lor.end255
  %187 = load i64, i64* %c0, align 8
  %188 = load i64*, i64** %l.addr, align 8
  %arrayidx258 = getelementptr inbounds i64, i64* %188, i64 3
  store i64 %187, i64* %arrayidx258, align 8
  %189 = load i64, i64* %c1, align 8
  store i64 %189, i64* %c0, align 8
  %190 = load i32, i32* %c2, align 4
  %conv259 = zext i32 %190 to i64
  store i64 %conv259, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %191 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d263 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %191, i32 0, i32 0
  %arrayidx264 = getelementptr inbounds [4 x i64], [4 x i64]* %d263, i64 0, i64 1
  %192 = load i64, i64* %arrayidx264, align 8
  %193 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d265 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %193, i32 0, i32 0
  %arrayidx266 = getelementptr inbounds [4 x i64], [4 x i64]* %d265, i64 0, i64 3
  %194 = load i64, i64* %arrayidx266, align 8
  call void @secp256k1_u128_mul(i128* noundef %t262, i64 noundef %192, i64 noundef %194)
  %call267 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t262)
  store i64 %call267, i64* %th261, align 8
  %call268 = call i64 @secp256k1_u128_to_u64(i128* noundef %t262)
  store i64 %call268, i64* %tl260, align 8
  %195 = load i64, i64* %tl260, align 8
  %196 = load i64, i64* %c0, align 8
  %add269 = add i64 %196, %195
  store i64 %add269, i64* %c0, align 8
  %197 = load i64, i64* %c0, align 8
  %198 = load i64, i64* %tl260, align 8
  %cmp270 = icmp ult i64 %197, %198
  %conv271 = zext i1 %cmp270 to i32
  %conv272 = sext i32 %conv271 to i64
  %199 = load i64, i64* %th261, align 8
  %add273 = add i64 %199, %conv272
  store i64 %add273, i64* %th261, align 8
  %200 = load i64, i64* %th261, align 8
  %201 = load i64, i64* %c1, align 8
  %add274 = add i64 %201, %200
  store i64 %add274, i64* %c1, align 8
  %202 = load i64, i64* %c1, align 8
  %203 = load i64, i64* %th261, align 8
  %cmp275 = icmp ult i64 %202, %203
  %conv276 = zext i1 %cmp275 to i32
  %204 = load i32, i32* %c2, align 4
  %add277 = add i32 %204, %conv276
  store i32 %add277, i32* %c2, align 4
  br label %do.body278

do.body278:                                       ; preds = %do.end257
  %205 = load i64, i64* %c1, align 8
  %206 = load i64, i64* %th261, align 8
  %cmp279 = icmp uge i64 %205, %206
  br i1 %cmp279, label %lor.end284, label %lor.rhs281

lor.rhs281:                                       ; preds = %do.body278
  %207 = load i32, i32* %c2, align 4
  %cmp282 = icmp ne i32 %207, 0
  br label %lor.end284

lor.end284:                                       ; preds = %lor.rhs281, %do.body278
  %208 = phi i1 [ true, %do.body278 ], [ %cmp282, %lor.rhs281 ]
  %lor.ext285 = zext i1 %208 to i32
  br label %do.end286

do.end286:                                        ; preds = %lor.end284
  %209 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d290 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %209, i32 0, i32 0
  %arrayidx291 = getelementptr inbounds [4 x i64], [4 x i64]* %d290, i64 0, i64 2
  %210 = load i64, i64* %arrayidx291, align 8
  %211 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d292 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %211, i32 0, i32 0
  %arrayidx293 = getelementptr inbounds [4 x i64], [4 x i64]* %d292, i64 0, i64 2
  %212 = load i64, i64* %arrayidx293, align 8
  call void @secp256k1_u128_mul(i128* noundef %t289, i64 noundef %210, i64 noundef %212)
  %call294 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t289)
  store i64 %call294, i64* %th288, align 8
  %call295 = call i64 @secp256k1_u128_to_u64(i128* noundef %t289)
  store i64 %call295, i64* %tl287, align 8
  %213 = load i64, i64* %tl287, align 8
  %214 = load i64, i64* %c0, align 8
  %add296 = add i64 %214, %213
  store i64 %add296, i64* %c0, align 8
  %215 = load i64, i64* %c0, align 8
  %216 = load i64, i64* %tl287, align 8
  %cmp297 = icmp ult i64 %215, %216
  %conv298 = zext i1 %cmp297 to i32
  %conv299 = sext i32 %conv298 to i64
  %217 = load i64, i64* %th288, align 8
  %add300 = add i64 %217, %conv299
  store i64 %add300, i64* %th288, align 8
  %218 = load i64, i64* %th288, align 8
  %219 = load i64, i64* %c1, align 8
  %add301 = add i64 %219, %218
  store i64 %add301, i64* %c1, align 8
  %220 = load i64, i64* %c1, align 8
  %221 = load i64, i64* %th288, align 8
  %cmp302 = icmp ult i64 %220, %221
  %conv303 = zext i1 %cmp302 to i32
  %222 = load i32, i32* %c2, align 4
  %add304 = add i32 %222, %conv303
  store i32 %add304, i32* %c2, align 4
  br label %do.body305

do.body305:                                       ; preds = %do.end286
  %223 = load i64, i64* %c1, align 8
  %224 = load i64, i64* %th288, align 8
  %cmp306 = icmp uge i64 %223, %224
  br i1 %cmp306, label %lor.end311, label %lor.rhs308

lor.rhs308:                                       ; preds = %do.body305
  %225 = load i32, i32* %c2, align 4
  %cmp309 = icmp ne i32 %225, 0
  br label %lor.end311

lor.end311:                                       ; preds = %lor.rhs308, %do.body305
  %226 = phi i1 [ true, %do.body305 ], [ %cmp309, %lor.rhs308 ]
  %lor.ext312 = zext i1 %226 to i32
  br label %do.end313

do.end313:                                        ; preds = %lor.end311
  %227 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d317 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %227, i32 0, i32 0
  %arrayidx318 = getelementptr inbounds [4 x i64], [4 x i64]* %d317, i64 0, i64 3
  %228 = load i64, i64* %arrayidx318, align 8
  %229 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d319 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %229, i32 0, i32 0
  %arrayidx320 = getelementptr inbounds [4 x i64], [4 x i64]* %d319, i64 0, i64 1
  %230 = load i64, i64* %arrayidx320, align 8
  call void @secp256k1_u128_mul(i128* noundef %t316, i64 noundef %228, i64 noundef %230)
  %call321 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t316)
  store i64 %call321, i64* %th315, align 8
  %call322 = call i64 @secp256k1_u128_to_u64(i128* noundef %t316)
  store i64 %call322, i64* %tl314, align 8
  %231 = load i64, i64* %tl314, align 8
  %232 = load i64, i64* %c0, align 8
  %add323 = add i64 %232, %231
  store i64 %add323, i64* %c0, align 8
  %233 = load i64, i64* %c0, align 8
  %234 = load i64, i64* %tl314, align 8
  %cmp324 = icmp ult i64 %233, %234
  %conv325 = zext i1 %cmp324 to i32
  %conv326 = sext i32 %conv325 to i64
  %235 = load i64, i64* %th315, align 8
  %add327 = add i64 %235, %conv326
  store i64 %add327, i64* %th315, align 8
  %236 = load i64, i64* %th315, align 8
  %237 = load i64, i64* %c1, align 8
  %add328 = add i64 %237, %236
  store i64 %add328, i64* %c1, align 8
  %238 = load i64, i64* %c1, align 8
  %239 = load i64, i64* %th315, align 8
  %cmp329 = icmp ult i64 %238, %239
  %conv330 = zext i1 %cmp329 to i32
  %240 = load i32, i32* %c2, align 4
  %add331 = add i32 %240, %conv330
  store i32 %add331, i32* %c2, align 4
  br label %do.body332

do.body332:                                       ; preds = %do.end313
  %241 = load i64, i64* %c1, align 8
  %242 = load i64, i64* %th315, align 8
  %cmp333 = icmp uge i64 %241, %242
  br i1 %cmp333, label %lor.end338, label %lor.rhs335

lor.rhs335:                                       ; preds = %do.body332
  %243 = load i32, i32* %c2, align 4
  %cmp336 = icmp ne i32 %243, 0
  br label %lor.end338

lor.end338:                                       ; preds = %lor.rhs335, %do.body332
  %244 = phi i1 [ true, %do.body332 ], [ %cmp336, %lor.rhs335 ]
  %lor.ext339 = zext i1 %244 to i32
  br label %do.end340

do.end340:                                        ; preds = %lor.end338
  %245 = load i64, i64* %c0, align 8
  %246 = load i64*, i64** %l.addr, align 8
  %arrayidx341 = getelementptr inbounds i64, i64* %246, i64 4
  store i64 %245, i64* %arrayidx341, align 8
  %247 = load i64, i64* %c1, align 8
  store i64 %247, i64* %c0, align 8
  %248 = load i32, i32* %c2, align 4
  %conv342 = zext i32 %248 to i64
  store i64 %conv342, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %249 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d346 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %249, i32 0, i32 0
  %arrayidx347 = getelementptr inbounds [4 x i64], [4 x i64]* %d346, i64 0, i64 2
  %250 = load i64, i64* %arrayidx347, align 8
  %251 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d348 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %251, i32 0, i32 0
  %arrayidx349 = getelementptr inbounds [4 x i64], [4 x i64]* %d348, i64 0, i64 3
  %252 = load i64, i64* %arrayidx349, align 8
  call void @secp256k1_u128_mul(i128* noundef %t345, i64 noundef %250, i64 noundef %252)
  %call350 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t345)
  store i64 %call350, i64* %th344, align 8
  %call351 = call i64 @secp256k1_u128_to_u64(i128* noundef %t345)
  store i64 %call351, i64* %tl343, align 8
  %253 = load i64, i64* %tl343, align 8
  %254 = load i64, i64* %c0, align 8
  %add352 = add i64 %254, %253
  store i64 %add352, i64* %c0, align 8
  %255 = load i64, i64* %c0, align 8
  %256 = load i64, i64* %tl343, align 8
  %cmp353 = icmp ult i64 %255, %256
  %conv354 = zext i1 %cmp353 to i32
  %conv355 = sext i32 %conv354 to i64
  %257 = load i64, i64* %th344, align 8
  %add356 = add i64 %257, %conv355
  store i64 %add356, i64* %th344, align 8
  %258 = load i64, i64* %th344, align 8
  %259 = load i64, i64* %c1, align 8
  %add357 = add i64 %259, %258
  store i64 %add357, i64* %c1, align 8
  %260 = load i64, i64* %c1, align 8
  %261 = load i64, i64* %th344, align 8
  %cmp358 = icmp ult i64 %260, %261
  %conv359 = zext i1 %cmp358 to i32
  %262 = load i32, i32* %c2, align 4
  %add360 = add i32 %262, %conv359
  store i32 %add360, i32* %c2, align 4
  br label %do.body361

do.body361:                                       ; preds = %do.end340
  %263 = load i64, i64* %c1, align 8
  %264 = load i64, i64* %th344, align 8
  %cmp362 = icmp uge i64 %263, %264
  br i1 %cmp362, label %lor.end367, label %lor.rhs364

lor.rhs364:                                       ; preds = %do.body361
  %265 = load i32, i32* %c2, align 4
  %cmp365 = icmp ne i32 %265, 0
  br label %lor.end367

lor.end367:                                       ; preds = %lor.rhs364, %do.body361
  %266 = phi i1 [ true, %do.body361 ], [ %cmp365, %lor.rhs364 ]
  %lor.ext368 = zext i1 %266 to i32
  br label %do.end369

do.end369:                                        ; preds = %lor.end367
  %267 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d373 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %267, i32 0, i32 0
  %arrayidx374 = getelementptr inbounds [4 x i64], [4 x i64]* %d373, i64 0, i64 3
  %268 = load i64, i64* %arrayidx374, align 8
  %269 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d375 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %269, i32 0, i32 0
  %arrayidx376 = getelementptr inbounds [4 x i64], [4 x i64]* %d375, i64 0, i64 2
  %270 = load i64, i64* %arrayidx376, align 8
  call void @secp256k1_u128_mul(i128* noundef %t372, i64 noundef %268, i64 noundef %270)
  %call377 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t372)
  store i64 %call377, i64* %th371, align 8
  %call378 = call i64 @secp256k1_u128_to_u64(i128* noundef %t372)
  store i64 %call378, i64* %tl370, align 8
  %271 = load i64, i64* %tl370, align 8
  %272 = load i64, i64* %c0, align 8
  %add379 = add i64 %272, %271
  store i64 %add379, i64* %c0, align 8
  %273 = load i64, i64* %c0, align 8
  %274 = load i64, i64* %tl370, align 8
  %cmp380 = icmp ult i64 %273, %274
  %conv381 = zext i1 %cmp380 to i32
  %conv382 = sext i32 %conv381 to i64
  %275 = load i64, i64* %th371, align 8
  %add383 = add i64 %275, %conv382
  store i64 %add383, i64* %th371, align 8
  %276 = load i64, i64* %th371, align 8
  %277 = load i64, i64* %c1, align 8
  %add384 = add i64 %277, %276
  store i64 %add384, i64* %c1, align 8
  %278 = load i64, i64* %c1, align 8
  %279 = load i64, i64* %th371, align 8
  %cmp385 = icmp ult i64 %278, %279
  %conv386 = zext i1 %cmp385 to i32
  %280 = load i32, i32* %c2, align 4
  %add387 = add i32 %280, %conv386
  store i32 %add387, i32* %c2, align 4
  br label %do.body388

do.body388:                                       ; preds = %do.end369
  %281 = load i64, i64* %c1, align 8
  %282 = load i64, i64* %th371, align 8
  %cmp389 = icmp uge i64 %281, %282
  br i1 %cmp389, label %lor.end394, label %lor.rhs391

lor.rhs391:                                       ; preds = %do.body388
  %283 = load i32, i32* %c2, align 4
  %cmp392 = icmp ne i32 %283, 0
  br label %lor.end394

lor.end394:                                       ; preds = %lor.rhs391, %do.body388
  %284 = phi i1 [ true, %do.body388 ], [ %cmp392, %lor.rhs391 ]
  %lor.ext395 = zext i1 %284 to i32
  br label %do.end396

do.end396:                                        ; preds = %lor.end394
  %285 = load i64, i64* %c0, align 8
  %286 = load i64*, i64** %l.addr, align 8
  %arrayidx397 = getelementptr inbounds i64, i64* %286, i64 5
  store i64 %285, i64* %arrayidx397, align 8
  %287 = load i64, i64* %c1, align 8
  store i64 %287, i64* %c0, align 8
  %288 = load i32, i32* %c2, align 4
  %conv398 = zext i32 %288 to i64
  store i64 %conv398, i64* %c1, align 8
  store i32 0, i32* %c2, align 4
  %289 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d402 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %289, i32 0, i32 0
  %arrayidx403 = getelementptr inbounds [4 x i64], [4 x i64]* %d402, i64 0, i64 3
  %290 = load i64, i64* %arrayidx403, align 8
  %291 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d404 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %291, i32 0, i32 0
  %arrayidx405 = getelementptr inbounds [4 x i64], [4 x i64]* %d404, i64 0, i64 3
  %292 = load i64, i64* %arrayidx405, align 8
  call void @secp256k1_u128_mul(i128* noundef %t401, i64 noundef %290, i64 noundef %292)
  %call406 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t401)
  store i64 %call406, i64* %th400, align 8
  %call407 = call i64 @secp256k1_u128_to_u64(i128* noundef %t401)
  store i64 %call407, i64* %tl399, align 8
  %293 = load i64, i64* %tl399, align 8
  %294 = load i64, i64* %c0, align 8
  %add408 = add i64 %294, %293
  store i64 %add408, i64* %c0, align 8
  %295 = load i64, i64* %c0, align 8
  %296 = load i64, i64* %tl399, align 8
  %cmp409 = icmp ult i64 %295, %296
  %conv410 = zext i1 %cmp409 to i32
  %conv411 = sext i32 %conv410 to i64
  %297 = load i64, i64* %th400, align 8
  %add412 = add i64 %297, %conv411
  store i64 %add412, i64* %th400, align 8
  %298 = load i64, i64* %th400, align 8
  %299 = load i64, i64* %c1, align 8
  %add413 = add i64 %299, %298
  store i64 %add413, i64* %c1, align 8
  br label %do.body414

do.body414:                                       ; preds = %do.end396
  %300 = load i64, i64* %c1, align 8
  %301 = load i64, i64* %th400, align 8
  %cmp415 = icmp uge i64 %300, %301
  %conv416 = zext i1 %cmp415 to i32
  br label %do.end417

do.end417:                                        ; preds = %do.body414
  %302 = load i64, i64* %c0, align 8
  %303 = load i64*, i64** %l.addr, align 8
  %arrayidx418 = getelementptr inbounds i64, i64* %303, i64 6
  store i64 %302, i64* %arrayidx418, align 8
  %304 = load i64, i64* %c1, align 8
  store i64 %304, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body419

do.body419:                                       ; preds = %do.end417
  %305 = load i32, i32* %c2, align 4
  %cmp420 = icmp eq i32 %305, 0
  %conv421 = zext i1 %cmp420 to i32
  br label %do.end422

do.end422:                                        ; preds = %do.body419
  br label %do.body423

do.body423:                                       ; preds = %do.end422
  %306 = load i64, i64* %c1, align 8
  %cmp424 = icmp eq i64 %306, 0
  %conv425 = zext i1 %cmp424 to i32
  br label %do.end426

do.end426:                                        ; preds = %do.body423
  %307 = load i64, i64* %c0, align 8
  %308 = load i64*, i64** %l.addr, align 8
  %arrayidx427 = getelementptr inbounds i64, i64* %308, i64 7
  store i64 %307, i64* %arrayidx427, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_reduce_512(%struct.secp256k1_scalar* noundef %r, i64* noundef %l) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %l.addr = alloca i64*, align 8
  %c128 = alloca i128, align 16
  %c = alloca i64, align 8
  %c0 = alloca i64, align 8
  %c1 = alloca i64, align 8
  %c2 = alloca i64, align 8
  %n0 = alloca i64, align 8
  %n1 = alloca i64, align 8
  %n2 = alloca i64, align 8
  %n3 = alloca i64, align 8
  %m0 = alloca i64, align 8
  %m1 = alloca i64, align 8
  %m2 = alloca i64, align 8
  %m3 = alloca i64, align 8
  %m4 = alloca i64, align 8
  %m5 = alloca i64, align 8
  %m6 = alloca i32, align 4
  %p0 = alloca i64, align 8
  %p1 = alloca i64, align 8
  %p2 = alloca i64, align 8
  %p3 = alloca i64, align 8
  %p4 = alloca i32, align 4
  %tl = alloca i64, align 8
  %th = alloca i64, align 8
  %t = alloca i128, align 16
  %tl33 = alloca i64, align 8
  %th34 = alloca i64, align 8
  %t35 = alloca i128, align 16
  %tl54 = alloca i64, align 8
  %th55 = alloca i64, align 8
  %t56 = alloca i128, align 16
  %over = alloca i32, align 4
  %tl90 = alloca i64, align 8
  %th91 = alloca i64, align 8
  %t92 = alloca i128, align 16
  %tl114 = alloca i64, align 8
  %th115 = alloca i64, align 8
  %t116 = alloca i128, align 16
  %over138 = alloca i32, align 4
  %over149 = alloca i32, align 4
  %tl162 = alloca i64, align 8
  %th163 = alloca i64, align 8
  %t164 = alloca i128, align 16
  %tl186 = alloca i64, align 8
  %th187 = alloca i64, align 8
  %t188 = alloca i128, align 16
  %over210 = alloca i32, align 4
  %tl221 = alloca i64, align 8
  %th222 = alloca i64, align 8
  %t223 = alloca i128, align 16
  %over245 = alloca i32, align 4
  %tl281 = alloca i64, align 8
  %th282 = alloca i64, align 8
  %t283 = alloca i128, align 16
  %tl316 = alloca i64, align 8
  %th317 = alloca i64, align 8
  %t318 = alloca i128, align 16
  %tl340 = alloca i64, align 8
  %th341 = alloca i64, align 8
  %t342 = alloca i128, align 16
  %over364 = alloca i32, align 4
  %tl375 = alloca i64, align 8
  %th376 = alloca i64, align 8
  %t377 = alloca i128, align 16
  %tl400 = alloca i64, align 8
  %th401 = alloca i64, align 8
  %t402 = alloca i128, align 16
  %over424 = alloca i32, align 4
  %tl451 = alloca i64, align 8
  %th452 = alloca i64, align 8
  %t453 = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i64* %l, i64** %l.addr, align 8
  %0 = load i64*, i64** %l.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 4
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %n0, align 8
  %2 = load i64*, i64** %l.addr, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 5
  %3 = load i64, i64* %arrayidx1, align 8
  store i64 %3, i64* %n1, align 8
  %4 = load i64*, i64** %l.addr, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 6
  %5 = load i64, i64* %arrayidx2, align 8
  store i64 %5, i64* %n2, align 8
  %6 = load i64*, i64** %l.addr, align 8
  %arrayidx3 = getelementptr inbounds i64, i64* %6, i64 7
  %7 = load i64, i64* %arrayidx3, align 8
  store i64 %7, i64* %n3, align 8
  %8 = load i64*, i64** %l.addr, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %8, i64 0
  %9 = load i64, i64* %arrayidx4, align 8
  store i64 %9, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %10 = load i64, i64* %n0, align 8
  call void @secp256k1_u128_mul(i128* noundef %t, i64 noundef %10, i64 noundef 4624529908474429119)
  %call = call i64 @secp256k1_u128_hi_u64(i128* noundef %t)
  store i64 %call, i64* %th, align 8
  %call5 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  store i64 %call5, i64* %tl, align 8
  %11 = load i64, i64* %tl, align 8
  %12 = load i64, i64* %c0, align 8
  %add = add i64 %12, %11
  store i64 %add, i64* %c0, align 8
  %13 = load i64, i64* %c0, align 8
  %14 = load i64, i64* %tl, align 8
  %cmp = icmp ult i64 %13, %14
  %conv = zext i1 %cmp to i32
  %conv6 = sext i32 %conv to i64
  %15 = load i64, i64* %th, align 8
  %add7 = add i64 %15, %conv6
  store i64 %add7, i64* %th, align 8
  %16 = load i64, i64* %th, align 8
  %17 = load i64, i64* %c1, align 8
  %add8 = add i64 %17, %16
  store i64 %add8, i64* %c1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %18 = load i64, i64* %c1, align 8
  %19 = load i64, i64* %th, align 8
  %cmp9 = icmp uge i64 %18, %19
  %conv10 = zext i1 %cmp9 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %20 = load i64, i64* %c0, align 8
  store i64 %20, i64* %m0, align 8
  %21 = load i64, i64* %c1, align 8
  store i64 %21, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %22 = load i64, i64* %c2, align 8
  %cmp12 = icmp eq i64 %22, 0
  %conv13 = zext i1 %cmp12 to i32
  br label %do.end14

do.end14:                                         ; preds = %do.body11
  %23 = load i64*, i64** %l.addr, align 8
  %arrayidx15 = getelementptr inbounds i64, i64* %23, i64 1
  %24 = load i64, i64* %arrayidx15, align 8
  %25 = load i64, i64* %c0, align 8
  %add16 = add i64 %25, %24
  store i64 %add16, i64* %c0, align 8
  %26 = load i64, i64* %c0, align 8
  %27 = load i64*, i64** %l.addr, align 8
  %arrayidx17 = getelementptr inbounds i64, i64* %27, i64 1
  %28 = load i64, i64* %arrayidx17, align 8
  %cmp18 = icmp ult i64 %26, %28
  %conv19 = zext i1 %cmp18 to i32
  %conv20 = sext i32 %conv19 to i64
  %29 = load i64, i64* %c1, align 8
  %add21 = add i64 %29, %conv20
  store i64 %add21, i64* %c1, align 8
  br label %do.body22

do.body22:                                        ; preds = %do.end14
  %30 = load i64, i64* %c1, align 8
  %cmp23 = icmp ne i64 %30, 0
  %conv24 = zext i1 %cmp23 to i32
  %31 = load i64, i64* %c0, align 8
  %32 = load i64*, i64** %l.addr, align 8
  %arrayidx25 = getelementptr inbounds i64, i64* %32, i64 1
  %33 = load i64, i64* %arrayidx25, align 8
  %cmp26 = icmp uge i64 %31, %33
  %conv27 = zext i1 %cmp26 to i32
  %or = or i32 %conv24, %conv27
  br label %do.end28

do.end28:                                         ; preds = %do.body22
  br label %do.body29

do.body29:                                        ; preds = %do.end28
  %34 = load i64, i64* %c2, align 8
  %cmp30 = icmp eq i64 %34, 0
  %conv31 = zext i1 %cmp30 to i32
  br label %do.end32

do.end32:                                         ; preds = %do.body29
  %35 = load i64, i64* %n1, align 8
  call void @secp256k1_u128_mul(i128* noundef %t35, i64 noundef %35, i64 noundef 4624529908474429119)
  %call36 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t35)
  store i64 %call36, i64* %th34, align 8
  %call37 = call i64 @secp256k1_u128_to_u64(i128* noundef %t35)
  store i64 %call37, i64* %tl33, align 8
  %36 = load i64, i64* %tl33, align 8
  %37 = load i64, i64* %c0, align 8
  %add38 = add i64 %37, %36
  store i64 %add38, i64* %c0, align 8
  %38 = load i64, i64* %c0, align 8
  %39 = load i64, i64* %tl33, align 8
  %cmp39 = icmp ult i64 %38, %39
  %conv40 = zext i1 %cmp39 to i32
  %conv41 = sext i32 %conv40 to i64
  %40 = load i64, i64* %th34, align 8
  %add42 = add i64 %40, %conv41
  store i64 %add42, i64* %th34, align 8
  %41 = load i64, i64* %th34, align 8
  %42 = load i64, i64* %c1, align 8
  %add43 = add i64 %42, %41
  store i64 %add43, i64* %c1, align 8
  %43 = load i64, i64* %c1, align 8
  %44 = load i64, i64* %th34, align 8
  %cmp44 = icmp ult i64 %43, %44
  %conv45 = zext i1 %cmp44 to i32
  %conv46 = sext i32 %conv45 to i64
  %45 = load i64, i64* %c2, align 8
  %add47 = add i64 %45, %conv46
  store i64 %add47, i64* %c2, align 8
  br label %do.body48

do.body48:                                        ; preds = %do.end32
  %46 = load i64, i64* %c1, align 8
  %47 = load i64, i64* %th34, align 8
  %cmp49 = icmp uge i64 %46, %47
  br i1 %cmp49, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body48
  %48 = load i64, i64* %c2, align 8
  %cmp51 = icmp ne i64 %48, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body48
  %49 = phi i1 [ true, %do.body48 ], [ %cmp51, %lor.rhs ]
  %lor.ext = zext i1 %49 to i32
  br label %do.end53

do.end53:                                         ; preds = %lor.end
  %50 = load i64, i64* %n0, align 8
  call void @secp256k1_u128_mul(i128* noundef %t56, i64 noundef %50, i64 noundef 4994812053365940164)
  %call57 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t56)
  store i64 %call57, i64* %th55, align 8
  %call58 = call i64 @secp256k1_u128_to_u64(i128* noundef %t56)
  store i64 %call58, i64* %tl54, align 8
  %51 = load i64, i64* %tl54, align 8
  %52 = load i64, i64* %c0, align 8
  %add59 = add i64 %52, %51
  store i64 %add59, i64* %c0, align 8
  %53 = load i64, i64* %c0, align 8
  %54 = load i64, i64* %tl54, align 8
  %cmp60 = icmp ult i64 %53, %54
  %conv61 = zext i1 %cmp60 to i32
  %conv62 = sext i32 %conv61 to i64
  %55 = load i64, i64* %th55, align 8
  %add63 = add i64 %55, %conv62
  store i64 %add63, i64* %th55, align 8
  %56 = load i64, i64* %th55, align 8
  %57 = load i64, i64* %c1, align 8
  %add64 = add i64 %57, %56
  store i64 %add64, i64* %c1, align 8
  %58 = load i64, i64* %c1, align 8
  %59 = load i64, i64* %th55, align 8
  %cmp65 = icmp ult i64 %58, %59
  %conv66 = zext i1 %cmp65 to i32
  %conv67 = sext i32 %conv66 to i64
  %60 = load i64, i64* %c2, align 8
  %add68 = add i64 %60, %conv67
  store i64 %add68, i64* %c2, align 8
  br label %do.body69

do.body69:                                        ; preds = %do.end53
  %61 = load i64, i64* %c1, align 8
  %62 = load i64, i64* %th55, align 8
  %cmp70 = icmp uge i64 %61, %62
  br i1 %cmp70, label %lor.end75, label %lor.rhs72

lor.rhs72:                                        ; preds = %do.body69
  %63 = load i64, i64* %c2, align 8
  %cmp73 = icmp ne i64 %63, 0
  br label %lor.end75

lor.end75:                                        ; preds = %lor.rhs72, %do.body69
  %64 = phi i1 [ true, %do.body69 ], [ %cmp73, %lor.rhs72 ]
  %lor.ext76 = zext i1 %64 to i32
  br label %do.end77

do.end77:                                         ; preds = %lor.end75
  %65 = load i64, i64* %c0, align 8
  store i64 %65, i64* %m1, align 8
  %66 = load i64, i64* %c1, align 8
  store i64 %66, i64* %c0, align 8
  %67 = load i64, i64* %c2, align 8
  store i64 %67, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %68 = load i64*, i64** %l.addr, align 8
  %arrayidx78 = getelementptr inbounds i64, i64* %68, i64 2
  %69 = load i64, i64* %arrayidx78, align 8
  %70 = load i64, i64* %c0, align 8
  %add79 = add i64 %70, %69
  store i64 %add79, i64* %c0, align 8
  %71 = load i64, i64* %c0, align 8
  %72 = load i64*, i64** %l.addr, align 8
  %arrayidx80 = getelementptr inbounds i64, i64* %72, i64 2
  %73 = load i64, i64* %arrayidx80, align 8
  %cmp81 = icmp ult i64 %71, %73
  %conv82 = zext i1 %cmp81 to i32
  store i32 %conv82, i32* %over, align 4
  %74 = load i32, i32* %over, align 4
  %conv83 = zext i32 %74 to i64
  %75 = load i64, i64* %c1, align 8
  %add84 = add i64 %75, %conv83
  store i64 %add84, i64* %c1, align 8
  %76 = load i64, i64* %c1, align 8
  %77 = load i32, i32* %over, align 4
  %conv85 = zext i32 %77 to i64
  %cmp86 = icmp ult i64 %76, %conv85
  %conv87 = zext i1 %cmp86 to i32
  %conv88 = sext i32 %conv87 to i64
  %78 = load i64, i64* %c2, align 8
  %add89 = add i64 %78, %conv88
  store i64 %add89, i64* %c2, align 8
  %79 = load i64, i64* %n2, align 8
  call void @secp256k1_u128_mul(i128* noundef %t92, i64 noundef %79, i64 noundef 4624529908474429119)
  %call93 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t92)
  store i64 %call93, i64* %th91, align 8
  %call94 = call i64 @secp256k1_u128_to_u64(i128* noundef %t92)
  store i64 %call94, i64* %tl90, align 8
  %80 = load i64, i64* %tl90, align 8
  %81 = load i64, i64* %c0, align 8
  %add95 = add i64 %81, %80
  store i64 %add95, i64* %c0, align 8
  %82 = load i64, i64* %c0, align 8
  %83 = load i64, i64* %tl90, align 8
  %cmp96 = icmp ult i64 %82, %83
  %conv97 = zext i1 %cmp96 to i32
  %conv98 = sext i32 %conv97 to i64
  %84 = load i64, i64* %th91, align 8
  %add99 = add i64 %84, %conv98
  store i64 %add99, i64* %th91, align 8
  %85 = load i64, i64* %th91, align 8
  %86 = load i64, i64* %c1, align 8
  %add100 = add i64 %86, %85
  store i64 %add100, i64* %c1, align 8
  %87 = load i64, i64* %c1, align 8
  %88 = load i64, i64* %th91, align 8
  %cmp101 = icmp ult i64 %87, %88
  %conv102 = zext i1 %cmp101 to i32
  %conv103 = sext i32 %conv102 to i64
  %89 = load i64, i64* %c2, align 8
  %add104 = add i64 %89, %conv103
  store i64 %add104, i64* %c2, align 8
  br label %do.body105

do.body105:                                       ; preds = %do.end77
  %90 = load i64, i64* %c1, align 8
  %91 = load i64, i64* %th91, align 8
  %cmp106 = icmp uge i64 %90, %91
  br i1 %cmp106, label %lor.end111, label %lor.rhs108

lor.rhs108:                                       ; preds = %do.body105
  %92 = load i64, i64* %c2, align 8
  %cmp109 = icmp ne i64 %92, 0
  br label %lor.end111

lor.end111:                                       ; preds = %lor.rhs108, %do.body105
  %93 = phi i1 [ true, %do.body105 ], [ %cmp109, %lor.rhs108 ]
  %lor.ext112 = zext i1 %93 to i32
  br label %do.end113

do.end113:                                        ; preds = %lor.end111
  %94 = load i64, i64* %n1, align 8
  call void @secp256k1_u128_mul(i128* noundef %t116, i64 noundef %94, i64 noundef 4994812053365940164)
  %call117 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t116)
  store i64 %call117, i64* %th115, align 8
  %call118 = call i64 @secp256k1_u128_to_u64(i128* noundef %t116)
  store i64 %call118, i64* %tl114, align 8
  %95 = load i64, i64* %tl114, align 8
  %96 = load i64, i64* %c0, align 8
  %add119 = add i64 %96, %95
  store i64 %add119, i64* %c0, align 8
  %97 = load i64, i64* %c0, align 8
  %98 = load i64, i64* %tl114, align 8
  %cmp120 = icmp ult i64 %97, %98
  %conv121 = zext i1 %cmp120 to i32
  %conv122 = sext i32 %conv121 to i64
  %99 = load i64, i64* %th115, align 8
  %add123 = add i64 %99, %conv122
  store i64 %add123, i64* %th115, align 8
  %100 = load i64, i64* %th115, align 8
  %101 = load i64, i64* %c1, align 8
  %add124 = add i64 %101, %100
  store i64 %add124, i64* %c1, align 8
  %102 = load i64, i64* %c1, align 8
  %103 = load i64, i64* %th115, align 8
  %cmp125 = icmp ult i64 %102, %103
  %conv126 = zext i1 %cmp125 to i32
  %conv127 = sext i32 %conv126 to i64
  %104 = load i64, i64* %c2, align 8
  %add128 = add i64 %104, %conv127
  store i64 %add128, i64* %c2, align 8
  br label %do.body129

do.body129:                                       ; preds = %do.end113
  %105 = load i64, i64* %c1, align 8
  %106 = load i64, i64* %th115, align 8
  %cmp130 = icmp uge i64 %105, %106
  br i1 %cmp130, label %lor.end135, label %lor.rhs132

lor.rhs132:                                       ; preds = %do.body129
  %107 = load i64, i64* %c2, align 8
  %cmp133 = icmp ne i64 %107, 0
  br label %lor.end135

lor.end135:                                       ; preds = %lor.rhs132, %do.body129
  %108 = phi i1 [ true, %do.body129 ], [ %cmp133, %lor.rhs132 ]
  %lor.ext136 = zext i1 %108 to i32
  br label %do.end137

do.end137:                                        ; preds = %lor.end135
  %109 = load i64, i64* %n0, align 8
  %110 = load i64, i64* %c0, align 8
  %add139 = add i64 %110, %109
  store i64 %add139, i64* %c0, align 8
  %111 = load i64, i64* %c0, align 8
  %112 = load i64, i64* %n0, align 8
  %cmp140 = icmp ult i64 %111, %112
  %conv141 = zext i1 %cmp140 to i32
  store i32 %conv141, i32* %over138, align 4
  %113 = load i32, i32* %over138, align 4
  %conv142 = zext i32 %113 to i64
  %114 = load i64, i64* %c1, align 8
  %add143 = add i64 %114, %conv142
  store i64 %add143, i64* %c1, align 8
  %115 = load i64, i64* %c1, align 8
  %116 = load i32, i32* %over138, align 4
  %conv144 = zext i32 %116 to i64
  %cmp145 = icmp ult i64 %115, %conv144
  %conv146 = zext i1 %cmp145 to i32
  %conv147 = sext i32 %conv146 to i64
  %117 = load i64, i64* %c2, align 8
  %add148 = add i64 %117, %conv147
  store i64 %add148, i64* %c2, align 8
  %118 = load i64, i64* %c0, align 8
  store i64 %118, i64* %m2, align 8
  %119 = load i64, i64* %c1, align 8
  store i64 %119, i64* %c0, align 8
  %120 = load i64, i64* %c2, align 8
  store i64 %120, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %121 = load i64*, i64** %l.addr, align 8
  %arrayidx150 = getelementptr inbounds i64, i64* %121, i64 3
  %122 = load i64, i64* %arrayidx150, align 8
  %123 = load i64, i64* %c0, align 8
  %add151 = add i64 %123, %122
  store i64 %add151, i64* %c0, align 8
  %124 = load i64, i64* %c0, align 8
  %125 = load i64*, i64** %l.addr, align 8
  %arrayidx152 = getelementptr inbounds i64, i64* %125, i64 3
  %126 = load i64, i64* %arrayidx152, align 8
  %cmp153 = icmp ult i64 %124, %126
  %conv154 = zext i1 %cmp153 to i32
  store i32 %conv154, i32* %over149, align 4
  %127 = load i32, i32* %over149, align 4
  %conv155 = zext i32 %127 to i64
  %128 = load i64, i64* %c1, align 8
  %add156 = add i64 %128, %conv155
  store i64 %add156, i64* %c1, align 8
  %129 = load i64, i64* %c1, align 8
  %130 = load i32, i32* %over149, align 4
  %conv157 = zext i32 %130 to i64
  %cmp158 = icmp ult i64 %129, %conv157
  %conv159 = zext i1 %cmp158 to i32
  %conv160 = sext i32 %conv159 to i64
  %131 = load i64, i64* %c2, align 8
  %add161 = add i64 %131, %conv160
  store i64 %add161, i64* %c2, align 8
  %132 = load i64, i64* %n3, align 8
  call void @secp256k1_u128_mul(i128* noundef %t164, i64 noundef %132, i64 noundef 4624529908474429119)
  %call165 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t164)
  store i64 %call165, i64* %th163, align 8
  %call166 = call i64 @secp256k1_u128_to_u64(i128* noundef %t164)
  store i64 %call166, i64* %tl162, align 8
  %133 = load i64, i64* %tl162, align 8
  %134 = load i64, i64* %c0, align 8
  %add167 = add i64 %134, %133
  store i64 %add167, i64* %c0, align 8
  %135 = load i64, i64* %c0, align 8
  %136 = load i64, i64* %tl162, align 8
  %cmp168 = icmp ult i64 %135, %136
  %conv169 = zext i1 %cmp168 to i32
  %conv170 = sext i32 %conv169 to i64
  %137 = load i64, i64* %th163, align 8
  %add171 = add i64 %137, %conv170
  store i64 %add171, i64* %th163, align 8
  %138 = load i64, i64* %th163, align 8
  %139 = load i64, i64* %c1, align 8
  %add172 = add i64 %139, %138
  store i64 %add172, i64* %c1, align 8
  %140 = load i64, i64* %c1, align 8
  %141 = load i64, i64* %th163, align 8
  %cmp173 = icmp ult i64 %140, %141
  %conv174 = zext i1 %cmp173 to i32
  %conv175 = sext i32 %conv174 to i64
  %142 = load i64, i64* %c2, align 8
  %add176 = add i64 %142, %conv175
  store i64 %add176, i64* %c2, align 8
  br label %do.body177

do.body177:                                       ; preds = %do.end137
  %143 = load i64, i64* %c1, align 8
  %144 = load i64, i64* %th163, align 8
  %cmp178 = icmp uge i64 %143, %144
  br i1 %cmp178, label %lor.end183, label %lor.rhs180

lor.rhs180:                                       ; preds = %do.body177
  %145 = load i64, i64* %c2, align 8
  %cmp181 = icmp ne i64 %145, 0
  br label %lor.end183

lor.end183:                                       ; preds = %lor.rhs180, %do.body177
  %146 = phi i1 [ true, %do.body177 ], [ %cmp181, %lor.rhs180 ]
  %lor.ext184 = zext i1 %146 to i32
  br label %do.end185

do.end185:                                        ; preds = %lor.end183
  %147 = load i64, i64* %n2, align 8
  call void @secp256k1_u128_mul(i128* noundef %t188, i64 noundef %147, i64 noundef 4994812053365940164)
  %call189 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t188)
  store i64 %call189, i64* %th187, align 8
  %call190 = call i64 @secp256k1_u128_to_u64(i128* noundef %t188)
  store i64 %call190, i64* %tl186, align 8
  %148 = load i64, i64* %tl186, align 8
  %149 = load i64, i64* %c0, align 8
  %add191 = add i64 %149, %148
  store i64 %add191, i64* %c0, align 8
  %150 = load i64, i64* %c0, align 8
  %151 = load i64, i64* %tl186, align 8
  %cmp192 = icmp ult i64 %150, %151
  %conv193 = zext i1 %cmp192 to i32
  %conv194 = sext i32 %conv193 to i64
  %152 = load i64, i64* %th187, align 8
  %add195 = add i64 %152, %conv194
  store i64 %add195, i64* %th187, align 8
  %153 = load i64, i64* %th187, align 8
  %154 = load i64, i64* %c1, align 8
  %add196 = add i64 %154, %153
  store i64 %add196, i64* %c1, align 8
  %155 = load i64, i64* %c1, align 8
  %156 = load i64, i64* %th187, align 8
  %cmp197 = icmp ult i64 %155, %156
  %conv198 = zext i1 %cmp197 to i32
  %conv199 = sext i32 %conv198 to i64
  %157 = load i64, i64* %c2, align 8
  %add200 = add i64 %157, %conv199
  store i64 %add200, i64* %c2, align 8
  br label %do.body201

do.body201:                                       ; preds = %do.end185
  %158 = load i64, i64* %c1, align 8
  %159 = load i64, i64* %th187, align 8
  %cmp202 = icmp uge i64 %158, %159
  br i1 %cmp202, label %lor.end207, label %lor.rhs204

lor.rhs204:                                       ; preds = %do.body201
  %160 = load i64, i64* %c2, align 8
  %cmp205 = icmp ne i64 %160, 0
  br label %lor.end207

lor.end207:                                       ; preds = %lor.rhs204, %do.body201
  %161 = phi i1 [ true, %do.body201 ], [ %cmp205, %lor.rhs204 ]
  %lor.ext208 = zext i1 %161 to i32
  br label %do.end209

do.end209:                                        ; preds = %lor.end207
  %162 = load i64, i64* %n1, align 8
  %163 = load i64, i64* %c0, align 8
  %add211 = add i64 %163, %162
  store i64 %add211, i64* %c0, align 8
  %164 = load i64, i64* %c0, align 8
  %165 = load i64, i64* %n1, align 8
  %cmp212 = icmp ult i64 %164, %165
  %conv213 = zext i1 %cmp212 to i32
  store i32 %conv213, i32* %over210, align 4
  %166 = load i32, i32* %over210, align 4
  %conv214 = zext i32 %166 to i64
  %167 = load i64, i64* %c1, align 8
  %add215 = add i64 %167, %conv214
  store i64 %add215, i64* %c1, align 8
  %168 = load i64, i64* %c1, align 8
  %169 = load i32, i32* %over210, align 4
  %conv216 = zext i32 %169 to i64
  %cmp217 = icmp ult i64 %168, %conv216
  %conv218 = zext i1 %cmp217 to i32
  %conv219 = sext i32 %conv218 to i64
  %170 = load i64, i64* %c2, align 8
  %add220 = add i64 %170, %conv219
  store i64 %add220, i64* %c2, align 8
  %171 = load i64, i64* %c0, align 8
  store i64 %171, i64* %m3, align 8
  %172 = load i64, i64* %c1, align 8
  store i64 %172, i64* %c0, align 8
  %173 = load i64, i64* %c2, align 8
  store i64 %173, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %174 = load i64, i64* %n3, align 8
  call void @secp256k1_u128_mul(i128* noundef %t223, i64 noundef %174, i64 noundef 4994812053365940164)
  %call224 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t223)
  store i64 %call224, i64* %th222, align 8
  %call225 = call i64 @secp256k1_u128_to_u64(i128* noundef %t223)
  store i64 %call225, i64* %tl221, align 8
  %175 = load i64, i64* %tl221, align 8
  %176 = load i64, i64* %c0, align 8
  %add226 = add i64 %176, %175
  store i64 %add226, i64* %c0, align 8
  %177 = load i64, i64* %c0, align 8
  %178 = load i64, i64* %tl221, align 8
  %cmp227 = icmp ult i64 %177, %178
  %conv228 = zext i1 %cmp227 to i32
  %conv229 = sext i32 %conv228 to i64
  %179 = load i64, i64* %th222, align 8
  %add230 = add i64 %179, %conv229
  store i64 %add230, i64* %th222, align 8
  %180 = load i64, i64* %th222, align 8
  %181 = load i64, i64* %c1, align 8
  %add231 = add i64 %181, %180
  store i64 %add231, i64* %c1, align 8
  %182 = load i64, i64* %c1, align 8
  %183 = load i64, i64* %th222, align 8
  %cmp232 = icmp ult i64 %182, %183
  %conv233 = zext i1 %cmp232 to i32
  %conv234 = sext i32 %conv233 to i64
  %184 = load i64, i64* %c2, align 8
  %add235 = add i64 %184, %conv234
  store i64 %add235, i64* %c2, align 8
  br label %do.body236

do.body236:                                       ; preds = %do.end209
  %185 = load i64, i64* %c1, align 8
  %186 = load i64, i64* %th222, align 8
  %cmp237 = icmp uge i64 %185, %186
  br i1 %cmp237, label %lor.end242, label %lor.rhs239

lor.rhs239:                                       ; preds = %do.body236
  %187 = load i64, i64* %c2, align 8
  %cmp240 = icmp ne i64 %187, 0
  br label %lor.end242

lor.end242:                                       ; preds = %lor.rhs239, %do.body236
  %188 = phi i1 [ true, %do.body236 ], [ %cmp240, %lor.rhs239 ]
  %lor.ext243 = zext i1 %188 to i32
  br label %do.end244

do.end244:                                        ; preds = %lor.end242
  %189 = load i64, i64* %n2, align 8
  %190 = load i64, i64* %c0, align 8
  %add246 = add i64 %190, %189
  store i64 %add246, i64* %c0, align 8
  %191 = load i64, i64* %c0, align 8
  %192 = load i64, i64* %n2, align 8
  %cmp247 = icmp ult i64 %191, %192
  %conv248 = zext i1 %cmp247 to i32
  store i32 %conv248, i32* %over245, align 4
  %193 = load i32, i32* %over245, align 4
  %conv249 = zext i32 %193 to i64
  %194 = load i64, i64* %c1, align 8
  %add250 = add i64 %194, %conv249
  store i64 %add250, i64* %c1, align 8
  %195 = load i64, i64* %c1, align 8
  %196 = load i32, i32* %over245, align 4
  %conv251 = zext i32 %196 to i64
  %cmp252 = icmp ult i64 %195, %conv251
  %conv253 = zext i1 %cmp252 to i32
  %conv254 = sext i32 %conv253 to i64
  %197 = load i64, i64* %c2, align 8
  %add255 = add i64 %197, %conv254
  store i64 %add255, i64* %c2, align 8
  %198 = load i64, i64* %c0, align 8
  store i64 %198, i64* %m4, align 8
  %199 = load i64, i64* %c1, align 8
  store i64 %199, i64* %c0, align 8
  %200 = load i64, i64* %c2, align 8
  store i64 %200, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %201 = load i64, i64* %n3, align 8
  %202 = load i64, i64* %c0, align 8
  %add256 = add i64 %202, %201
  store i64 %add256, i64* %c0, align 8
  %203 = load i64, i64* %c0, align 8
  %204 = load i64, i64* %n3, align 8
  %cmp257 = icmp ult i64 %203, %204
  %conv258 = zext i1 %cmp257 to i32
  %conv259 = sext i32 %conv258 to i64
  %205 = load i64, i64* %c1, align 8
  %add260 = add i64 %205, %conv259
  store i64 %add260, i64* %c1, align 8
  br label %do.body261

do.body261:                                       ; preds = %do.end244
  %206 = load i64, i64* %c1, align 8
  %cmp262 = icmp ne i64 %206, 0
  %conv263 = zext i1 %cmp262 to i32
  %207 = load i64, i64* %c0, align 8
  %208 = load i64, i64* %n3, align 8
  %cmp264 = icmp uge i64 %207, %208
  %conv265 = zext i1 %cmp264 to i32
  %or266 = or i32 %conv263, %conv265
  br label %do.end267

do.end267:                                        ; preds = %do.body261
  br label %do.body268

do.body268:                                       ; preds = %do.end267
  %209 = load i64, i64* %c2, align 8
  %cmp269 = icmp eq i64 %209, 0
  %conv270 = zext i1 %cmp269 to i32
  br label %do.end271

do.end271:                                        ; preds = %do.body268
  %210 = load i64, i64* %c0, align 8
  store i64 %210, i64* %m5, align 8
  %211 = load i64, i64* %c1, align 8
  store i64 %211, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body272

do.body272:                                       ; preds = %do.end271
  %212 = load i64, i64* %c2, align 8
  %cmp273 = icmp eq i64 %212, 0
  %conv274 = zext i1 %cmp273 to i32
  br label %do.end275

do.end275:                                        ; preds = %do.body272
  br label %do.body276

do.body276:                                       ; preds = %do.end275
  %213 = load i64, i64* %c0, align 8
  %cmp277 = icmp ule i64 %213, 1
  %conv278 = zext i1 %cmp277 to i32
  br label %do.end279

do.end279:                                        ; preds = %do.body276
  %214 = load i64, i64* %c0, align 8
  %conv280 = trunc i64 %214 to i32
  store i32 %conv280, i32* %m6, align 4
  %215 = load i64, i64* %m0, align 8
  store i64 %215, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %216 = load i64, i64* %m4, align 8
  call void @secp256k1_u128_mul(i128* noundef %t283, i64 noundef %216, i64 noundef 4624529908474429119)
  %call284 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t283)
  store i64 %call284, i64* %th282, align 8
  %call285 = call i64 @secp256k1_u128_to_u64(i128* noundef %t283)
  store i64 %call285, i64* %tl281, align 8
  %217 = load i64, i64* %tl281, align 8
  %218 = load i64, i64* %c0, align 8
  %add286 = add i64 %218, %217
  store i64 %add286, i64* %c0, align 8
  %219 = load i64, i64* %c0, align 8
  %220 = load i64, i64* %tl281, align 8
  %cmp287 = icmp ult i64 %219, %220
  %conv288 = zext i1 %cmp287 to i32
  %conv289 = sext i32 %conv288 to i64
  %221 = load i64, i64* %th282, align 8
  %add290 = add i64 %221, %conv289
  store i64 %add290, i64* %th282, align 8
  %222 = load i64, i64* %th282, align 8
  %223 = load i64, i64* %c1, align 8
  %add291 = add i64 %223, %222
  store i64 %add291, i64* %c1, align 8
  br label %do.body292

do.body292:                                       ; preds = %do.end279
  %224 = load i64, i64* %c1, align 8
  %225 = load i64, i64* %th282, align 8
  %cmp293 = icmp uge i64 %224, %225
  %conv294 = zext i1 %cmp293 to i32
  br label %do.end295

do.end295:                                        ; preds = %do.body292
  %226 = load i64, i64* %c0, align 8
  store i64 %226, i64* %p0, align 8
  %227 = load i64, i64* %c1, align 8
  store i64 %227, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body296

do.body296:                                       ; preds = %do.end295
  %228 = load i64, i64* %c2, align 8
  %cmp297 = icmp eq i64 %228, 0
  %conv298 = zext i1 %cmp297 to i32
  br label %do.end299

do.end299:                                        ; preds = %do.body296
  %229 = load i64, i64* %m1, align 8
  %230 = load i64, i64* %c0, align 8
  %add300 = add i64 %230, %229
  store i64 %add300, i64* %c0, align 8
  %231 = load i64, i64* %c0, align 8
  %232 = load i64, i64* %m1, align 8
  %cmp301 = icmp ult i64 %231, %232
  %conv302 = zext i1 %cmp301 to i32
  %conv303 = sext i32 %conv302 to i64
  %233 = load i64, i64* %c1, align 8
  %add304 = add i64 %233, %conv303
  store i64 %add304, i64* %c1, align 8
  br label %do.body305

do.body305:                                       ; preds = %do.end299
  %234 = load i64, i64* %c1, align 8
  %cmp306 = icmp ne i64 %234, 0
  %conv307 = zext i1 %cmp306 to i32
  %235 = load i64, i64* %c0, align 8
  %236 = load i64, i64* %m1, align 8
  %cmp308 = icmp uge i64 %235, %236
  %conv309 = zext i1 %cmp308 to i32
  %or310 = or i32 %conv307, %conv309
  br label %do.end311

do.end311:                                        ; preds = %do.body305
  br label %do.body312

do.body312:                                       ; preds = %do.end311
  %237 = load i64, i64* %c2, align 8
  %cmp313 = icmp eq i64 %237, 0
  %conv314 = zext i1 %cmp313 to i32
  br label %do.end315

do.end315:                                        ; preds = %do.body312
  %238 = load i64, i64* %m5, align 8
  call void @secp256k1_u128_mul(i128* noundef %t318, i64 noundef %238, i64 noundef 4624529908474429119)
  %call319 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t318)
  store i64 %call319, i64* %th317, align 8
  %call320 = call i64 @secp256k1_u128_to_u64(i128* noundef %t318)
  store i64 %call320, i64* %tl316, align 8
  %239 = load i64, i64* %tl316, align 8
  %240 = load i64, i64* %c0, align 8
  %add321 = add i64 %240, %239
  store i64 %add321, i64* %c0, align 8
  %241 = load i64, i64* %c0, align 8
  %242 = load i64, i64* %tl316, align 8
  %cmp322 = icmp ult i64 %241, %242
  %conv323 = zext i1 %cmp322 to i32
  %conv324 = sext i32 %conv323 to i64
  %243 = load i64, i64* %th317, align 8
  %add325 = add i64 %243, %conv324
  store i64 %add325, i64* %th317, align 8
  %244 = load i64, i64* %th317, align 8
  %245 = load i64, i64* %c1, align 8
  %add326 = add i64 %245, %244
  store i64 %add326, i64* %c1, align 8
  %246 = load i64, i64* %c1, align 8
  %247 = load i64, i64* %th317, align 8
  %cmp327 = icmp ult i64 %246, %247
  %conv328 = zext i1 %cmp327 to i32
  %conv329 = sext i32 %conv328 to i64
  %248 = load i64, i64* %c2, align 8
  %add330 = add i64 %248, %conv329
  store i64 %add330, i64* %c2, align 8
  br label %do.body331

do.body331:                                       ; preds = %do.end315
  %249 = load i64, i64* %c1, align 8
  %250 = load i64, i64* %th317, align 8
  %cmp332 = icmp uge i64 %249, %250
  br i1 %cmp332, label %lor.end337, label %lor.rhs334

lor.rhs334:                                       ; preds = %do.body331
  %251 = load i64, i64* %c2, align 8
  %cmp335 = icmp ne i64 %251, 0
  br label %lor.end337

lor.end337:                                       ; preds = %lor.rhs334, %do.body331
  %252 = phi i1 [ true, %do.body331 ], [ %cmp335, %lor.rhs334 ]
  %lor.ext338 = zext i1 %252 to i32
  br label %do.end339

do.end339:                                        ; preds = %lor.end337
  %253 = load i64, i64* %m4, align 8
  call void @secp256k1_u128_mul(i128* noundef %t342, i64 noundef %253, i64 noundef 4994812053365940164)
  %call343 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t342)
  store i64 %call343, i64* %th341, align 8
  %call344 = call i64 @secp256k1_u128_to_u64(i128* noundef %t342)
  store i64 %call344, i64* %tl340, align 8
  %254 = load i64, i64* %tl340, align 8
  %255 = load i64, i64* %c0, align 8
  %add345 = add i64 %255, %254
  store i64 %add345, i64* %c0, align 8
  %256 = load i64, i64* %c0, align 8
  %257 = load i64, i64* %tl340, align 8
  %cmp346 = icmp ult i64 %256, %257
  %conv347 = zext i1 %cmp346 to i32
  %conv348 = sext i32 %conv347 to i64
  %258 = load i64, i64* %th341, align 8
  %add349 = add i64 %258, %conv348
  store i64 %add349, i64* %th341, align 8
  %259 = load i64, i64* %th341, align 8
  %260 = load i64, i64* %c1, align 8
  %add350 = add i64 %260, %259
  store i64 %add350, i64* %c1, align 8
  %261 = load i64, i64* %c1, align 8
  %262 = load i64, i64* %th341, align 8
  %cmp351 = icmp ult i64 %261, %262
  %conv352 = zext i1 %cmp351 to i32
  %conv353 = sext i32 %conv352 to i64
  %263 = load i64, i64* %c2, align 8
  %add354 = add i64 %263, %conv353
  store i64 %add354, i64* %c2, align 8
  br label %do.body355

do.body355:                                       ; preds = %do.end339
  %264 = load i64, i64* %c1, align 8
  %265 = load i64, i64* %th341, align 8
  %cmp356 = icmp uge i64 %264, %265
  br i1 %cmp356, label %lor.end361, label %lor.rhs358

lor.rhs358:                                       ; preds = %do.body355
  %266 = load i64, i64* %c2, align 8
  %cmp359 = icmp ne i64 %266, 0
  br label %lor.end361

lor.end361:                                       ; preds = %lor.rhs358, %do.body355
  %267 = phi i1 [ true, %do.body355 ], [ %cmp359, %lor.rhs358 ]
  %lor.ext362 = zext i1 %267 to i32
  br label %do.end363

do.end363:                                        ; preds = %lor.end361
  %268 = load i64, i64* %c0, align 8
  store i64 %268, i64* %p1, align 8
  %269 = load i64, i64* %c1, align 8
  store i64 %269, i64* %c0, align 8
  %270 = load i64, i64* %c2, align 8
  store i64 %270, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %271 = load i64, i64* %m2, align 8
  %272 = load i64, i64* %c0, align 8
  %add365 = add i64 %272, %271
  store i64 %add365, i64* %c0, align 8
  %273 = load i64, i64* %c0, align 8
  %274 = load i64, i64* %m2, align 8
  %cmp366 = icmp ult i64 %273, %274
  %conv367 = zext i1 %cmp366 to i32
  store i32 %conv367, i32* %over364, align 4
  %275 = load i32, i32* %over364, align 4
  %conv368 = zext i32 %275 to i64
  %276 = load i64, i64* %c1, align 8
  %add369 = add i64 %276, %conv368
  store i64 %add369, i64* %c1, align 8
  %277 = load i64, i64* %c1, align 8
  %278 = load i32, i32* %over364, align 4
  %conv370 = zext i32 %278 to i64
  %cmp371 = icmp ult i64 %277, %conv370
  %conv372 = zext i1 %cmp371 to i32
  %conv373 = sext i32 %conv372 to i64
  %279 = load i64, i64* %c2, align 8
  %add374 = add i64 %279, %conv373
  store i64 %add374, i64* %c2, align 8
  %280 = load i32, i32* %m6, align 4
  %conv378 = zext i32 %280 to i64
  call void @secp256k1_u128_mul(i128* noundef %t377, i64 noundef %conv378, i64 noundef 4624529908474429119)
  %call379 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t377)
  store i64 %call379, i64* %th376, align 8
  %call380 = call i64 @secp256k1_u128_to_u64(i128* noundef %t377)
  store i64 %call380, i64* %tl375, align 8
  %281 = load i64, i64* %tl375, align 8
  %282 = load i64, i64* %c0, align 8
  %add381 = add i64 %282, %281
  store i64 %add381, i64* %c0, align 8
  %283 = load i64, i64* %c0, align 8
  %284 = load i64, i64* %tl375, align 8
  %cmp382 = icmp ult i64 %283, %284
  %conv383 = zext i1 %cmp382 to i32
  %conv384 = sext i32 %conv383 to i64
  %285 = load i64, i64* %th376, align 8
  %add385 = add i64 %285, %conv384
  store i64 %add385, i64* %th376, align 8
  %286 = load i64, i64* %th376, align 8
  %287 = load i64, i64* %c1, align 8
  %add386 = add i64 %287, %286
  store i64 %add386, i64* %c1, align 8
  %288 = load i64, i64* %c1, align 8
  %289 = load i64, i64* %th376, align 8
  %cmp387 = icmp ult i64 %288, %289
  %conv388 = zext i1 %cmp387 to i32
  %conv389 = sext i32 %conv388 to i64
  %290 = load i64, i64* %c2, align 8
  %add390 = add i64 %290, %conv389
  store i64 %add390, i64* %c2, align 8
  br label %do.body391

do.body391:                                       ; preds = %do.end363
  %291 = load i64, i64* %c1, align 8
  %292 = load i64, i64* %th376, align 8
  %cmp392 = icmp uge i64 %291, %292
  br i1 %cmp392, label %lor.end397, label %lor.rhs394

lor.rhs394:                                       ; preds = %do.body391
  %293 = load i64, i64* %c2, align 8
  %cmp395 = icmp ne i64 %293, 0
  br label %lor.end397

lor.end397:                                       ; preds = %lor.rhs394, %do.body391
  %294 = phi i1 [ true, %do.body391 ], [ %cmp395, %lor.rhs394 ]
  %lor.ext398 = zext i1 %294 to i32
  br label %do.end399

do.end399:                                        ; preds = %lor.end397
  %295 = load i64, i64* %m5, align 8
  call void @secp256k1_u128_mul(i128* noundef %t402, i64 noundef %295, i64 noundef 4994812053365940164)
  %call403 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t402)
  store i64 %call403, i64* %th401, align 8
  %call404 = call i64 @secp256k1_u128_to_u64(i128* noundef %t402)
  store i64 %call404, i64* %tl400, align 8
  %296 = load i64, i64* %tl400, align 8
  %297 = load i64, i64* %c0, align 8
  %add405 = add i64 %297, %296
  store i64 %add405, i64* %c0, align 8
  %298 = load i64, i64* %c0, align 8
  %299 = load i64, i64* %tl400, align 8
  %cmp406 = icmp ult i64 %298, %299
  %conv407 = zext i1 %cmp406 to i32
  %conv408 = sext i32 %conv407 to i64
  %300 = load i64, i64* %th401, align 8
  %add409 = add i64 %300, %conv408
  store i64 %add409, i64* %th401, align 8
  %301 = load i64, i64* %th401, align 8
  %302 = load i64, i64* %c1, align 8
  %add410 = add i64 %302, %301
  store i64 %add410, i64* %c1, align 8
  %303 = load i64, i64* %c1, align 8
  %304 = load i64, i64* %th401, align 8
  %cmp411 = icmp ult i64 %303, %304
  %conv412 = zext i1 %cmp411 to i32
  %conv413 = sext i32 %conv412 to i64
  %305 = load i64, i64* %c2, align 8
  %add414 = add i64 %305, %conv413
  store i64 %add414, i64* %c2, align 8
  br label %do.body415

do.body415:                                       ; preds = %do.end399
  %306 = load i64, i64* %c1, align 8
  %307 = load i64, i64* %th401, align 8
  %cmp416 = icmp uge i64 %306, %307
  br i1 %cmp416, label %lor.end421, label %lor.rhs418

lor.rhs418:                                       ; preds = %do.body415
  %308 = load i64, i64* %c2, align 8
  %cmp419 = icmp ne i64 %308, 0
  br label %lor.end421

lor.end421:                                       ; preds = %lor.rhs418, %do.body415
  %309 = phi i1 [ true, %do.body415 ], [ %cmp419, %lor.rhs418 ]
  %lor.ext422 = zext i1 %309 to i32
  br label %do.end423

do.end423:                                        ; preds = %lor.end421
  %310 = load i64, i64* %m4, align 8
  %311 = load i64, i64* %c0, align 8
  %add425 = add i64 %311, %310
  store i64 %add425, i64* %c0, align 8
  %312 = load i64, i64* %c0, align 8
  %313 = load i64, i64* %m4, align 8
  %cmp426 = icmp ult i64 %312, %313
  %conv427 = zext i1 %cmp426 to i32
  store i32 %conv427, i32* %over424, align 4
  %314 = load i32, i32* %over424, align 4
  %conv428 = zext i32 %314 to i64
  %315 = load i64, i64* %c1, align 8
  %add429 = add i64 %315, %conv428
  store i64 %add429, i64* %c1, align 8
  %316 = load i64, i64* %c1, align 8
  %317 = load i32, i32* %over424, align 4
  %conv430 = zext i32 %317 to i64
  %cmp431 = icmp ult i64 %316, %conv430
  %conv432 = zext i1 %cmp431 to i32
  %conv433 = sext i32 %conv432 to i64
  %318 = load i64, i64* %c2, align 8
  %add434 = add i64 %318, %conv433
  store i64 %add434, i64* %c2, align 8
  %319 = load i64, i64* %c0, align 8
  store i64 %319, i64* %p2, align 8
  %320 = load i64, i64* %c1, align 8
  store i64 %320, i64* %c0, align 8
  %321 = load i64, i64* %c2, align 8
  store i64 %321, i64* %c1, align 8
  store i64 0, i64* %c2, align 8
  %322 = load i64, i64* %m3, align 8
  %323 = load i64, i64* %c0, align 8
  %add435 = add i64 %323, %322
  store i64 %add435, i64* %c0, align 8
  %324 = load i64, i64* %c0, align 8
  %325 = load i64, i64* %m3, align 8
  %cmp436 = icmp ult i64 %324, %325
  %conv437 = zext i1 %cmp436 to i32
  %conv438 = sext i32 %conv437 to i64
  %326 = load i64, i64* %c1, align 8
  %add439 = add i64 %326, %conv438
  store i64 %add439, i64* %c1, align 8
  br label %do.body440

do.body440:                                       ; preds = %do.end423
  %327 = load i64, i64* %c1, align 8
  %cmp441 = icmp ne i64 %327, 0
  %conv442 = zext i1 %cmp441 to i32
  %328 = load i64, i64* %c0, align 8
  %329 = load i64, i64* %m3, align 8
  %cmp443 = icmp uge i64 %328, %329
  %conv444 = zext i1 %cmp443 to i32
  %or445 = or i32 %conv442, %conv444
  br label %do.end446

do.end446:                                        ; preds = %do.body440
  br label %do.body447

do.body447:                                       ; preds = %do.end446
  %330 = load i64, i64* %c2, align 8
  %cmp448 = icmp eq i64 %330, 0
  %conv449 = zext i1 %cmp448 to i32
  br label %do.end450

do.end450:                                        ; preds = %do.body447
  %331 = load i32, i32* %m6, align 4
  %conv454 = zext i32 %331 to i64
  call void @secp256k1_u128_mul(i128* noundef %t453, i64 noundef %conv454, i64 noundef 4994812053365940164)
  %call455 = call i64 @secp256k1_u128_hi_u64(i128* noundef %t453)
  store i64 %call455, i64* %th452, align 8
  %call456 = call i64 @secp256k1_u128_to_u64(i128* noundef %t453)
  store i64 %call456, i64* %tl451, align 8
  %332 = load i64, i64* %tl451, align 8
  %333 = load i64, i64* %c0, align 8
  %add457 = add i64 %333, %332
  store i64 %add457, i64* %c0, align 8
  %334 = load i64, i64* %c0, align 8
  %335 = load i64, i64* %tl451, align 8
  %cmp458 = icmp ult i64 %334, %335
  %conv459 = zext i1 %cmp458 to i32
  %conv460 = sext i32 %conv459 to i64
  %336 = load i64, i64* %th452, align 8
  %add461 = add i64 %336, %conv460
  store i64 %add461, i64* %th452, align 8
  %337 = load i64, i64* %th452, align 8
  %338 = load i64, i64* %c1, align 8
  %add462 = add i64 %338, %337
  store i64 %add462, i64* %c1, align 8
  br label %do.body463

do.body463:                                       ; preds = %do.end450
  %339 = load i64, i64* %c1, align 8
  %340 = load i64, i64* %th452, align 8
  %cmp464 = icmp uge i64 %339, %340
  %conv465 = zext i1 %cmp464 to i32
  br label %do.end466

do.end466:                                        ; preds = %do.body463
  %341 = load i64, i64* %m5, align 8
  %342 = load i64, i64* %c0, align 8
  %add467 = add i64 %342, %341
  store i64 %add467, i64* %c0, align 8
  %343 = load i64, i64* %c0, align 8
  %344 = load i64, i64* %m5, align 8
  %cmp468 = icmp ult i64 %343, %344
  %conv469 = zext i1 %cmp468 to i32
  %conv470 = sext i32 %conv469 to i64
  %345 = load i64, i64* %c1, align 8
  %add471 = add i64 %345, %conv470
  store i64 %add471, i64* %c1, align 8
  br label %do.body472

do.body472:                                       ; preds = %do.end466
  %346 = load i64, i64* %c1, align 8
  %cmp473 = icmp ne i64 %346, 0
  %conv474 = zext i1 %cmp473 to i32
  %347 = load i64, i64* %c0, align 8
  %348 = load i64, i64* %m5, align 8
  %cmp475 = icmp uge i64 %347, %348
  %conv476 = zext i1 %cmp475 to i32
  %or477 = or i32 %conv474, %conv476
  br label %do.end478

do.end478:                                        ; preds = %do.body472
  br label %do.body479

do.body479:                                       ; preds = %do.end478
  %349 = load i64, i64* %c2, align 8
  %cmp480 = icmp eq i64 %349, 0
  %conv481 = zext i1 %cmp480 to i32
  br label %do.end482

do.end482:                                        ; preds = %do.body479
  %350 = load i64, i64* %c0, align 8
  store i64 %350, i64* %p3, align 8
  %351 = load i64, i64* %c1, align 8
  store i64 %351, i64* %c0, align 8
  store i64 0, i64* %c1, align 8
  br label %do.body483

do.body483:                                       ; preds = %do.end482
  %352 = load i64, i64* %c2, align 8
  %cmp484 = icmp eq i64 %352, 0
  %conv485 = zext i1 %cmp484 to i32
  br label %do.end486

do.end486:                                        ; preds = %do.body483
  %353 = load i64, i64* %c0, align 8
  %354 = load i32, i32* %m6, align 4
  %conv487 = zext i32 %354 to i64
  %add488 = add i64 %353, %conv487
  %conv489 = trunc i64 %add488 to i32
  store i32 %conv489, i32* %p4, align 4
  br label %do.body490

do.body490:                                       ; preds = %do.end486
  %355 = load i32, i32* %p4, align 4
  %cmp491 = icmp ule i32 %355, 2
  %conv492 = zext i1 %cmp491 to i32
  br label %do.end493

do.end493:                                        ; preds = %do.body490
  %356 = load i64, i64* %p0, align 8
  call void @secp256k1_u128_from_u64(i128* noundef %c128, i64 noundef %356)
  %357 = load i32, i32* %p4, align 4
  %conv494 = zext i32 %357 to i64
  call void @secp256k1_u128_accum_mul(i128* noundef %c128, i64 noundef 4624529908474429119, i64 noundef %conv494)
  %call495 = call i64 @secp256k1_u128_to_u64(i128* noundef %c128)
  %358 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %358, i32 0, i32 0
  %arrayidx496 = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 %call495, i64* %arrayidx496, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c128, i32 noundef 64)
  %359 = load i64, i64* %p1, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %c128, i64 noundef %359)
  %360 = load i32, i32* %p4, align 4
  %conv497 = zext i32 %360 to i64
  call void @secp256k1_u128_accum_mul(i128* noundef %c128, i64 noundef 4994812053365940164, i64 noundef %conv497)
  %call498 = call i64 @secp256k1_u128_to_u64(i128* noundef %c128)
  %361 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d499 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %361, i32 0, i32 0
  %arrayidx500 = getelementptr inbounds [4 x i64], [4 x i64]* %d499, i64 0, i64 1
  store i64 %call498, i64* %arrayidx500, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c128, i32 noundef 64)
  %362 = load i64, i64* %p2, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %c128, i64 noundef %362)
  %363 = load i32, i32* %p4, align 4
  %conv501 = zext i32 %363 to i64
  call void @secp256k1_u128_accum_u64(i128* noundef %c128, i64 noundef %conv501)
  %call502 = call i64 @secp256k1_u128_to_u64(i128* noundef %c128)
  %364 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d503 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %364, i32 0, i32 0
  %arrayidx504 = getelementptr inbounds [4 x i64], [4 x i64]* %d503, i64 0, i64 2
  store i64 %call502, i64* %arrayidx504, align 8
  call void @secp256k1_u128_rshift(i128* noundef %c128, i32 noundef 64)
  %365 = load i64, i64* %p3, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %c128, i64 noundef %365)
  %call505 = call i64 @secp256k1_u128_to_u64(i128* noundef %c128)
  %366 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d506 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %366, i32 0, i32 0
  %arrayidx507 = getelementptr inbounds [4 x i64], [4 x i64]* %d506, i64 0, i64 3
  store i64 %call505, i64* %arrayidx507, align 8
  %call508 = call i64 @secp256k1_u128_hi_u64(i128* noundef %c128)
  store i64 %call508, i64* %c, align 8
  %367 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %368 = load i64, i64* %c, align 8
  %369 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %call509 = call i32 @secp256k1_scalar_check_overflow(%struct.secp256k1_scalar* noundef %369)
  %conv510 = sext i32 %call509 to i64
  %add511 = add i64 %368, %conv510
  %conv512 = trunc i64 %add511 to i32
  %call513 = call i32 @secp256k1_scalar_reduce(%struct.secp256k1_scalar* noundef %367, i32 noundef %conv512)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @secp256k1_u128_hi_u64(i128* noundef %a) #0 {
entry:
  %a.addr = alloca i128*, align 8
  store i128* %a, i128** %a.addr, align 8
  %0 = load i128*, i128** %a.addr, align 8
  %1 = load i128, i128* %0, align 16
  %shr = lshr i128 %1, 64
  %conv = trunc i128 %shr to i64
  ret i64 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %r, i32 noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca i32, align 4
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %a.addr, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body
  %1 = load i32, i32* %a.addr, align 4
  %cmp1 = icmp sle i32 %1, 32767
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body
  %2 = phi i1 [ false, %do.body ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  br label %do.end

do.end:                                           ; preds = %land.end
  %3 = load i32, i32* %a.addr, align 4
  %conv = sext i32 %3 to i64
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  store i64 %conv, i64* %arrayidx, align 8
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n2 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %n2, i64 0, i64 4
  store i64 0, i64* %arrayidx3, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n4 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [5 x i64], [5 x i64]* %n4, i64 0, i64 3
  store i64 0, i64* %arrayidx5, align 8
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n6, i64 0, i64 2
  store i64 0, i64* %arrayidx7, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n8 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %n8, i64 0, i64 1
  store i64 0, i64* %arrayidx9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_strauss_wnaf(%struct.secp256k1_strauss_state* noundef %state, %struct.secp256k1_gej* noundef %r, i64 noundef %num, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_scalar* noundef %na, %struct.secp256k1_scalar* noundef %ng) #0 {
entry:
  %state.addr = alloca %struct.secp256k1_strauss_state*, align 8
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %num.addr = alloca i64, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %na.addr = alloca %struct.secp256k1_scalar*, align 8
  %ng.addr = alloca %struct.secp256k1_scalar*, align 8
  %tmpa = alloca %struct.secp256k1_ge, align 8
  %Z = alloca %struct.secp256k1_fe, align 8
  %ng_1 = alloca %struct.secp256k1_scalar, align 8
  %ng_128 = alloca %struct.secp256k1_scalar, align 8
  %wnaf_ng_1 = alloca [129 x i32], align 16
  %bits_ng_1 = alloca i32, align 4
  %wnaf_ng_128 = alloca [129 x i32], align 16
  %bits_ng_128 = alloca i32, align 4
  %i = alloca i32, align 4
  %bits = alloca i32, align 4
  %np = alloca i64, align 8
  %no = alloca i64, align 8
  %tmp = alloca %struct.secp256k1_gej, align 8
  %na_1 = alloca %struct.secp256k1_scalar, align 8
  %na_lam = alloca %struct.secp256k1_scalar, align 8
  %n = alloca i32, align 4
  store %struct.secp256k1_strauss_state* %state, %struct.secp256k1_strauss_state** %state.addr, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store i64 %num, i64* %num.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_scalar* %na, %struct.secp256k1_scalar** %na.addr, align 8
  store %struct.secp256k1_scalar* %ng, %struct.secp256k1_scalar** %ng.addr, align 8
  store i32 0, i32* %bits_ng_1, align 4
  store i32 0, i32* %bits_ng_128, align 4
  store i32 0, i32* %bits, align 4
  store i64 0, i64* %no, align 8
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %Z, i32 noundef 1)
  store i64 0, i64* %np, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %np, align 8
  %1 = load i64, i64* %num.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %na.addr, align 8
  %3 = load i64, i64* %np, align 8
  %arrayidx = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i64 %3
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %arrayidx)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %5 = load i64, i64* %np, align 8
  %arrayidx1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i64 %5
  %call2 = call i32 @secp256k1_gej_is_infinity(%struct.secp256k1_gej* noundef %arrayidx1)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %na.addr, align 8
  %7 = load i64, i64* %np, align 8
  %arrayidx4 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i64 %7
  call void @secp256k1_scalar_split_lambda(%struct.secp256k1_scalar* noundef %na_1, %struct.secp256k1_scalar* noundef %na_lam, %struct.secp256k1_scalar* noundef %arrayidx4)
  %8 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %8, i32 0, i32 2
  %9 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps, align 8
  %10 = load i64, i64* %no, align 8
  %arrayidx5 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %9, i64 %10
  %wnaf_na_1 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx5, i32 0, i32 0
  %arraydecay = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_na_1, i64 0, i64 0
  %call6 = call i32 @secp256k1_ecmult_wnaf(i32* noundef %arraydecay, i32 noundef 129, %struct.secp256k1_scalar* noundef %na_1, i32 noundef 5)
  %11 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps7 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %11, i32 0, i32 2
  %12 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps7, align 8
  %13 = load i64, i64* %no, align 8
  %arrayidx8 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %12, i64 %13
  %bits_na_1 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx8, i32 0, i32 2
  store i32 %call6, i32* %bits_na_1, align 4
  %14 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps9 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %14, i32 0, i32 2
  %15 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps9, align 8
  %16 = load i64, i64* %no, align 8
  %arrayidx10 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %15, i64 %16
  %wnaf_na_lam = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx10, i32 0, i32 1
  %arraydecay11 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_na_lam, i64 0, i64 0
  %call12 = call i32 @secp256k1_ecmult_wnaf(i32* noundef %arraydecay11, i32 noundef 129, %struct.secp256k1_scalar* noundef %na_lam, i32 noundef 5)
  %17 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps13 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %17, i32 0, i32 2
  %18 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps13, align 8
  %19 = load i64, i64* %no, align 8
  %arrayidx14 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %18, i64 %19
  %bits_na_lam = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx14, i32 0, i32 3
  store i32 %call12, i32* %bits_na_lam, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %20 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps15 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %20, i32 0, i32 2
  %21 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps15, align 8
  %22 = load i64, i64* %no, align 8
  %arrayidx16 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %21, i64 %22
  %bits_na_117 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx16, i32 0, i32 2
  %23 = load i32, i32* %bits_na_117, align 4
  %cmp18 = icmp sle i32 %23, 129
  %conv = zext i1 %cmp18 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body19

do.body19:                                        ; preds = %do.end
  %24 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps20 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %24, i32 0, i32 2
  %25 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps20, align 8
  %26 = load i64, i64* %no, align 8
  %arrayidx21 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %25, i64 %26
  %bits_na_lam22 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx21, i32 0, i32 3
  %27 = load i32, i32* %bits_na_lam22, align 4
  %cmp23 = icmp sle i32 %27, 129
  %conv24 = zext i1 %cmp23 to i32
  br label %do.end25

do.end25:                                         ; preds = %do.body19
  %28 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps26 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %28, i32 0, i32 2
  %29 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps26, align 8
  %30 = load i64, i64* %no, align 8
  %arrayidx27 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %29, i64 %30
  %bits_na_128 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx27, i32 0, i32 2
  %31 = load i32, i32* %bits_na_128, align 4
  %32 = load i32, i32* %bits, align 4
  %cmp29 = icmp sgt i32 %31, %32
  br i1 %cmp29, label %if.then31, label %if.end35

if.then31:                                        ; preds = %do.end25
  %33 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps32 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %33, i32 0, i32 2
  %34 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps32, align 8
  %35 = load i64, i64* %no, align 8
  %arrayidx33 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %34, i64 %35
  %bits_na_134 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx33, i32 0, i32 2
  %36 = load i32, i32* %bits_na_134, align 4
  store i32 %36, i32* %bits, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then31, %do.end25
  %37 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps36 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %37, i32 0, i32 2
  %38 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps36, align 8
  %39 = load i64, i64* %no, align 8
  %arrayidx37 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %38, i64 %39
  %bits_na_lam38 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx37, i32 0, i32 3
  %40 = load i32, i32* %bits_na_lam38, align 4
  %41 = load i32, i32* %bits, align 4
  %cmp39 = icmp sgt i32 %40, %41
  br i1 %cmp39, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end35
  %42 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps42 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %42, i32 0, i32 2
  %43 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps42, align 8
  %44 = load i64, i64* %no, align 8
  %arrayidx43 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %43, i64 %44
  %bits_na_lam44 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx43, i32 0, i32 3
  %45 = load i32, i32* %bits_na_lam44, align 4
  store i32 %45, i32* %bits, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then41, %if.end35
  %46 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %47 = load i64, i64* %np, align 8
  %arrayidx46 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %46, i64 %47
  %48 = bitcast %struct.secp256k1_gej* %tmp to i8*
  %49 = bitcast %struct.secp256k1_gej* %arrayidx46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 128, i1 false)
  %50 = load i64, i64* %no, align 8
  %tobool47 = icmp ne i64 %50, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end45
  call void @secp256k1_gej_rescale(%struct.secp256k1_gej* noundef %tmp, %struct.secp256k1_fe* noundef %Z)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end45
  %51 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %pre_a = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %51, i32 0, i32 1
  %52 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a, align 8
  %53 = load i64, i64* %no, align 8
  %mul = mul i64 %53, 8
  %add.ptr = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %52, i64 %mul
  %54 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %54, i32 0, i32 0
  %55 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux, align 8
  %56 = load i64, i64* %no, align 8
  %mul50 = mul i64 %56, 8
  %add.ptr51 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %55, i64 %mul50
  call void @secp256k1_ecmult_odd_multiples_table(i32 noundef 8, %struct.secp256k1_ge* noundef %add.ptr, %struct.secp256k1_fe* noundef %add.ptr51, %struct.secp256k1_fe* noundef %Z, %struct.secp256k1_gej* noundef %tmp)
  %57 = load i64, i64* %no, align 8
  %tobool52 = icmp ne i64 %57, 0
  br i1 %tobool52, label %if.then53, label %if.end61

if.then53:                                        ; preds = %if.end49
  %58 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux54 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %58, i32 0, i32 0
  %59 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux54, align 8
  %60 = load i64, i64* %no, align 8
  %mul55 = mul i64 %60, 8
  %add.ptr56 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %59, i64 %mul55
  %61 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux57 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %61, i32 0, i32 0
  %62 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux57, align 8
  %63 = load i64, i64* %no, align 8
  %mul58 = mul i64 %63, 8
  %add.ptr59 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %62, i64 %mul58
  %64 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %65 = load i64, i64* %np, align 8
  %arrayidx60 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %64, i64 %65
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %arrayidx60, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %add.ptr56, %struct.secp256k1_fe* noundef %add.ptr59, %struct.secp256k1_fe* noundef %z)
  br label %if.end61

if.end61:                                         ; preds = %if.then53, %if.end49
  %66 = load i64, i64* %no, align 8
  %inc = add i64 %66, 1
  store i64 %inc, i64* %no, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end61, %if.then
  %67 = load i64, i64* %np, align 8
  %inc62 = add i64 %67, 1
  store i64 %inc62, i64* %np, align 8
  br label %for.cond, !llvm.loop !30

for.end:                                          ; preds = %for.cond
  %68 = load i64, i64* %no, align 8
  %mul63 = mul i64 8, %68
  %69 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %pre_a64 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %69, i32 0, i32 1
  %70 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a64, align 8
  %71 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux65 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %71, i32 0, i32 0
  %72 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux65, align 8
  call void @secp256k1_ge_table_set_globalz(i64 noundef %mul63, %struct.secp256k1_ge* noundef %70, %struct.secp256k1_fe* noundef %72)
  store i64 0, i64* %np, align 8
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc87, %for.end
  %73 = load i64, i64* %np, align 8
  %74 = load i64, i64* %no, align 8
  %cmp67 = icmp ult i64 %73, %74
  br i1 %cmp67, label %for.body69, label %for.end89

for.body69:                                       ; preds = %for.cond66
  store i32 0, i32* %i, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc84, %for.body69
  %75 = load i32, i32* %i, align 4
  %conv71 = sext i32 %75 to i64
  %cmp72 = icmp slt i64 %conv71, 8
  br i1 %cmp72, label %for.body74, label %for.end86

for.body74:                                       ; preds = %for.cond70
  %76 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux75 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %76, i32 0, i32 0
  %77 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux75, align 8
  %78 = load i64, i64* %np, align 8
  %mul76 = mul i64 %78, 8
  %79 = load i32, i32* %i, align 4
  %conv77 = sext i32 %79 to i64
  %add = add i64 %mul76, %conv77
  %arrayidx78 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %77, i64 %add
  %80 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %pre_a79 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %80, i32 0, i32 1
  %81 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a79, align 8
  %82 = load i64, i64* %np, align 8
  %mul80 = mul i64 %82, 8
  %83 = load i32, i32* %i, align 4
  %conv81 = sext i32 %83 to i64
  %add82 = add i64 %mul80, %conv81
  %arrayidx83 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %81, i64 %add82
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx83, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %arrayidx78, %struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef @secp256k1_const_beta)
  br label %for.inc84

for.inc84:                                        ; preds = %for.body74
  %84 = load i32, i32* %i, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %i, align 4
  br label %for.cond70, !llvm.loop !31

for.end86:                                        ; preds = %for.cond70
  br label %for.inc87

for.inc87:                                        ; preds = %for.end86
  %85 = load i64, i64* %np, align 8
  %inc88 = add i64 %85, 1
  store i64 %inc88, i64* %np, align 8
  br label %for.cond66, !llvm.loop !32

for.end89:                                        ; preds = %for.cond66
  %86 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %ng.addr, align 8
  %tobool90 = icmp ne %struct.secp256k1_scalar* %86, null
  br i1 %tobool90, label %if.then91, label %if.end104

if.then91:                                        ; preds = %for.end89
  %87 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %ng.addr, align 8
  call void @secp256k1_scalar_split_128(%struct.secp256k1_scalar* noundef %ng_1, %struct.secp256k1_scalar* noundef %ng_128, %struct.secp256k1_scalar* noundef %87)
  %arraydecay92 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_ng_1, i64 0, i64 0
  %call93 = call i32 @secp256k1_ecmult_wnaf(i32* noundef %arraydecay92, i32 noundef 129, %struct.secp256k1_scalar* noundef %ng_1, i32 noundef 15)
  store i32 %call93, i32* %bits_ng_1, align 4
  %arraydecay94 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_ng_128, i64 0, i64 0
  %call95 = call i32 @secp256k1_ecmult_wnaf(i32* noundef %arraydecay94, i32 noundef 129, %struct.secp256k1_scalar* noundef %ng_128, i32 noundef 15)
  store i32 %call95, i32* %bits_ng_128, align 4
  %88 = load i32, i32* %bits_ng_1, align 4
  %89 = load i32, i32* %bits, align 4
  %cmp96 = icmp sgt i32 %88, %89
  br i1 %cmp96, label %if.then98, label %if.end99

if.then98:                                        ; preds = %if.then91
  %90 = load i32, i32* %bits_ng_1, align 4
  store i32 %90, i32* %bits, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %if.then91
  %91 = load i32, i32* %bits_ng_128, align 4
  %92 = load i32, i32* %bits, align 4
  %cmp100 = icmp sgt i32 %91, %92
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %if.end99
  %93 = load i32, i32* %bits_ng_128, align 4
  store i32 %93, i32* %bits, align 4
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %if.end99
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %for.end89
  %94 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %94)
  %95 = load i32, i32* %bits, align 4
  %sub = sub nsw i32 %95, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond105

for.cond105:                                      ; preds = %for.inc167, %if.end104
  %96 = load i32, i32* %i, align 4
  %cmp106 = icmp sge i32 %96, 0
  br i1 %cmp106, label %for.body108, label %for.end168

for.body108:                                      ; preds = %for.cond105
  %97 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %98 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_double_var(%struct.secp256k1_gej* noundef %97, %struct.secp256k1_gej* noundef %98, %struct.secp256k1_fe* noundef null)
  store i64 0, i64* %np, align 8
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc148, %for.body108
  %99 = load i64, i64* %np, align 8
  %100 = load i64, i64* %no, align 8
  %cmp110 = icmp ult i64 %99, %100
  br i1 %cmp110, label %for.body112, label %for.end150

for.body112:                                      ; preds = %for.cond109
  %101 = load i32, i32* %i, align 4
  %102 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps113 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %102, i32 0, i32 2
  %103 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps113, align 8
  %104 = load i64, i64* %np, align 8
  %arrayidx114 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %103, i64 %104
  %bits_na_1115 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx114, i32 0, i32 2
  %105 = load i32, i32* %bits_na_1115, align 4
  %cmp116 = icmp slt i32 %101, %105
  br i1 %cmp116, label %land.lhs.true, label %if.end127

land.lhs.true:                                    ; preds = %for.body112
  %106 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps118 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %106, i32 0, i32 2
  %107 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps118, align 8
  %108 = load i64, i64* %np, align 8
  %arrayidx119 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %107, i64 %108
  %wnaf_na_1120 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx119, i32 0, i32 0
  %109 = load i32, i32* %i, align 4
  %idxprom = sext i32 %109 to i64
  %arrayidx121 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_na_1120, i64 0, i64 %idxprom
  %110 = load i32, i32* %arrayidx121, align 4
  store i32 %110, i32* %n, align 4
  %tobool122 = icmp ne i32 %110, 0
  br i1 %tobool122, label %if.then123, label %if.end127

if.then123:                                       ; preds = %land.lhs.true
  %111 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %pre_a124 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %111, i32 0, i32 1
  %112 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a124, align 8
  %113 = load i64, i64* %np, align 8
  %mul125 = mul i64 %113, 8
  %add.ptr126 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %112, i64 %mul125
  %114 = load i32, i32* %n, align 4
  call void @secp256k1_ecmult_table_get_ge(%struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_ge* noundef %add.ptr126, i32 noundef %114, i32 noundef 5)
  %115 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %116 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_add_ge_var(%struct.secp256k1_gej* noundef %115, %struct.secp256k1_gej* noundef %116, %struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_fe* noundef null)
  br label %if.end127

if.end127:                                        ; preds = %if.then123, %land.lhs.true, %for.body112
  %117 = load i32, i32* %i, align 4
  %118 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps128 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %118, i32 0, i32 2
  %119 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps128, align 8
  %120 = load i64, i64* %np, align 8
  %arrayidx129 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %119, i64 %120
  %bits_na_lam130 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx129, i32 0, i32 3
  %121 = load i32, i32* %bits_na_lam130, align 4
  %cmp131 = icmp slt i32 %117, %121
  br i1 %cmp131, label %land.lhs.true133, label %if.end147

land.lhs.true133:                                 ; preds = %if.end127
  %122 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %ps134 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %122, i32 0, i32 2
  %123 = load %struct.secp256k1_strauss_point_state*, %struct.secp256k1_strauss_point_state** %ps134, align 8
  %124 = load i64, i64* %np, align 8
  %arrayidx135 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %123, i64 %124
  %wnaf_na_lam136 = getelementptr inbounds %struct.secp256k1_strauss_point_state, %struct.secp256k1_strauss_point_state* %arrayidx135, i32 0, i32 1
  %125 = load i32, i32* %i, align 4
  %idxprom137 = sext i32 %125 to i64
  %arrayidx138 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_na_lam136, i64 0, i64 %idxprom137
  %126 = load i32, i32* %arrayidx138, align 4
  store i32 %126, i32* %n, align 4
  %tobool139 = icmp ne i32 %126, 0
  br i1 %tobool139, label %if.then140, label %if.end147

if.then140:                                       ; preds = %land.lhs.true133
  %127 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %pre_a141 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %127, i32 0, i32 1
  %128 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a141, align 8
  %129 = load i64, i64* %np, align 8
  %mul142 = mul i64 %129, 8
  %add.ptr143 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %128, i64 %mul142
  %130 = load %struct.secp256k1_strauss_state*, %struct.secp256k1_strauss_state** %state.addr, align 8
  %aux144 = getelementptr inbounds %struct.secp256k1_strauss_state, %struct.secp256k1_strauss_state* %130, i32 0, i32 0
  %131 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %aux144, align 8
  %132 = load i64, i64* %np, align 8
  %mul145 = mul i64 %132, 8
  %add.ptr146 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %131, i64 %mul145
  %133 = load i32, i32* %n, align 4
  call void @secp256k1_ecmult_table_get_ge_lambda(%struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_ge* noundef %add.ptr143, %struct.secp256k1_fe* noundef %add.ptr146, i32 noundef %133, i32 noundef 5)
  %134 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %135 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_add_ge_var(%struct.secp256k1_gej* noundef %134, %struct.secp256k1_gej* noundef %135, %struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_fe* noundef null)
  br label %if.end147

if.end147:                                        ; preds = %if.then140, %land.lhs.true133, %if.end127
  br label %for.inc148

for.inc148:                                       ; preds = %if.end147
  %136 = load i64, i64* %np, align 8
  %inc149 = add i64 %136, 1
  store i64 %inc149, i64* %np, align 8
  br label %for.cond109, !llvm.loop !33

for.end150:                                       ; preds = %for.cond109
  %137 = load i32, i32* %i, align 4
  %138 = load i32, i32* %bits_ng_1, align 4
  %cmp151 = icmp slt i32 %137, %138
  br i1 %cmp151, label %land.lhs.true153, label %if.end158

land.lhs.true153:                                 ; preds = %for.end150
  %139 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %139 to i64
  %arrayidx155 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_ng_1, i64 0, i64 %idxprom154
  %140 = load i32, i32* %arrayidx155, align 4
  store i32 %140, i32* %n, align 4
  %tobool156 = icmp ne i32 %140, 0
  br i1 %tobool156, label %if.then157, label %if.end158

if.then157:                                       ; preds = %land.lhs.true153
  %141 = load i32, i32* %n, align 4
  call void @secp256k1_ecmult_table_get_ge_storage(%struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_ge_storage* noundef getelementptr inbounds ([8192 x %struct.secp256k1_ge_storage], [8192 x %struct.secp256k1_ge_storage]* @secp256k1_pre_g, i64 0, i64 0), i32 noundef %141, i32 noundef 15)
  %142 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %143 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_add_zinv_var(%struct.secp256k1_gej* noundef %142, %struct.secp256k1_gej* noundef %143, %struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_fe* noundef %Z)
  br label %if.end158

if.end158:                                        ; preds = %if.then157, %land.lhs.true153, %for.end150
  %144 = load i32, i32* %i, align 4
  %145 = load i32, i32* %bits_ng_128, align 4
  %cmp159 = icmp slt i32 %144, %145
  br i1 %cmp159, label %land.lhs.true161, label %if.end166

land.lhs.true161:                                 ; preds = %if.end158
  %146 = load i32, i32* %i, align 4
  %idxprom162 = sext i32 %146 to i64
  %arrayidx163 = getelementptr inbounds [129 x i32], [129 x i32]* %wnaf_ng_128, i64 0, i64 %idxprom162
  %147 = load i32, i32* %arrayidx163, align 4
  store i32 %147, i32* %n, align 4
  %tobool164 = icmp ne i32 %147, 0
  br i1 %tobool164, label %if.then165, label %if.end166

if.then165:                                       ; preds = %land.lhs.true161
  %148 = load i32, i32* %n, align 4
  call void @secp256k1_ecmult_table_get_ge_storage(%struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_ge_storage* noundef getelementptr inbounds ([8192 x %struct.secp256k1_ge_storage], [8192 x %struct.secp256k1_ge_storage]* @secp256k1_pre_g_128, i64 0, i64 0), i32 noundef %148, i32 noundef 15)
  %149 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %150 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_add_zinv_var(%struct.secp256k1_gej* noundef %149, %struct.secp256k1_gej* noundef %150, %struct.secp256k1_ge* noundef %tmpa, %struct.secp256k1_fe* noundef %Z)
  br label %if.end166

if.end166:                                        ; preds = %if.then165, %land.lhs.true161, %if.end158
  br label %for.inc167

for.inc167:                                       ; preds = %if.end166
  %151 = load i32, i32* %i, align 4
  %dec = add nsw i32 %151, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond105, !llvm.loop !34

for.end168:                                       ; preds = %for.cond105
  %152 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %152, i32 0, i32 3
  %153 = load i32, i32* %infinity, align 8
  %tobool169 = icmp ne i32 %153, 0
  br i1 %tobool169, label %if.end173, label %if.then170

if.then170:                                       ; preds = %for.end168
  %154 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z171 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %154, i32 0, i32 2
  %155 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z172 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %155, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z171, %struct.secp256k1_fe* noundef %z172, %struct.secp256k1_fe* noundef %Z)
  br label %if.end173

if.end173:                                        ; preds = %if.then170, %for.end168
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_split_lambda(%struct.secp256k1_scalar* noundef %r1, %struct.secp256k1_scalar* noundef %r2, %struct.secp256k1_scalar* noundef %k) #0 {
entry:
  %r1.addr = alloca %struct.secp256k1_scalar*, align 8
  %r2.addr = alloca %struct.secp256k1_scalar*, align 8
  %k.addr = alloca %struct.secp256k1_scalar*, align 8
  %c1 = alloca %struct.secp256k1_scalar, align 8
  %c2 = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_scalar* %r1, %struct.secp256k1_scalar** %r1.addr, align 8
  store %struct.secp256k1_scalar* %r2, %struct.secp256k1_scalar** %r2.addr, align 8
  store %struct.secp256k1_scalar* %k, %struct.secp256k1_scalar** %k.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %cmp = icmp ne %struct.secp256k1_scalar* %0, %1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %cmp2 = icmp ne %struct.secp256k1_scalar* %2, %3
  %conv3 = zext i1 %cmp2 to i32
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  call void @secp256k1_scalar_mul_shift_var(%struct.secp256k1_scalar* noundef %c1, %struct.secp256k1_scalar* noundef %4, %struct.secp256k1_scalar* noundef @secp256k1_scalar_split_lambda.g1, i32 noundef 384)
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  call void @secp256k1_scalar_mul_shift_var(%struct.secp256k1_scalar* noundef %c2, %struct.secp256k1_scalar* noundef %5, %struct.secp256k1_scalar* noundef @secp256k1_scalar_split_lambda.g2, i32 noundef 384)
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %c1, %struct.secp256k1_scalar* noundef %c1, %struct.secp256k1_scalar* noundef @secp256k1_scalar_split_lambda.minus_b1)
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %c2, %struct.secp256k1_scalar* noundef %c2, %struct.secp256k1_scalar* noundef @secp256k1_scalar_split_lambda.minus_b2)
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %call = call i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %6, %struct.secp256k1_scalar* noundef %c1, %struct.secp256k1_scalar* noundef %c2)
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %7, %struct.secp256k1_scalar* noundef %8, %struct.secp256k1_scalar* noundef @secp256k1_const_lambda)
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  call void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %9, %struct.secp256k1_scalar* noundef %10)
  %11 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %call5 = call i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %11, %struct.secp256k1_scalar* noundef %12, %struct.secp256k1_scalar* noundef %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecmult_wnaf(i32* noundef %wnaf, i32 noundef %len, %struct.secp256k1_scalar* noundef %a, i32 noundef %w) #0 {
entry:
  %wnaf.addr = alloca i32*, align 8
  %len.addr = alloca i32, align 4
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %w.addr = alloca i32, align 4
  %s = alloca %struct.secp256k1_scalar, align 8
  %last_set_bit = alloca i32, align 4
  %bit = alloca i32, align 4
  %sign = alloca i32, align 4
  %carry = alloca i32, align 4
  %now = alloca i32, align 4
  %word = alloca i32, align 4
  store i32* %wnaf, i32** %wnaf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 -1, i32* %last_set_bit, align 4
  store i32 0, i32* %bit, align 4
  store i32 1, i32* %sign, align 4
  store i32 0, i32* %carry, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32*, i32** %wnaf.addr, align 8
  %cmp = icmp ne i32* %0, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp sle i32 0, %1
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body1
  %2 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp sle i32 %2, 256
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body1
  %3 = phi i1 [ false, %do.body1 ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  br label %do.end6

do.end6:                                          ; preds = %land.end
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %cmp8 = icmp ne %struct.secp256k1_scalar* %4, null
  %conv9 = zext i1 %cmp8 to i32
  br label %do.end10

do.end10:                                         ; preds = %do.body7
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %5 = load i32, i32* %w.addr, align 4
  %cmp12 = icmp sle i32 2, %5
  br i1 %cmp12, label %land.rhs14, label %land.end17

land.rhs14:                                       ; preds = %do.body11
  %6 = load i32, i32* %w.addr, align 4
  %cmp15 = icmp sle i32 %6, 31
  br label %land.end17

land.end17:                                       ; preds = %land.rhs14, %do.body11
  %7 = phi i1 [ false, %do.body11 ], [ %cmp15, %land.rhs14 ]
  %land.ext18 = zext i1 %7 to i32
  br label %do.end19

do.end19:                                         ; preds = %land.end17
  %8 = load i32*, i32** %wnaf.addr, align 8
  %9 = bitcast i32* %8 to i8*
  %10 = load i32, i32* %len.addr, align 4
  %conv20 = sext i32 %10 to i64
  %mul = mul i64 %conv20, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 %mul, i1 false)
  %11 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %12 = bitcast %struct.secp256k1_scalar* %s to i8*
  %13 = bitcast %struct.secp256k1_scalar* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false)
  %call = call i32 @secp256k1_scalar_get_bits(%struct.secp256k1_scalar* noundef %s, i32 noundef 255, i32 noundef 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end19
  call void @secp256k1_scalar_negate(%struct.secp256k1_scalar* noundef %s, %struct.secp256k1_scalar* noundef %s)
  store i32 -1, i32* %sign, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end19
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.then26, %if.end
  %14 = load i32, i32* %bit, align 4
  %15 = load i32, i32* %len.addr, align 4
  %cmp21 = icmp slt i32 %14, %15
  br i1 %cmp21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %bit, align 4
  %call23 = call i32 @secp256k1_scalar_get_bits(%struct.secp256k1_scalar* noundef %s, i32 noundef %16, i32 noundef 1)
  %17 = load i32, i32* %carry, align 4
  %cmp24 = icmp eq i32 %call23, %17
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %while.body
  %18 = load i32, i32* %bit, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %bit, align 4
  br label %while.cond, !llvm.loop !35

if.end27:                                         ; preds = %while.body
  %19 = load i32, i32* %w.addr, align 4
  store i32 %19, i32* %now, align 4
  %20 = load i32, i32* %now, align 4
  %21 = load i32, i32* %len.addr, align 4
  %22 = load i32, i32* %bit, align 4
  %sub = sub nsw i32 %21, %22
  %cmp28 = icmp sgt i32 %20, %sub
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end27
  %23 = load i32, i32* %len.addr, align 4
  %24 = load i32, i32* %bit, align 4
  %sub31 = sub nsw i32 %23, %24
  store i32 %sub31, i32* %now, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end27
  %25 = load i32, i32* %bit, align 4
  %26 = load i32, i32* %now, align 4
  %call33 = call i32 @secp256k1_scalar_get_bits_var(%struct.secp256k1_scalar* noundef %s, i32 noundef %25, i32 noundef %26)
  %27 = load i32, i32* %carry, align 4
  %add = add i32 %call33, %27
  store i32 %add, i32* %word, align 4
  %28 = load i32, i32* %word, align 4
  %29 = load i32, i32* %w.addr, align 4
  %sub34 = sub nsw i32 %29, 1
  %shr = ashr i32 %28, %sub34
  %and = and i32 %shr, 1
  store i32 %and, i32* %carry, align 4
  %30 = load i32, i32* %carry, align 4
  %31 = load i32, i32* %w.addr, align 4
  %shl = shl i32 %30, %31
  %32 = load i32, i32* %word, align 4
  %sub35 = sub nsw i32 %32, %shl
  store i32 %sub35, i32* %word, align 4
  %33 = load i32, i32* %sign, align 4
  %34 = load i32, i32* %word, align 4
  %mul36 = mul nsw i32 %33, %34
  %35 = load i32*, i32** %wnaf.addr, align 8
  %36 = load i32, i32* %bit, align 4
  %idxprom = sext i32 %36 to i64
  %arrayidx = getelementptr inbounds i32, i32* %35, i64 %idxprom
  store i32 %mul36, i32* %arrayidx, align 4
  %37 = load i32, i32* %bit, align 4
  store i32 %37, i32* %last_set_bit, align 4
  %38 = load i32, i32* %now, align 4
  %39 = load i32, i32* %bit, align 4
  %add37 = add nsw i32 %39, %38
  store i32 %add37, i32* %bit, align 4
  br label %while.cond, !llvm.loop !35

while.end:                                        ; preds = %while.cond
  %40 = load i32, i32* %last_set_bit, align 4
  %add38 = add nsw i32 %40, 1
  ret i32 %add38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_rescale(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_fe* noundef %s) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %s.addr = alloca %struct.secp256k1_fe*, align 8
  %zz = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_fe* %s, %struct.secp256k1_fe** %s.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %s.addr, align 8
  %call = call i32 @secp256k1_fe_is_zero(%struct.secp256k1_fe* noundef %0)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %s.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %zz, %struct.secp256k1_fe* noundef %1)
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 0
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %x1, %struct.secp256k1_fe* noundef %zz)
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 1
  %5 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %5, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y2, %struct.secp256k1_fe* noundef %zz)
  %6 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %6, i32 0, i32 1
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 1
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %s.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y3, %struct.secp256k1_fe* noundef %y4, %struct.secp256k1_fe* noundef %8)
  %9 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %9, i32 0, i32 2
  %10 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z5 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %10, i32 0, i32 2
  %11 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %s.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z, %struct.secp256k1_fe* noundef %z5, %struct.secp256k1_fe* noundef %11)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_odd_multiples_table(i32 noundef %n, %struct.secp256k1_ge* noundef %pre_a, %struct.secp256k1_fe* noundef %zr, %struct.secp256k1_fe* noundef %z, %struct.secp256k1_gej* noundef %a) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pre_a.addr = alloca %struct.secp256k1_ge*, align 8
  %zr.addr = alloca %struct.secp256k1_fe*, align 8
  %z.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %d = alloca %struct.secp256k1_gej, align 8
  %ai = alloca %struct.secp256k1_gej, align 8
  %d_ge = alloca %struct.secp256k1_ge, align 8
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.secp256k1_ge* %pre_a, %struct.secp256k1_ge** %pre_a.addr, align 8
  store %struct.secp256k1_fe* %zr, %struct.secp256k1_fe** %zr.addr, align 8
  store %struct.secp256k1_fe* %z, %struct.secp256k1_fe** %z.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  call void @secp256k1_gej_double_var(%struct.secp256k1_gej* noundef %d, %struct.secp256k1_gej* noundef %2, %struct.secp256k1_fe* noundef null)
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %d, i32 0, i32 0
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %d, i32 0, i32 1
  call void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %d_ge, %struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %y)
  %3 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a.addr, align 8
  %arrayidx = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %3, i64 0
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %d, i32 0, i32 2
  call void @secp256k1_ge_set_gej_zinv(%struct.secp256k1_ge* noundef %arrayidx, %struct.secp256k1_gej* noundef %4, %struct.secp256k1_fe* noundef %z1)
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %5, i64 0
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %ai, %struct.secp256k1_ge* noundef %arrayidx2)
  %z3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %ai, i32 0, i32 2
  %6 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %6, i32 0, i32 2
  %7 = bitcast %struct.secp256k1_fe* %z3 to i8*
  %8 = bitcast %struct.secp256k1_fe* %z4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 40, i1 false)
  %9 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zr.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %9, i64 0
  %z6 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %d, i32 0, i32 2
  %10 = bitcast %struct.secp256k1_fe* %arrayidx5 to i8*
  %11 = bitcast %struct.secp256k1_fe* %z6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 40, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %12, %13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zr.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %14, i64 %idxprom
  call void @secp256k1_gej_add_ge_var(%struct.secp256k1_gej* noundef %ai, %struct.secp256k1_gej* noundef %ai, %struct.secp256k1_ge* noundef %d_ge, %struct.secp256k1_fe* noundef %arrayidx7)
  %16 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre_a.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %17 to i64
  %arrayidx9 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %16, i64 %idxprom8
  %x10 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %ai, i32 0, i32 0
  %y11 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %ai, i32 0, i32 1
  call void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %arrayidx9, %struct.secp256k1_fe* noundef %x10, %struct.secp256k1_fe* noundef %y11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !36

for.end:                                          ; preds = %for.cond
  %19 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %z.addr, align 8
  %z12 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %ai, i32 0, i32 2
  %z13 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %d, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %19, %struct.secp256k1_fe* noundef %z12, %struct.secp256k1_fe* noundef %z13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_table_set_globalz(i64 noundef %len, %struct.secp256k1_ge* noundef %a, %struct.secp256k1_fe* noundef %zr) #0 {
entry:
  %len.addr = alloca i64, align 8
  %a.addr = alloca %struct.secp256k1_ge*, align 8
  %zr.addr = alloca %struct.secp256k1_fe*, align 8
  %i = alloca i64, align 8
  %zs = alloca %struct.secp256k1_fe, align 8
  %tmpa = alloca %struct.secp256k1_gej, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.secp256k1_ge* %a, %struct.secp256k1_ge** %a.addr, align 8
  store %struct.secp256k1_fe* %zr, %struct.secp256k1_fe** %zr.addr, align 8
  %0 = load i64, i64* %len.addr, align 8
  %sub = sub i64 %0, 1
  store i64 %sub, i64* %i, align 8
  %1 = load i64, i64* %len.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %entry
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i64 %3
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx, i32 0, i32 1
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %y)
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zr.addr, align 8
  %5 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i64 %5
  %6 = bitcast %struct.secp256k1_fe* %zs to i8*
  %7 = bitcast %struct.secp256k1_fe* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 40, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %8 = load i64, i64* %i, align 8
  %cmp2 = icmp ugt i64 %8, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %len.addr, align 8
  %sub3 = sub i64 %10, 1
  %cmp4 = icmp ne i64 %9, %sub3
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %while.body
  %11 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zr.addr, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %11, i64 %12
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %zs, %struct.secp256k1_fe* noundef %zs, %struct.secp256k1_fe* noundef %arrayidx6)
  br label %if.end

if.end:                                           ; preds = %if.then5, %while.body
  %13 = load i64, i64* %i, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %i, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %tmpa, i32 0, i32 0
  %14 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx7 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %14, i64 %15
  %x8 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx7, i32 0, i32 0
  %16 = bitcast %struct.secp256k1_fe* %x to i8*
  %17 = bitcast %struct.secp256k1_fe* %x8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 40, i1 false)
  %y9 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %tmpa, i32 0, i32 1
  %18 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %19 = load i64, i64* %i, align 8
  %arrayidx10 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %18, i64 %19
  %y11 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx10, i32 0, i32 1
  %20 = bitcast %struct.secp256k1_fe* %y9 to i8*
  %21 = bitcast %struct.secp256k1_fe* %y11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 40, i1 false)
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %tmpa, i32 0, i32 3
  store i32 0, i32* %infinity, align 8
  %22 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %a.addr, align 8
  %23 = load i64, i64* %i, align 8
  %arrayidx12 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %22, i64 %23
  call void @secp256k1_ge_set_gej_zinv(%struct.secp256k1_ge* noundef %arrayidx12, %struct.secp256k1_gej* noundef %tmpa, %struct.secp256k1_fe* noundef %zs)
  br label %while.cond, !llvm.loop !37

while.end:                                        ; preds = %while.cond
  br label %if.end13

if.end13:                                         ; preds = %while.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_split_128(%struct.secp256k1_scalar* noundef %r1, %struct.secp256k1_scalar* noundef %r2, %struct.secp256k1_scalar* noundef %k) #0 {
entry:
  %r1.addr = alloca %struct.secp256k1_scalar*, align 8
  %r2.addr = alloca %struct.secp256k1_scalar*, align 8
  %k.addr = alloca %struct.secp256k1_scalar*, align 8
  store %struct.secp256k1_scalar* %r1, %struct.secp256k1_scalar** %r1.addr, align 8
  store %struct.secp256k1_scalar* %r2, %struct.secp256k1_scalar** %r2.addr, align 8
  store %struct.secp256k1_scalar* %k, %struct.secp256k1_scalar** %k.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 0
  store i64 %1, i64* %arrayidx2, align 8
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 1
  %4 = load i64, i64* %arrayidx4, align 8
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %5, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 1
  store i64 %4, i64* %arrayidx6, align 8
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %d7 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %6, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [4 x i64], [4 x i64]* %d7, i64 0, i64 2
  store i64 0, i64* %arrayidx8, align 8
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r1.addr, align 8
  %d9 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %7, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [4 x i64], [4 x i64]* %d9, i64 0, i64 3
  store i64 0, i64* %arrayidx10, align 8
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %d11 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x i64], [4 x i64]* %d11, i64 0, i64 2
  %9 = load i64, i64* %arrayidx12, align 8
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %d13 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %10, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %d13, i64 0, i64 0
  store i64 %9, i64* %arrayidx14, align 8
  %11 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %k.addr, align 8
  %d15 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %11, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x i64], [4 x i64]* %d15, i64 0, i64 3
  %12 = load i64, i64* %arrayidx16, align 8
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 1
  store i64 %12, i64* %arrayidx18, align 8
  %14 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %d19 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %14, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x i64], [4 x i64]* %d19, i64 0, i64 2
  store i64 0, i64* %arrayidx20, align 8
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r2.addr, align 8
  %d21 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x i64], [4 x i64]* %d21, i64 0, i64 3
  store i64 0, i64* %arrayidx22, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_double_var(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_fe* noundef %rzr) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %rzr.addr = alloca %struct.secp256k1_fe*, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_fe* %rzr, %struct.secp256k1_fe** %rzr.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %2)
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp = icmp ne %struct.secp256k1_fe* %3, null
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %4, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  br label %return

if.end2:                                          ; preds = %entry
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp3 = icmp ne %struct.secp256k1_fe* %5, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 1
  %8 = bitcast %struct.secp256k1_fe* %6 to i8*
  %9 = bitcast %struct.secp256k1_fe* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 40, i1 false)
  %10 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %10)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end2
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %12 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  call void @secp256k1_gej_double(%struct.secp256k1_gej* noundef %11, %struct.secp256k1_gej* noundef %12)
  br label %return

return:                                           ; preds = %if.end5, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_table_get_ge(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_ge* noundef %pre, i32 noundef %n, i32 noundef %w) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %pre.addr = alloca %struct.secp256k1_ge*, align 8
  %n.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_ge* %pre, %struct.secp256k1_ge** %pre.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %n.addr, align 4
  %and = and i32 %0, 1
  %cmp = icmp eq i32 %and, 1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %w.addr, align 4
  %sub = sub nsw i32 %2, 1
  %shl = shl i32 1, %sub
  %sub2 = sub nsw i32 %shl, 1
  %sub3 = sub nsw i32 0, %sub2
  %cmp4 = icmp sge i32 %1, %sub3
  %conv5 = zext i1 %cmp4 to i32
  br label %do.end6

do.end6:                                          ; preds = %do.body1
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  %3 = load i32, i32* %n.addr, align 4
  %4 = load i32, i32* %w.addr, align 4
  %sub8 = sub nsw i32 %4, 1
  %shl9 = shl i32 1, %sub8
  %sub10 = sub nsw i32 %shl9, 1
  %cmp11 = icmp sle i32 %3, %sub10
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body7
  %5 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp sgt i32 %5, 0
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %do.end13
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %7 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre.addr, align 8
  %8 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %8, 1
  %div = sdiv i32 %sub16, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %7, i64 %idxprom
  %9 = bitcast %struct.secp256k1_ge* %6 to i8*
  %10 = bitcast %struct.secp256k1_ge* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 88, i1 false)
  br label %if.end

if.else:                                          ; preds = %do.end13
  %11 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %12 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre.addr, align 8
  %13 = load i32, i32* %n.addr, align 4
  %sub17 = sub nsw i32 0, %13
  %sub18 = sub nsw i32 %sub17, 1
  %div19 = sdiv i32 %sub18, 2
  %idxprom20 = sext i32 %div19 to i64
  %arrayidx21 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %12, i64 %idxprom20
  %14 = bitcast %struct.secp256k1_ge* %11 to i8*
  %15 = bitcast %struct.secp256k1_ge* %arrayidx21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 88, i1 false)
  %16 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %16, i32 0, i32 1
  %17 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y22 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %17, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y22, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_add_ge_var(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_ge* noundef %b, %struct.secp256k1_fe* noundef %rzr) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %b.addr = alloca %struct.secp256k1_ge*, align 8
  %rzr.addr = alloca %struct.secp256k1_fe*, align 8
  %z12 = alloca %struct.secp256k1_fe, align 8
  %u1 = alloca %struct.secp256k1_fe, align 8
  %u2 = alloca %struct.secp256k1_fe, align 8
  %s1 = alloca %struct.secp256k1_fe, align 8
  %s2 = alloca %struct.secp256k1_fe, align 8
  %h = alloca %struct.secp256k1_fe, align 8
  %i = alloca %struct.secp256k1_fe, align 8
  %h2 = alloca %struct.secp256k1_fe, align 8
  %h3 = alloca %struct.secp256k1_fe, align 8
  %t = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_ge* %b, %struct.secp256k1_ge** %b.addr, align 8
  store %struct.secp256k1_fe* %rzr, %struct.secp256k1_fe** %rzr.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp = icmp eq %struct.secp256k1_fe* %2, null
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %3, %struct.secp256k1_ge* noundef %4)
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %5, i32 0, i32 2
  %6 = load i32, i32* %infinity1, align 8
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then3, label %if.end8

if.then3:                                         ; preds = %if.end
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp4 = icmp ne %struct.secp256k1_fe* %7, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %8, i32 noundef 1)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then3
  %9 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %10 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %11 = bitcast %struct.secp256k1_gej* %9 to i8*
  %12 = bitcast %struct.secp256k1_gej* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 128, i1 false)
  br label %return

if.end8:                                          ; preds = %if.end
  %13 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %13, i32 0, i32 2
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %z12, %struct.secp256k1_fe* noundef %z)
  %14 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %14, i32 0, i32 0
  %15 = bitcast %struct.secp256k1_fe* %u1 to i8*
  %16 = bitcast %struct.secp256k1_fe* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %u1)
  %17 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %x9 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %17, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %u2, %struct.secp256k1_fe* noundef %x9, %struct.secp256k1_fe* noundef %z12)
  %18 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %18, i32 0, i32 1
  %19 = bitcast %struct.secp256k1_fe* %s1 to i8*
  %20 = bitcast %struct.secp256k1_fe* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %s1)
  %21 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %y10 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %21, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %y10, %struct.secp256k1_fe* noundef %z12)
  %22 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z11 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %22, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %z11)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %h, %struct.secp256k1_fe* noundef %u1, i32 noundef 1)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %h, %struct.secp256k1_fe* noundef %u2)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %i, %struct.secp256k1_fe* noundef %s2, i32 noundef 1)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %i, %struct.secp256k1_fe* noundef %s1)
  %call = call i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %h)
  %tobool12 = icmp ne i32 %call, 0
  br i1 %tobool12, label %if.then13, label %if.end22

if.then13:                                        ; preds = %if.end8
  %call14 = call i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %i)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.then13
  %23 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %24 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %25 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  call void @secp256k1_gej_double_var(%struct.secp256k1_gej* noundef %23, %struct.secp256k1_gej* noundef %24, %struct.secp256k1_fe* noundef %25)
  br label %if.end21

if.else:                                          ; preds = %if.then13
  %26 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp17 = icmp ne %struct.secp256k1_fe* %26, null
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.else
  %27 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %27, i32 noundef 0)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.else
  %28 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %28)
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then16
  br label %return

if.end22:                                         ; preds = %if.end8
  %29 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity23 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %29, i32 0, i32 3
  store i32 0, i32* %infinity23, align 8
  %30 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %cmp24 = icmp ne %struct.secp256k1_fe* %30, null
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end22
  %31 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %rzr.addr, align 8
  %32 = bitcast %struct.secp256k1_fe* %31 to i8*
  %33 = bitcast %struct.secp256k1_fe* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 40, i1 false)
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end22
  %34 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z28 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %34, i32 0, i32 2
  %35 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z29 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %35, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z28, %struct.secp256k1_fe* noundef %z29, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h2, i32 noundef 1)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %u1, %struct.secp256k1_fe* noundef %h2)
  %36 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x30 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %36, i32 0, i32 0
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x30, %struct.secp256k1_fe* noundef %i)
  %37 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x31 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %37, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x31, %struct.secp256k1_fe* noundef %h3)
  %38 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x32 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %38, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x32, %struct.secp256k1_fe* noundef %t)
  %39 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x33 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %39, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x33, %struct.secp256k1_fe* noundef %t)
  %40 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x34 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %40, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %x34)
  %41 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y35 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %41, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y35, %struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %i)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %s1)
  %42 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y36 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %42, i32 0, i32 1
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %y36, %struct.secp256k1_fe* noundef %h3)
  br label %return

return:                                           ; preds = %if.end27, %if.end21, %if.end7, %do.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_table_get_ge_lambda(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_ge* noundef %pre, %struct.secp256k1_fe* noundef %x, i32 noundef %n, i32 noundef %w) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %pre.addr = alloca %struct.secp256k1_ge*, align 8
  %x.addr = alloca %struct.secp256k1_fe*, align 8
  %n.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_ge* %pre, %struct.secp256k1_ge** %pre.addr, align 8
  store %struct.secp256k1_fe* %x, %struct.secp256k1_fe** %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %n.addr, align 4
  %and = and i32 %0, 1
  %cmp = icmp eq i32 %and, 1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %w.addr, align 4
  %sub = sub nsw i32 %2, 1
  %shl = shl i32 1, %sub
  %sub2 = sub nsw i32 %shl, 1
  %sub3 = sub nsw i32 0, %sub2
  %cmp4 = icmp sge i32 %1, %sub3
  %conv5 = zext i1 %cmp4 to i32
  br label %do.end6

do.end6:                                          ; preds = %do.body1
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  %3 = load i32, i32* %n.addr, align 4
  %4 = load i32, i32* %w.addr, align 4
  %sub8 = sub nsw i32 %4, 1
  %shl9 = shl i32 1, %sub8
  %sub10 = sub nsw i32 %shl9, 1
  %cmp11 = icmp sle i32 %3, %sub10
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body7
  %5 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp sgt i32 %5, 0
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %do.end13
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  %8 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %8, 1
  %div = sdiv i32 %sub16, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i64 %idxprom
  %9 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre.addr, align 8
  %10 = load i32, i32* %n.addr, align 4
  %sub17 = sub nsw i32 %10, 1
  %div18 = sdiv i32 %sub17, 2
  %idxprom19 = sext i32 %div18 to i64
  %arrayidx20 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %9, i64 %idxprom19
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx20, i32 0, i32 1
  call void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %6, %struct.secp256k1_fe* noundef %arrayidx, %struct.secp256k1_fe* noundef %y)
  br label %if.end

if.else:                                          ; preds = %do.end13
  %11 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  %13 = load i32, i32* %n.addr, align 4
  %sub21 = sub nsw i32 0, %13
  %sub22 = sub nsw i32 %sub21, 1
  %div23 = sdiv i32 %sub22, 2
  %idxprom24 = sext i32 %div23 to i64
  %arrayidx25 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i64 %idxprom24
  %14 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %pre.addr, align 8
  %15 = load i32, i32* %n.addr, align 4
  %sub26 = sub nsw i32 0, %15
  %sub27 = sub nsw i32 %sub26, 1
  %div28 = sdiv i32 %sub27, 2
  %idxprom29 = sext i32 %div28 to i64
  %arrayidx30 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %14, i64 %idxprom29
  %y31 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %arrayidx30, i32 0, i32 1
  call void @secp256k1_ge_set_xy(%struct.secp256k1_ge* noundef %11, %struct.secp256k1_fe* noundef %arrayidx25, %struct.secp256k1_fe* noundef %y31)
  %16 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y32 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %16, i32 0, i32 1
  %17 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y33 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %17, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y32, %struct.secp256k1_fe* noundef %y33, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_table_get_ge_storage(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_ge_storage* noundef %pre, i32 noundef %n, i32 noundef %w) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %pre.addr = alloca %struct.secp256k1_ge_storage*, align 8
  %n.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_ge_storage* %pre, %struct.secp256k1_ge_storage** %pre.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %n.addr, align 4
  %and = and i32 %0, 1
  %cmp = icmp eq i32 %and, 1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %w.addr, align 4
  %sub = sub nsw i32 %2, 1
  %shl = shl i32 1, %sub
  %sub2 = sub nsw i32 %shl, 1
  %sub3 = sub nsw i32 0, %sub2
  %cmp4 = icmp sge i32 %1, %sub3
  %conv5 = zext i1 %cmp4 to i32
  br label %do.end6

do.end6:                                          ; preds = %do.body1
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  %3 = load i32, i32* %n.addr, align 4
  %4 = load i32, i32* %w.addr, align 4
  %sub8 = sub nsw i32 %4, 1
  %shl9 = shl i32 1, %sub8
  %sub10 = sub nsw i32 %shl9, 1
  %cmp11 = icmp sle i32 %3, %sub10
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body7
  %5 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp sgt i32 %5, 0
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %do.end13
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %7 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %pre.addr, align 8
  %8 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %8, 1
  %div = sdiv i32 %sub16, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %7, i64 %idxprom
  call void @secp256k1_ge_from_storage(%struct.secp256k1_ge* noundef %6, %struct.secp256k1_ge_storage* noundef %arrayidx)
  br label %if.end

if.else:                                          ; preds = %do.end13
  %9 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %10 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %pre.addr, align 8
  %11 = load i32, i32* %n.addr, align 4
  %sub17 = sub nsw i32 0, %11
  %sub18 = sub nsw i32 %sub17, 1
  %div19 = sdiv i32 %sub18, 2
  %idxprom20 = sext i32 %div19 to i64
  %arrayidx21 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %10, i64 %idxprom20
  call void @secp256k1_ge_from_storage(%struct.secp256k1_ge* noundef %9, %struct.secp256k1_ge_storage* noundef %arrayidx21)
  %12 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %12, i32 0, i32 1
  %13 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y22 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %13, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y22, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_add_zinv_var(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_ge* noundef %b, %struct.secp256k1_fe* noundef %bzinv) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %b.addr = alloca %struct.secp256k1_ge*, align 8
  %bzinv.addr = alloca %struct.secp256k1_fe*, align 8
  %az = alloca %struct.secp256k1_fe, align 8
  %z12 = alloca %struct.secp256k1_fe, align 8
  %u1 = alloca %struct.secp256k1_fe, align 8
  %u2 = alloca %struct.secp256k1_fe, align 8
  %s1 = alloca %struct.secp256k1_fe, align 8
  %s2 = alloca %struct.secp256k1_fe, align 8
  %h = alloca %struct.secp256k1_fe, align 8
  %i = alloca %struct.secp256k1_fe, align 8
  %h2 = alloca %struct.secp256k1_fe, align 8
  %h3 = alloca %struct.secp256k1_fe, align 8
  %t = alloca %struct.secp256k1_fe, align 8
  %bzinv2 = alloca %struct.secp256k1_fe, align 8
  %bzinv3 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_ge* %b, %struct.secp256k1_ge** %b.addr, align 8
  store %struct.secp256k1_fe* %bzinv, %struct.secp256k1_fe** %bzinv.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %2, i32 0, i32 2
  %3 = load i32, i32* %infinity1, align 8
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity2 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 3
  store i32 %3, i32* %infinity2, align 8
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %bzinv.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %bzinv2, %struct.secp256k1_fe* noundef %5)
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %bzinv.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %bzinv3, %struct.secp256k1_fe* noundef %bzinv2, %struct.secp256k1_fe* noundef %6)
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 0
  %8 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %x3 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %8, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %x3, %struct.secp256k1_fe* noundef %bzinv2)
  %9 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %9, i32 0, i32 1
  %10 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %y4 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %10, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y4, %struct.secp256k1_fe* noundef %bzinv3)
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %11, i32 0, i32 2
  call void @secp256k1_fe_set_int(%struct.secp256k1_fe* noundef %z, i32 noundef 1)
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %infinity5 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %12, i32 0, i32 2
  %13 = load i32, i32* %infinity5, align 8
  %tobool6 = icmp ne i32 %13, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %14 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %15 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %16 = bitcast %struct.secp256k1_gej* %14 to i8*
  %17 = bitcast %struct.secp256k1_gej* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 128, i1 false)
  br label %return

if.end8:                                          ; preds = %if.end
  %18 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z9 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %18, i32 0, i32 2
  %19 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %bzinv.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %az, %struct.secp256k1_fe* noundef %z9, %struct.secp256k1_fe* noundef %19)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %z12, %struct.secp256k1_fe* noundef %az)
  %20 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x10 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %20, i32 0, i32 0
  %21 = bitcast %struct.secp256k1_fe* %u1 to i8*
  %22 = bitcast %struct.secp256k1_fe* %x10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %u1)
  %23 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %x11 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %23, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %u2, %struct.secp256k1_fe* noundef %x11, %struct.secp256k1_fe* noundef %z12)
  %24 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y12 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %24, i32 0, i32 1
  %25 = bitcast %struct.secp256k1_fe* %s1 to i8*
  %26 = bitcast %struct.secp256k1_fe* %y12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 40, i1 false)
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %s1)
  %27 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %b.addr, align 8
  %y13 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %27, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %y13, %struct.secp256k1_fe* noundef %z12)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %s2, %struct.secp256k1_fe* noundef %az)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %h, %struct.secp256k1_fe* noundef %u1, i32 noundef 1)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %h, %struct.secp256k1_fe* noundef %u2)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %i, %struct.secp256k1_fe* noundef %s2, i32 noundef 1)
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %i, %struct.secp256k1_fe* noundef %s1)
  %call = call i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %h)
  %tobool14 = icmp ne i32 %call, 0
  br i1 %tobool14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end8
  %call16 = call i32 @secp256k1_fe_normalizes_to_zero_var(%struct.secp256k1_fe* noundef %i)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.then15
  %28 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %29 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  call void @secp256k1_gej_double_var(%struct.secp256k1_gej* noundef %28, %struct.secp256k1_gej* noundef %29, %struct.secp256k1_fe* noundef null)
  br label %if.end19

if.else:                                          ; preds = %if.then15
  %30 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_set_infinity(%struct.secp256k1_gej* noundef %30)
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then18
  br label %return

if.end20:                                         ; preds = %if.end8
  %31 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity21 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %31, i32 0, i32 3
  store i32 0, i32* %infinity21, align 8
  %32 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z22 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %32, i32 0, i32 2
  %33 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z23 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %33, i32 0, i32 2
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z22, %struct.secp256k1_fe* noundef %z23, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h2, i32 noundef 1)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %h2, %struct.secp256k1_fe* noundef %h)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %u1, %struct.secp256k1_fe* noundef %h2)
  %34 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x24 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %34, i32 0, i32 0
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x24, %struct.secp256k1_fe* noundef %i)
  %35 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x25 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %35, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x25, %struct.secp256k1_fe* noundef %h3)
  %36 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x26 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %36, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x26, %struct.secp256k1_fe* noundef %t)
  %37 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x27 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %37, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x27, %struct.secp256k1_fe* noundef %t)
  %38 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x28 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %38, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %x28)
  %39 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y29 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %39, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y29, %struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %i)
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %h3, %struct.secp256k1_fe* noundef %s1)
  %40 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y30 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %40, i32 0, i32 1
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %y30, %struct.secp256k1_fe* noundef %h3)
  br label %return

return:                                           ; preds = %if.end20, %if.end19, %if.then7, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_mul_shift_var(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %a, %struct.secp256k1_scalar* noundef %b, i32 noundef %shift) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %b.addr = alloca %struct.secp256k1_scalar*, align 8
  %shift.addr = alloca i32, align 4
  %l = alloca [8 x i64], align 16
  %shiftlimbs = alloca i32, align 4
  %shiftlow = alloca i32, align 4
  %shifthigh = alloca i32, align 4
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store %struct.secp256k1_scalar* %b, %struct.secp256k1_scalar** %b.addr, align 8
  store i32 %shift, i32* %shift.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %shift.addr, align 4
  %cmp = icmp uge i32 %0, 256
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %arraydecay = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 0
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  call void @secp256k1_scalar_mul_512(i64* noundef %arraydecay, %struct.secp256k1_scalar* noundef %1, %struct.secp256k1_scalar* noundef %2)
  %3 = load i32, i32* %shift.addr, align 4
  %shr = lshr i32 %3, 6
  store i32 %shr, i32* %shiftlimbs, align 4
  %4 = load i32, i32* %shift.addr, align 4
  %and = and i32 %4, 63
  store i32 %and, i32* %shiftlow, align 4
  %5 = load i32, i32* %shiftlow, align 4
  %sub = sub i32 64, %5
  store i32 %sub, i32* %shifthigh, align 4
  %6 = load i32, i32* %shift.addr, align 4
  %cmp1 = icmp ult i32 %6, 512
  br i1 %cmp1, label %cond.true, label %cond.false11

cond.true:                                        ; preds = %do.end
  %7 = load i32, i32* %shiftlimbs, align 4
  %add = add i32 0, %7
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom
  %8 = load i64, i64* %arrayidx, align 8
  %9 = load i32, i32* %shiftlow, align 4
  %sh_prom = zext i32 %9 to i64
  %shr3 = lshr i64 %8, %sh_prom
  %10 = load i32, i32* %shift.addr, align 4
  %cmp4 = icmp ult i32 %10, 448
  br i1 %cmp4, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %11 = load i32, i32* %shiftlow, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %cond.true6, label %cond.false

cond.true6:                                       ; preds = %land.lhs.true
  %12 = load i32, i32* %shiftlimbs, align 4
  %add7 = add i32 1, %12
  %idxprom8 = zext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom8
  %13 = load i64, i64* %arrayidx9, align 8
  %14 = load i32, i32* %shifthigh, align 4
  %sh_prom10 = zext i32 %14 to i64
  %shl = shl i64 %13, %sh_prom10
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true6
  %cond = phi i64 [ %shl, %cond.true6 ], [ 0, %cond.false ]
  %or = or i64 %shr3, %cond
  br label %cond.end12

cond.false11:                                     ; preds = %do.end
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.end
  %cond13 = phi i64 [ %or, %cond.end ], [ 0, %cond.false11 ]
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  store i64 %cond13, i64* %arrayidx14, align 8
  %16 = load i32, i32* %shift.addr, align 4
  %cmp15 = icmp ult i32 %16, 448
  br i1 %cmp15, label %cond.true17, label %cond.false37

cond.true17:                                      ; preds = %cond.end12
  %17 = load i32, i32* %shiftlimbs, align 4
  %add18 = add i32 1, %17
  %idxprom19 = zext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom19
  %18 = load i64, i64* %arrayidx20, align 8
  %19 = load i32, i32* %shiftlow, align 4
  %sh_prom21 = zext i32 %19 to i64
  %shr22 = lshr i64 %18, %sh_prom21
  %20 = load i32, i32* %shift.addr, align 4
  %cmp23 = icmp ult i32 %20, 384
  br i1 %cmp23, label %land.lhs.true25, label %cond.false33

land.lhs.true25:                                  ; preds = %cond.true17
  %21 = load i32, i32* %shiftlow, align 4
  %tobool26 = icmp ne i32 %21, 0
  br i1 %tobool26, label %cond.true27, label %cond.false33

cond.true27:                                      ; preds = %land.lhs.true25
  %22 = load i32, i32* %shiftlimbs, align 4
  %add28 = add i32 2, %22
  %idxprom29 = zext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom29
  %23 = load i64, i64* %arrayidx30, align 8
  %24 = load i32, i32* %shifthigh, align 4
  %sh_prom31 = zext i32 %24 to i64
  %shl32 = shl i64 %23, %sh_prom31
  br label %cond.end34

cond.false33:                                     ; preds = %land.lhs.true25, %cond.true17
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true27
  %cond35 = phi i64 [ %shl32, %cond.true27 ], [ 0, %cond.false33 ]
  %or36 = or i64 %shr22, %cond35
  br label %cond.end38

cond.false37:                                     ; preds = %cond.end12
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.end34
  %cond39 = phi i64 [ %or36, %cond.end34 ], [ 0, %cond.false37 ]
  %25 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d40 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %25, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [4 x i64], [4 x i64]* %d40, i64 0, i64 1
  store i64 %cond39, i64* %arrayidx41, align 8
  %26 = load i32, i32* %shift.addr, align 4
  %cmp42 = icmp ult i32 %26, 384
  br i1 %cmp42, label %cond.true44, label %cond.false64

cond.true44:                                      ; preds = %cond.end38
  %27 = load i32, i32* %shiftlimbs, align 4
  %add45 = add i32 2, %27
  %idxprom46 = zext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom46
  %28 = load i64, i64* %arrayidx47, align 8
  %29 = load i32, i32* %shiftlow, align 4
  %sh_prom48 = zext i32 %29 to i64
  %shr49 = lshr i64 %28, %sh_prom48
  %30 = load i32, i32* %shift.addr, align 4
  %cmp50 = icmp ult i32 %30, 320
  br i1 %cmp50, label %land.lhs.true52, label %cond.false60

land.lhs.true52:                                  ; preds = %cond.true44
  %31 = load i32, i32* %shiftlow, align 4
  %tobool53 = icmp ne i32 %31, 0
  br i1 %tobool53, label %cond.true54, label %cond.false60

cond.true54:                                      ; preds = %land.lhs.true52
  %32 = load i32, i32* %shiftlimbs, align 4
  %add55 = add i32 3, %32
  %idxprom56 = zext i32 %add55 to i64
  %arrayidx57 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom56
  %33 = load i64, i64* %arrayidx57, align 8
  %34 = load i32, i32* %shifthigh, align 4
  %sh_prom58 = zext i32 %34 to i64
  %shl59 = shl i64 %33, %sh_prom58
  br label %cond.end61

cond.false60:                                     ; preds = %land.lhs.true52, %cond.true44
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true54
  %cond62 = phi i64 [ %shl59, %cond.true54 ], [ 0, %cond.false60 ]
  %or63 = or i64 %shr49, %cond62
  br label %cond.end65

cond.false64:                                     ; preds = %cond.end38
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false64, %cond.end61
  %cond66 = phi i64 [ %or63, %cond.end61 ], [ 0, %cond.false64 ]
  %35 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d67 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %35, i32 0, i32 0
  %arrayidx68 = getelementptr inbounds [4 x i64], [4 x i64]* %d67, i64 0, i64 2
  store i64 %cond66, i64* %arrayidx68, align 8
  %36 = load i32, i32* %shift.addr, align 4
  %cmp69 = icmp ult i32 %36, 320
  br i1 %cmp69, label %cond.true71, label %cond.false77

cond.true71:                                      ; preds = %cond.end65
  %37 = load i32, i32* %shiftlimbs, align 4
  %add72 = add i32 3, %37
  %idxprom73 = zext i32 %add72 to i64
  %arrayidx74 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom73
  %38 = load i64, i64* %arrayidx74, align 8
  %39 = load i32, i32* %shiftlow, align 4
  %sh_prom75 = zext i32 %39 to i64
  %shr76 = lshr i64 %38, %sh_prom75
  br label %cond.end78

cond.false77:                                     ; preds = %cond.end65
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true71
  %cond79 = phi i64 [ %shr76, %cond.true71 ], [ 0, %cond.false77 ]
  %40 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d80 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %40, i32 0, i32 0
  %arrayidx81 = getelementptr inbounds [4 x i64], [4 x i64]* %d80, i64 0, i64 3
  store i64 %cond79, i64* %arrayidx81, align 8
  %41 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %42 = load i32, i32* %shift.addr, align 4
  %sub82 = sub i32 %42, 1
  %shr83 = lshr i32 %sub82, 6
  %idxprom84 = zext i32 %shr83 to i64
  %arrayidx85 = getelementptr inbounds [8 x i64], [8 x i64]* %l, i64 0, i64 %idxprom84
  %43 = load i64, i64* %arrayidx85, align 8
  %44 = load i32, i32* %shift.addr, align 4
  %sub86 = sub i32 %44, 1
  %and87 = and i32 %sub86, 63
  %sh_prom88 = zext i32 %and87 to i64
  %shr89 = lshr i64 %43, %sh_prom88
  %and90 = and i64 %shr89, 1
  %conv91 = trunc i64 %and90 to i32
  call void @secp256k1_scalar_cadd_bit(%struct.secp256k1_scalar* noundef %41, i32 noundef 0, i32 noundef %conv91)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %a, %struct.secp256k1_scalar* noundef %b) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %b.addr = alloca %struct.secp256k1_scalar*, align 8
  %overflow = alloca i32, align 4
  %t = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store %struct.secp256k1_scalar* %b, %struct.secp256k1_scalar** %b.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  call void @secp256k1_u128_from_u64(i128* noundef %t, i64 noundef %1)
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d1 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %d1, i64 0, i64 0
  %3 = load i64, i64* %arrayidx2, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %3)
  %call = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %4 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d3 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i64], [4 x i64]* %d3, i64 0, i64 0
  store i64 %call, i64* %arrayidx4, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %5 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %5, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 1
  %6 = load i64, i64* %arrayidx6, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %6)
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d7 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %7, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [4 x i64], [4 x i64]* %d7, i64 0, i64 1
  %8 = load i64, i64* %arrayidx8, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %8)
  %call9 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d10 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %9, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [4 x i64], [4 x i64]* %d10, i64 0, i64 1
  store i64 %call9, i64* %arrayidx11, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d12 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %10, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x i64], [4 x i64]* %d12, i64 0, i64 2
  %11 = load i64, i64* %arrayidx13, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %11)
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d14 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [4 x i64], [4 x i64]* %d14, i64 0, i64 2
  %13 = load i64, i64* %arrayidx15, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %13)
  %call16 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %14 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %14, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 2
  store i64 %call16, i64* %arrayidx18, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %15 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d19 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %15, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x i64], [4 x i64]* %d19, i64 0, i64 3
  %16 = load i64, i64* %arrayidx20, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %16)
  %17 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %b.addr, align 8
  %d21 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %17, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x i64], [4 x i64]* %d21, i64 0, i64 3
  %18 = load i64, i64* %arrayidx22, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %18)
  %call23 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %19 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d24 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %19, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x i64], [4 x i64]* %d24, i64 0, i64 3
  store i64 %call23, i64* %arrayidx25, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %call26 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %20 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %call27 = call i32 @secp256k1_scalar_check_overflow(%struct.secp256k1_scalar* noundef %20)
  %conv = sext i32 %call27 to i64
  %add = add i64 %call26, %conv
  %conv28 = trunc i64 %add to i32
  store i32 %conv28, i32* %overflow, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %21 = load i32, i32* %overflow, align 4
  %cmp = icmp eq i32 %21, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body
  %22 = load i32, i32* %overflow, align 4
  %cmp30 = icmp eq i32 %22, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body
  %23 = phi i1 [ true, %do.body ], [ %cmp30, %lor.rhs ]
  %lor.ext = zext i1 %23 to i32
  br label %do.end

do.end:                                           ; preds = %lor.end
  %24 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %25 = load i32, i32* %overflow, align 4
  %call32 = call i32 @secp256k1_scalar_reduce(%struct.secp256k1_scalar* noundef %24, i32 noundef %25)
  %26 = load i32, i32* %overflow, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_cadd_bit(%struct.secp256k1_scalar* noundef %r, i32 noundef %bit, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %bit.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %t = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %bit.addr, align 4
  %cmp = icmp ult i32 %0, 256
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load i32, i32* %flag.addr, align 4
  %sub = sub i32 %1, 1
  %and = and i32 %sub, 256
  %2 = load i32, i32* %bit.addr, align 4
  %add = add i32 %2, %and
  store i32 %add, i32* %bit.addr, align 4
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %4 = load i64, i64* %arrayidx, align 8
  call void @secp256k1_u128_from_u64(i128* noundef %t, i64 noundef %4)
  %5 = load i32, i32* %bit.addr, align 4
  %shr = lshr i32 %5, 6
  %cmp1 = icmp eq i32 %shr, 0
  %conv2 = zext i1 %cmp1 to i32
  %conv3 = sext i32 %conv2 to i64
  %6 = load i32, i32* %bit.addr, align 4
  %and4 = and i32 %6, 63
  %sh_prom = zext i32 %and4 to i64
  %shl = shl i64 %conv3, %sh_prom
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %shl)
  %call = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d5 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %7, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i64], [4 x i64]* %d5, i64 0, i64 0
  store i64 %call, i64* %arrayidx6, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d7 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [4 x i64], [4 x i64]* %d7, i64 0, i64 1
  %9 = load i64, i64* %arrayidx8, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %9)
  %10 = load i32, i32* %bit.addr, align 4
  %shr9 = lshr i32 %10, 6
  %cmp10 = icmp eq i32 %shr9, 1
  %conv11 = zext i1 %cmp10 to i32
  %conv12 = sext i32 %conv11 to i64
  %11 = load i32, i32* %bit.addr, align 4
  %and13 = and i32 %11, 63
  %sh_prom14 = zext i32 %and13 to i64
  %shl15 = shl i64 %conv12, %sh_prom14
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %shl15)
  %call16 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %12, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 1
  store i64 %call16, i64* %arrayidx18, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d19 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x i64], [4 x i64]* %d19, i64 0, i64 2
  %14 = load i64, i64* %arrayidx20, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %14)
  %15 = load i32, i32* %bit.addr, align 4
  %shr21 = lshr i32 %15, 6
  %cmp22 = icmp eq i32 %shr21, 2
  %conv23 = zext i1 %cmp22 to i32
  %conv24 = sext i32 %conv23 to i64
  %16 = load i32, i32* %bit.addr, align 4
  %and25 = and i32 %16, 63
  %sh_prom26 = zext i32 %and25 to i64
  %shl27 = shl i64 %conv24, %sh_prom26
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %shl27)
  %call28 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %17 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d29 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %17, i32 0, i32 0
  %arrayidx30 = getelementptr inbounds [4 x i64], [4 x i64]* %d29, i64 0, i64 2
  store i64 %call28, i64* %arrayidx30, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %18 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d31 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %18, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [4 x i64], [4 x i64]* %d31, i64 0, i64 3
  %19 = load i64, i64* %arrayidx32, align 8
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %19)
  %20 = load i32, i32* %bit.addr, align 4
  %shr33 = lshr i32 %20, 6
  %cmp34 = icmp eq i32 %shr33, 3
  %conv35 = zext i1 %cmp34 to i32
  %conv36 = sext i32 %conv35 to i64
  %21 = load i32, i32* %bit.addr, align 4
  %and37 = and i32 %21, 63
  %sh_prom38 = zext i32 %and37 to i64
  %shl39 = shl i64 %conv36, %sh_prom38
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %shl39)
  %call40 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %22 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d41 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %22, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds [4 x i64], [4 x i64]* %d41, i64 0, i64 3
  store i64 %call40, i64* %arrayidx42, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_get_bits(%struct.secp256k1_scalar* noundef %a, i32 noundef %offset, i32 noundef %count) #0 {
entry:
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i32 %count, i32* %count.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %offset.addr, align 4
  %1 = load i32, i32* %count.addr, align 4
  %add = add i32 %0, %1
  %sub = sub i32 %add, 1
  %shr = lshr i32 %sub, 6
  %2 = load i32, i32* %offset.addr, align 4
  %shr1 = lshr i32 %2, 6
  %cmp = icmp eq i32 %shr, %shr1
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %3, i32 0, i32 0
  %4 = load i32, i32* %offset.addr, align 4
  %shr2 = lshr i32 %4, 6
  %idxprom = zext i32 %shr2 to i64
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 %idxprom
  %5 = load i64, i64* %arrayidx, align 8
  %6 = load i32, i32* %offset.addr, align 4
  %and = and i32 %6, 63
  %sh_prom = zext i32 %and to i64
  %shr3 = lshr i64 %5, %sh_prom
  %7 = load i32, i32* %count.addr, align 4
  %sh_prom4 = zext i32 %7 to i64
  %shl = shl i64 1, %sh_prom4
  %sub5 = sub i64 %shl, 1
  %and6 = and i64 %shr3, %sub5
  %conv7 = trunc i64 %and6 to i32
  ret i32 %conv7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_get_bits_var(%struct.secp256k1_scalar* noundef %a, i32 noundef %offset, i32 noundef %count) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.secp256k1_scalar*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.secp256k1_scalar* %a, %struct.secp256k1_scalar** %a.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i32 %count, i32* %count.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %count.addr, align 4
  %cmp = icmp ult i32 %0, 32
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load i32, i32* %offset.addr, align 4
  %2 = load i32, i32* %count.addr, align 4
  %add = add i32 %1, %2
  %cmp2 = icmp ule i32 %add, 256
  %conv3 = zext i1 %cmp2 to i32
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %3 = load i32, i32* %offset.addr, align 4
  %4 = load i32, i32* %count.addr, align 4
  %add5 = add i32 %3, %4
  %sub = sub i32 %add5, 1
  %shr = lshr i32 %sub, 6
  %5 = load i32, i32* %offset.addr, align 4
  %shr6 = lshr i32 %5, 6
  %cmp7 = icmp eq i32 %shr, %shr6
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %do.end4
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %7 = load i32, i32* %offset.addr, align 4
  %8 = load i32, i32* %count.addr, align 4
  %call = call i32 @secp256k1_scalar_get_bits(%struct.secp256k1_scalar* noundef %6, i32 noundef %7, i32 noundef %8)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %do.end4
  br label %do.body9

do.body9:                                         ; preds = %if.else
  %9 = load i32, i32* %offset.addr, align 4
  %shr10 = lshr i32 %9, 6
  %add11 = add i32 %shr10, 1
  %cmp12 = icmp ult i32 %add11, 4
  %conv13 = zext i1 %cmp12 to i32
  br label %do.end14

do.end14:                                         ; preds = %do.body9
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %10, i32 0, i32 0
  %11 = load i32, i32* %offset.addr, align 4
  %shr15 = lshr i32 %11, 6
  %idxprom = zext i32 %shr15 to i64
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 %idxprom
  %12 = load i64, i64* %arrayidx, align 8
  %13 = load i32, i32* %offset.addr, align 4
  %and = and i32 %13, 63
  %sh_prom = zext i32 %and to i64
  %shr16 = lshr i64 %12, %sh_prom
  %14 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %a.addr, align 8
  %d17 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %14, i32 0, i32 0
  %15 = load i32, i32* %offset.addr, align 4
  %shr18 = lshr i32 %15, 6
  %add19 = add i32 %shr18, 1
  %idxprom20 = zext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds [4 x i64], [4 x i64]* %d17, i64 0, i64 %idxprom20
  %16 = load i64, i64* %arrayidx21, align 8
  %17 = load i32, i32* %offset.addr, align 4
  %and22 = and i32 %17, 63
  %sub23 = sub i32 64, %and22
  %sh_prom24 = zext i32 %sub23 to i64
  %shl = shl i64 %16, %sh_prom24
  %or = or i64 %shr16, %shl
  %18 = load i32, i32* %count.addr, align 4
  %sh_prom25 = zext i32 %18 to i64
  %shl26 = shl i64 1, %sh_prom25
  %sub27 = sub i64 %shl26, 1
  %and28 = and i64 %or, %sub27
  %conv29 = trunc i64 %and28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end14, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_set_gej_zinv(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_gej* noundef %a, %struct.secp256k1_fe* noundef %zi) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %zi.addr = alloca %struct.secp256k1_fe*, align 8
  %zi2 = alloca %struct.secp256k1_fe, align 8
  %zi3 = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_ge* %r, %struct.secp256k1_ge** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  store %struct.secp256k1_fe* %zi, %struct.secp256k1_fe** %zi.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zi.addr, align 8
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %zi2, %struct.secp256k1_fe* noundef %2)
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %zi.addr, align 8
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %zi3, %struct.secp256k1_fe* noundef %zi2, %struct.secp256k1_fe* noundef %3)
  %4 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %4, i32 0, i32 0
  %5 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %5, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %x, %struct.secp256k1_fe* noundef %x1, %struct.secp256k1_fe* noundef %zi2)
  %6 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %6, i32 0, i32 1
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y, %struct.secp256k1_fe* noundef %y2, %struct.secp256k1_fe* noundef %zi3)
  %8 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %8, i32 0, i32 3
  %9 = load i32, i32* %infinity3, align 8
  %10 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %r.addr, align 8
  %infinity4 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %10, i32 0, i32 2
  store i32 %9, i32* %infinity4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_double(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  %l = alloca %struct.secp256k1_fe, align 8
  %s = alloca %struct.secp256k1_fe, align 8
  %t = alloca %struct.secp256k1_fe, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 3
  store i32 %1, i32* %infinity1, align 8
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 2
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z2 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 2
  %5 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %5, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %z, %struct.secp256k1_fe* noundef %z2, %struct.secp256k1_fe* noundef %y)
  %6 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %6, i32 0, i32 1
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %s, %struct.secp256k1_fe* noundef %y3)
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 0
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %l, %struct.secp256k1_fe* noundef %x)
  call void @secp256k1_fe_mul_int(%struct.secp256k1_fe* noundef %l, i32 noundef 3)
  call void @secp256k1_fe_half(%struct.secp256k1_fe* noundef %l)
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %s, i32 noundef 1)
  %8 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %8, i32 0, i32 0
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %x4)
  %9 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x5 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %9, i32 0, i32 0
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %x5, %struct.secp256k1_fe* noundef %l)
  %10 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x6 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %10, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x6, %struct.secp256k1_fe* noundef %t)
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x7 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %11, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %x7, %struct.secp256k1_fe* noundef %t)
  call void @secp256k1_fe_sqr(%struct.secp256k1_fe* noundef %s, %struct.secp256k1_fe* noundef %s)
  %12 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x8 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %12, i32 0, i32 0
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %x8)
  %13 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y9 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %13, i32 0, i32 1
  call void @secp256k1_fe_mul(%struct.secp256k1_fe* noundef %y9, %struct.secp256k1_fe* noundef %t, %struct.secp256k1_fe* noundef %l)
  %14 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y10 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %14, i32 0, i32 1
  call void @secp256k1_fe_add(%struct.secp256k1_fe* noundef %y10, %struct.secp256k1_fe* noundef %s)
  %15 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y11 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %15, i32 0, i32 1
  %16 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y12 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %16, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y11, %struct.secp256k1_fe* noundef %y12, i32 noundef 2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_mul_int(%struct.secp256k1_fe* noundef %r, i32 noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca i32, align 4
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %conv = sext i32 %0 to i64
  %1 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %mul = mul i64 %2, %conv
  store i64 %mul, i64* %arrayidx, align 8
  %3 = load i32, i32* %a.addr, align 4
  %conv1 = sext i32 %3 to i64
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n2 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %n2, i64 0, i64 1
  %5 = load i64, i64* %arrayidx3, align 8
  %mul4 = mul i64 %5, %conv1
  store i64 %mul4, i64* %arrayidx3, align 8
  %6 = load i32, i32* %a.addr, align 4
  %conv5 = sext i32 %6 to i64
  %7 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n6, i64 0, i64 2
  %8 = load i64, i64* %arrayidx7, align 8
  %mul8 = mul i64 %8, %conv5
  store i64 %mul8, i64* %arrayidx7, align 8
  %9 = load i32, i32* %a.addr, align 4
  %conv9 = sext i32 %9 to i64
  %10 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n10 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %10, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [5 x i64], [5 x i64]* %n10, i64 0, i64 3
  %11 = load i64, i64* %arrayidx11, align 8
  %mul12 = mul i64 %11, %conv9
  store i64 %mul12, i64* %arrayidx11, align 8
  %12 = load i32, i32* %a.addr, align 4
  %conv13 = sext i32 %12 to i64
  %13 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n14 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %13, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [5 x i64], [5 x i64]* %n14, i64 0, i64 4
  %14 = load i64, i64* %arrayidx15, align 8
  %mul16 = mul i64 %14, %conv13
  store i64 %mul16, i64* %arrayidx15, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_half(%struct.secp256k1_fe* noundef %r) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %t0 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %one = alloca i64, align 8
  %mask = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %t0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %t1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %t2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %t3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %t4, align 8
  store i64 1, i64* %one, align 8
  %10 = load i64, i64* %t0, align 8
  %11 = load i64, i64* %one, align 8
  %and = and i64 %10, %11
  %sub = sub i64 0, %and
  %shr = lshr i64 %sub, 12
  store i64 %shr, i64* %mask, align 8
  %12 = load i64, i64* %mask, align 8
  %and9 = and i64 4503595332402223, %12
  %13 = load i64, i64* %t0, align 8
  %add = add i64 %13, %and9
  store i64 %add, i64* %t0, align 8
  %14 = load i64, i64* %mask, align 8
  %15 = load i64, i64* %t1, align 8
  %add10 = add i64 %15, %14
  store i64 %add10, i64* %t1, align 8
  %16 = load i64, i64* %mask, align 8
  %17 = load i64, i64* %t2, align 8
  %add11 = add i64 %17, %16
  store i64 %add11, i64* %t2, align 8
  %18 = load i64, i64* %mask, align 8
  %19 = load i64, i64* %t3, align 8
  %add12 = add i64 %19, %18
  store i64 %add12, i64* %t3, align 8
  %20 = load i64, i64* %mask, align 8
  %shr13 = lshr i64 %20, 4
  %21 = load i64, i64* %t4, align 8
  %add14 = add i64 %21, %shr13
  store i64 %add14, i64* %t4, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %22 = load i64, i64* %t0, align 8
  %23 = load i64, i64* %one, align 8
  %and15 = and i64 %22, %23
  %cmp = icmp eq i64 %and15, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  %24 = load i64, i64* %t0, align 8
  %shr16 = lshr i64 %24, 1
  %25 = load i64, i64* %t1, align 8
  %26 = load i64, i64* %one, align 8
  %and17 = and i64 %25, %26
  %shl = shl i64 %and17, 51
  %add18 = add i64 %shr16, %shl
  %27 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n19 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %27, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [5 x i64], [5 x i64]* %n19, i64 0, i64 0
  store i64 %add18, i64* %arrayidx20, align 8
  %28 = load i64, i64* %t1, align 8
  %shr21 = lshr i64 %28, 1
  %29 = load i64, i64* %t2, align 8
  %30 = load i64, i64* %one, align 8
  %and22 = and i64 %29, %30
  %shl23 = shl i64 %and22, 51
  %add24 = add i64 %shr21, %shl23
  %31 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n25 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %31, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [5 x i64], [5 x i64]* %n25, i64 0, i64 1
  store i64 %add24, i64* %arrayidx26, align 8
  %32 = load i64, i64* %t2, align 8
  %shr27 = lshr i64 %32, 1
  %33 = load i64, i64* %t3, align 8
  %34 = load i64, i64* %one, align 8
  %and28 = and i64 %33, %34
  %shl29 = shl i64 %and28, 51
  %add30 = add i64 %shr27, %shl29
  %35 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n31 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %35, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [5 x i64], [5 x i64]* %n31, i64 0, i64 2
  store i64 %add30, i64* %arrayidx32, align 8
  %36 = load i64, i64* %t3, align 8
  %shr33 = lshr i64 %36, 1
  %37 = load i64, i64* %t4, align 8
  %38 = load i64, i64* %one, align 8
  %and34 = and i64 %37, %38
  %shl35 = shl i64 %and34, 51
  %add36 = add i64 %shr33, %shl35
  %39 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n37 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %39, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [5 x i64], [5 x i64]* %n37, i64 0, i64 3
  store i64 %add36, i64* %arrayidx38, align 8
  %40 = load i64, i64* %t4, align 8
  %shr39 = lshr i64 %40, 1
  %41 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n40 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %41, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [5 x i64], [5 x i64]* %n40, i64 0, i64 4
  store i64 %shr39, i64* %arrayidx41, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @buffer_append(i8* noundef %buf, i32* noundef %offset, i8* noundef %data, i32 noundef %len) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %offset.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32* %offset, i32** %offset.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i32*, i32** %offset.addr, align 8
  %2 = load i32, i32* %1, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %idx.ext
  %3 = load i8*, i8** %data.addr, align 8
  %4 = load i32, i32* %len.addr, align 4
  %conv = zext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %3, i64 %conv, i1 false)
  %5 = load i32, i32* %len.addr, align 4
  %6 = load i32*, i32** %offset.addr, align 8
  %7 = load i32, i32* %6, align 4
  %add = add i32 %7, %5
  store i32 %add, i32* %6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_rfc6979_hmac_sha256_initialize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %key, i64 noundef %keylen) #0 {
entry:
  %rng.addr = alloca %struct.secp256k1_rfc6979_hmac_sha256*, align 8
  %key.addr = alloca i8*, align 8
  %keylen.addr = alloca i64, align 8
  %hmac = alloca %struct.secp256k1_hmac_sha256, align 8
  store %struct.secp256k1_rfc6979_hmac_sha256* %rng, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  store i8* %key, i8** %key.addr, align 8
  store i64 %keylen, i64* %keylen.addr, align 8
  %0 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %v, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay, i8 1, i64 32, i1 false)
  %1 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %1, i32 0, i32 1
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %k, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay1, i8 0, i64 32, i1 false)
  %2 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k2 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %2, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %k2, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay3, i64 noundef 32)
  %3 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v4 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %3, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %v4, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay5, i64 noundef 32)
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef getelementptr inbounds ([1 x i8], [1 x i8]* @secp256k1_rfc6979_hmac_sha256_initialize.zero, i64 0, i64 0), i64 noundef 1)
  %4 = load i8*, i8** %key.addr, align 8
  %5 = load i64, i64* %keylen.addr, align 8
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %4, i64 noundef %5)
  %6 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k6 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %6, i32 0, i32 1
  %arraydecay7 = getelementptr inbounds [32 x i8], [32 x i8]* %k6, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay7)
  %7 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k8 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %7, i32 0, i32 1
  %arraydecay9 = getelementptr inbounds [32 x i8], [32 x i8]* %k8, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay9, i64 noundef 32)
  %8 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v10 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %8, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [32 x i8], [32 x i8]* %v10, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay11, i64 noundef 32)
  %9 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v12 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %9, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [32 x i8], [32 x i8]* %v12, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay13)
  %10 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k14 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %10, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [32 x i8], [32 x i8]* %k14, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay15, i64 noundef 32)
  %11 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v16 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %11, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [32 x i8], [32 x i8]* %v16, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay17, i64 noundef 32)
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef getelementptr inbounds ([1 x i8], [1 x i8]* @secp256k1_rfc6979_hmac_sha256_initialize.one, i64 0, i64 0), i64 noundef 1)
  %12 = load i8*, i8** %key.addr, align 8
  %13 = load i64, i64* %keylen.addr, align 8
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %12, i64 noundef %13)
  %14 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k18 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %14, i32 0, i32 1
  %arraydecay19 = getelementptr inbounds [32 x i8], [32 x i8]* %k18, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay19)
  %15 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k20 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %15, i32 0, i32 1
  %arraydecay21 = getelementptr inbounds [32 x i8], [32 x i8]* %k20, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay21, i64 noundef 32)
  %16 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v22 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %16, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [32 x i8], [32 x i8]* %v22, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay23, i64 noundef 32)
  %17 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v24 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %17, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [32 x i8], [32 x i8]* %v24, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay25)
  %18 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %retry = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %18, i32 0, i32 2
  store i32 0, i32* %retry, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_rfc6979_hmac_sha256_generate(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng, i8* noundef %out, i64 noundef %outlen) #0 {
entry:
  %rng.addr = alloca %struct.secp256k1_rfc6979_hmac_sha256*, align 8
  %out.addr = alloca i8*, align 8
  %outlen.addr = alloca i64, align 8
  %hmac = alloca %struct.secp256k1_hmac_sha256, align 8
  %hmac10 = alloca %struct.secp256k1_hmac_sha256, align 8
  %now = alloca i32, align 4
  store %struct.secp256k1_rfc6979_hmac_sha256* %rng, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  store i8* %out, i8** %out.addr, align 8
  store i64 %outlen, i64* %outlen.addr, align 8
  %0 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %retry = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %0, i32 0, i32 2
  %1 = load i32, i32* %retry, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %k, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay, i64 noundef 32)
  %3 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %3, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %v, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay1, i64 noundef 32)
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef getelementptr inbounds ([1 x i8], [1 x i8]* @secp256k1_rfc6979_hmac_sha256_generate.zero, i64 0, i64 0), i64 noundef 1)
  %4 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k2 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %4, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %k2, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay3)
  %5 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k4 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %5, i32 0, i32 1
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %k4, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay5, i64 noundef 32)
  %6 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v6 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %6, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [32 x i8], [32 x i8]* %v6, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay7, i64 noundef 32)
  %7 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v8 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %7, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [32 x i8], [32 x i8]* %v8, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac, i8* noundef %arraydecay9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.end
  %8 = load i64, i64* %outlen.addr, align 8
  %cmp = icmp ugt i64 %8, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %outlen.addr, align 8
  %conv = trunc i64 %9 to i32
  store i32 %conv, i32* %now, align 4
  %10 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k11 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %10, i32 0, i32 1
  %arraydecay12 = getelementptr inbounds [32 x i8], [32 x i8]* %k11, i64 0, i64 0
  call void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hmac10, i8* noundef %arraydecay12, i64 noundef 32)
  %11 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v13 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %11, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [32 x i8], [32 x i8]* %v13, i64 0, i64 0
  call void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hmac10, i8* noundef %arraydecay14, i64 noundef 32)
  %12 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v15 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %12, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [32 x i8], [32 x i8]* %v15, i64 0, i64 0
  call void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hmac10, i8* noundef %arraydecay16)
  %13 = load i32, i32* %now, align 4
  %cmp17 = icmp sgt i32 %13, 32
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %while.body
  store i32 32, i32* %now, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %while.body
  %14 = load i8*, i8** %out.addr, align 8
  %15 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v21 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %15, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [32 x i8], [32 x i8]* %v21, i64 0, i64 0
  %16 = load i32, i32* %now, align 4
  %conv23 = sext i32 %16 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 4 %arraydecay22, i64 %conv23, i1 false)
  %17 = load i32, i32* %now, align 4
  %18 = load i8*, i8** %out.addr, align 8
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  store i8* %add.ptr, i8** %out.addr, align 8
  %19 = load i32, i32* %now, align 4
  %conv24 = sext i32 %19 to i64
  %20 = load i64, i64* %outlen.addr, align 8
  %sub = sub i64 %20, %conv24
  store i64 %sub, i64* %outlen.addr, align 8
  br label %while.cond, !llvm.loop !38

while.end:                                        ; preds = %while.cond
  %21 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %retry25 = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %21, i32 0, i32 2
  store i32 1, i32* %retry25, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_rfc6979_hmac_sha256_finalize(%struct.secp256k1_rfc6979_hmac_sha256* noundef %rng) #0 {
entry:
  %rng.addr = alloca %struct.secp256k1_rfc6979_hmac_sha256*, align 8
  store %struct.secp256k1_rfc6979_hmac_sha256* %rng, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %0 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %k = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %0, i32 0, i32 1
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %k, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay, i8 0, i64 32, i1 false)
  %1 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %v, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay1, i8 0, i64 32, i1 false)
  %2 = load %struct.secp256k1_rfc6979_hmac_sha256*, %struct.secp256k1_rfc6979_hmac_sha256** %rng.addr, align 8
  %retry = getelementptr inbounds %struct.secp256k1_rfc6979_hmac_sha256, %struct.secp256k1_rfc6979_hmac_sha256* %2, i32 0, i32 2
  store i32 0, i32* %retry, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_hmac_sha256_initialize(%struct.secp256k1_hmac_sha256* noundef %hash, i8* noundef %key, i64 noundef %keylen) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_hmac_sha256*, align 8
  %key.addr = alloca i8*, align 8
  %keylen.addr = alloca i64, align 8
  %n = alloca i64, align 8
  %rkey = alloca [64 x i8], align 16
  %sha256 = alloca %struct.secp256k1_sha256, align 8
  store %struct.secp256k1_hmac_sha256* %hash, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  store i8* %key, i8** %key.addr, align 8
  store i64 %keylen, i64* %keylen.addr, align 8
  %0 = load i64, i64* %keylen.addr, align 8
  %cmp = icmp ule i64 %0, 64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  %1 = load i8*, i8** %key.addr, align 8
  %2 = load i64, i64* %keylen.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay, i8* align 1 %1, i64 %2, i1 false)
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  %3 = load i64, i64* %keylen.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay1, i64 %3
  %4 = load i64, i64* %keylen.addr, align 8
  %sub = sub i64 64, %4
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 0, i64 %sub, i1 false)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %sha256)
  %5 = load i8*, i8** %key.addr, align 8
  %6 = load i64, i64* %keylen.addr, align 8
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %sha256, i8* noundef %5, i64 noundef %6)
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %sha256, i8* noundef %arraydecay2)
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  %add.ptr4 = getelementptr inbounds i8, i8* %arraydecay3, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr4, i8 0, i64 32, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %outer = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %7, i32 0, i32 1
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %outer)
  store i64 0, i64* %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i64, i64* %n, align 8
  %cmp5 = icmp ult i64 %8, 64
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %n, align 8
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i32
  %xor = xor i32 %conv, 92
  %conv6 = trunc i32 %xor to i8
  store i8 %conv6, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %n, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %n, align 8
  br label %for.cond, !llvm.loop !39

for.end:                                          ; preds = %for.cond
  %12 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %outer7 = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %12, i32 0, i32 1
  %arraydecay8 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %outer7, i8* noundef %arraydecay8, i64 noundef 64)
  %13 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %inner = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %13, i32 0, i32 0
  call void @secp256k1_sha256_initialize(%struct.secp256k1_sha256* noundef %inner)
  store i64 0, i64* %n, align 8
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc17, %for.end
  %14 = load i64, i64* %n, align 8
  %cmp10 = icmp ult i64 %14, 64
  br i1 %cmp10, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond9
  %15 = load i64, i64* %n, align 8
  %arrayidx13 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 %15
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %16 to i32
  %xor15 = xor i32 %conv14, 106
  %conv16 = trunc i32 %xor15 to i8
  store i8 %conv16, i8* %arrayidx13, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %17 = load i64, i64* %n, align 8
  %inc18 = add i64 %17, 1
  store i64 %inc18, i64* %n, align 8
  br label %for.cond9, !llvm.loop !40

for.end19:                                        ; preds = %for.cond9
  %18 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %inner20 = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %18, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %inner20, i8* noundef %arraydecay21, i64 noundef 64)
  %arraydecay22 = getelementptr inbounds [64 x i8], [64 x i8]* %rkey, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay22, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_hmac_sha256_write(%struct.secp256k1_hmac_sha256* noundef %hash, i8* noundef %data, i64 noundef %size) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_hmac_sha256*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store %struct.secp256k1_hmac_sha256* %hash, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %inner = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %0, i32 0, i32 0
  %1 = load i8*, i8** %data.addr, align 8
  %2 = load i64, i64* %size.addr, align 8
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %inner, i8* noundef %1, i64 noundef %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_hmac_sha256_finalize(%struct.secp256k1_hmac_sha256* noundef %hash, i8* noundef %out32) #0 {
entry:
  %hash.addr = alloca %struct.secp256k1_hmac_sha256*, align 8
  %out32.addr = alloca i8*, align 8
  %temp = alloca [32 x i8], align 16
  store %struct.secp256k1_hmac_sha256* %hash, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  store i8* %out32, i8** %out32.addr, align 8
  %0 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %inner = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %temp, i64 0, i64 0
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %inner, i8* noundef %arraydecay)
  %1 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %outer = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %1, i32 0, i32 1
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %temp, i64 0, i64 0
  call void @secp256k1_sha256_write(%struct.secp256k1_sha256* noundef %outer, i8* noundef %arraydecay1, i64 noundef 32)
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %temp, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay2, i8 0, i64 32, i1 false)
  %2 = load %struct.secp256k1_hmac_sha256*, %struct.secp256k1_hmac_sha256** %hash.addr, align 8
  %outer3 = getelementptr inbounds %struct.secp256k1_hmac_sha256, %struct.secp256k1_hmac_sha256* %2, i32 0, i32 1
  %3 = load i8*, i8** %out32.addr, align 8
  call void @secp256k1_sha256_finalize(%struct.secp256k1_sha256* noundef %outer3, i8* noundef %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_declassify(%struct.secp256k1_context_struct* noundef %ctx, i8* noundef %p, i64 noundef %len) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_context_struct*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.secp256k1_context_struct* %ctx, %struct.secp256k1_context_struct** %ctx.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.secp256k1_context_struct*, %struct.secp256k1_context_struct** %ctx.addr, align 8
  %1 = load i8*, i8** %p.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_ecdsa_sig_sign(%struct.secp256k1_ecmult_gen_context* noundef %ctx, %struct.secp256k1_scalar* noundef %sigr, %struct.secp256k1_scalar* noundef %sigs, %struct.secp256k1_scalar* noundef %seckey, %struct.secp256k1_scalar* noundef %message, %struct.secp256k1_scalar* noundef %nonce, i32* noundef %recid) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  %sigr.addr = alloca %struct.secp256k1_scalar*, align 8
  %sigs.addr = alloca %struct.secp256k1_scalar*, align 8
  %seckey.addr = alloca %struct.secp256k1_scalar*, align 8
  %message.addr = alloca %struct.secp256k1_scalar*, align 8
  %nonce.addr = alloca %struct.secp256k1_scalar*, align 8
  %recid.addr = alloca i32*, align 8
  %b = alloca [32 x i8], align 16
  %rp = alloca %struct.secp256k1_gej, align 8
  %r = alloca %struct.secp256k1_ge, align 8
  %n = alloca %struct.secp256k1_scalar, align 8
  %overflow = alloca i32, align 4
  %high = alloca i32, align 4
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  store %struct.secp256k1_scalar* %sigr, %struct.secp256k1_scalar** %sigr.addr, align 8
  store %struct.secp256k1_scalar* %sigs, %struct.secp256k1_scalar** %sigs.addr, align 8
  store %struct.secp256k1_scalar* %seckey, %struct.secp256k1_scalar** %seckey.addr, align 8
  store %struct.secp256k1_scalar* %message, %struct.secp256k1_scalar** %message.addr, align 8
  store %struct.secp256k1_scalar* %nonce, %struct.secp256k1_scalar** %nonce.addr, align 8
  store i32* %recid, i32** %recid.addr, align 8
  store i32 0, i32* %overflow, align 4
  %0 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %nonce.addr, align 8
  call void @secp256k1_ecmult_gen(%struct.secp256k1_ecmult_gen_context* noundef %0, %struct.secp256k1_gej* noundef %rp, %struct.secp256k1_scalar* noundef %1)
  call void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %r, %struct.secp256k1_gej* noundef %rp)
  %x = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %r, i32 0, i32 0
  call void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %x)
  %y = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %r, i32 0, i32 1
  call void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %y)
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %b, i64 0, i64 0
  %x1 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %r, i32 0, i32 0
  call void @secp256k1_fe_get_b32(i8* noundef %arraydecay, %struct.secp256k1_fe* noundef %x1)
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %b, i64 0, i64 0
  call void @secp256k1_scalar_set_b32(%struct.secp256k1_scalar* noundef %2, i8* noundef %arraydecay2, i32* noundef %overflow)
  %3 = load i32*, i32** %recid.addr, align 8
  %tobool = icmp ne i32* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %overflow, align 4
  %shl = shl i32 %4, 1
  %y3 = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %r, i32 0, i32 1
  %call = call i32 @secp256k1_fe_is_odd(%struct.secp256k1_fe* noundef %y3)
  %or = or i32 %shl, %call
  %5 = load i32*, i32** %recid.addr, align 8
  store i32 %or, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %seckey.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %n, %struct.secp256k1_scalar* noundef %6, %struct.secp256k1_scalar* noundef %7)
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %message.addr, align 8
  %call4 = call i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %n, %struct.secp256k1_scalar* noundef %n, %struct.secp256k1_scalar* noundef %8)
  %9 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %10 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %nonce.addr, align 8
  call void @secp256k1_scalar_inverse(%struct.secp256k1_scalar* noundef %9, %struct.secp256k1_scalar* noundef %10)
  %11 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %12 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  call void @secp256k1_scalar_mul(%struct.secp256k1_scalar* noundef %11, %struct.secp256k1_scalar* noundef %12, %struct.secp256k1_scalar* noundef %n)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %n)
  call void @secp256k1_gej_clear(%struct.secp256k1_gej* noundef %rp)
  call void @secp256k1_ge_clear(%struct.secp256k1_ge* noundef %r)
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %call5 = call i32 @secp256k1_scalar_is_high(%struct.secp256k1_scalar* noundef %13)
  store i32 %call5, i32* %high, align 4
  %14 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %15 = load i32, i32* %high, align 4
  %call6 = call i32 @secp256k1_scalar_cond_negate(%struct.secp256k1_scalar* noundef %14, i32 noundef %15)
  %16 = load i32*, i32** %recid.addr, align 8
  %tobool7 = icmp ne i32* %16, null
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %17 = load i32, i32* %high, align 4
  %18 = load i32*, i32** %recid.addr, align 8
  %19 = load i32, i32* %18, align 4
  %xor = xor i32 %19, %17
  store i32 %xor, i32* %18, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %20 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigr.addr, align 8
  %call10 = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %20)
  %tobool11 = icmp ne i32 %call10, 0
  %lnot = xor i1 %tobool11, true
  %lnot.ext = zext i1 %lnot to i32
  %21 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %sigs.addr, align 8
  %call12 = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %21)
  %tobool13 = icmp ne i32 %call12, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %and = and i32 %lnot.ext, %lnot.ext15
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_int_cmov(i32* noundef %r, i32* noundef %a, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca i32*, align 8
  %a.addr = alloca i32*, align 8
  %flag.addr = alloca i32, align 4
  %mask0 = alloca i32, align 4
  %mask1 = alloca i32, align 4
  %r_masked = alloca i32, align 4
  %a_masked = alloca i32, align 4
  %vflag = alloca i32, align 4
  store i32* %r, i32** %r.addr, align 8
  store i32* %a, i32** %a.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  store volatile i32 %0, i32* %vflag, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32*, i32** %r.addr, align 8
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body
  %3 = load i32*, i32** %a.addr, align 8
  %4 = load i32, i32* %3, align 4
  %cmp1 = icmp sge i32 %4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body
  %5 = phi i1 [ false, %do.body ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  br label %do.end

do.end:                                           ; preds = %land.end
  %6 = load volatile i32, i32* %vflag, align 4
  %add = add i32 %6, -1
  store i32 %add, i32* %mask0, align 4
  %7 = load i32, i32* %mask0, align 4
  %neg = xor i32 %7, -1
  store i32 %neg, i32* %mask1, align 4
  %8 = load i32*, i32** %r.addr, align 8
  %9 = load i32, i32* %8, align 4
  %10 = load i32, i32* %mask0, align 4
  %and = and i32 %9, %10
  store i32 %and, i32* %r_masked, align 4
  %11 = load i32*, i32** %a.addr, align 8
  %12 = load i32, i32* %11, align 4
  %13 = load i32, i32* %mask1, align 4
  %and2 = and i32 %12, %13
  store i32 %and2, i32* %a_masked, align 4
  %14 = load i32, i32* %r_masked, align 4
  %15 = load i32, i32* %a_masked, align 4
  %or = or i32 %14, %15
  %16 = load i32*, i32** %r.addr, align 8
  store i32 %or, i32* %16, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ecmult_gen(%struct.secp256k1_ecmult_gen_context* noundef %ctx, %struct.secp256k1_gej* noundef %r, %struct.secp256k1_scalar* noundef %gn) #0 {
entry:
  %ctx.addr = alloca %struct.secp256k1_ecmult_gen_context*, align 8
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %gn.addr = alloca %struct.secp256k1_scalar*, align 8
  %bits = alloca i32, align 4
  %g = alloca i32, align 4
  %n = alloca i32, align 4
  %add = alloca %struct.secp256k1_ge, align 8
  %adds = alloca %struct.secp256k1_ge_storage, align 8
  %gnb = alloca %struct.secp256k1_scalar, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n_i = alloca i32, align 4
  store %struct.secp256k1_ecmult_gen_context* %ctx, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_scalar* %gn, %struct.secp256k1_scalar** %gn.addr, align 8
  store i32 4, i32* %bits, align 4
  %0 = load i32, i32* %bits, align 4
  %shl = shl i32 1, %0
  store i32 %shl, i32* %g, align 4
  %1 = load i32, i32* %bits, align 4
  %div = sdiv i32 256, %1
  store i32 %div, i32* %n, align 4
  %2 = bitcast %struct.secp256k1_ge_storage* %adds to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 64, i1 false)
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %4 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %initial = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %4, i32 0, i32 2
  %5 = bitcast %struct.secp256k1_gej* %3 to i8*
  %6 = bitcast %struct.secp256k1_gej* %initial to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 128, i1 false)
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %gn.addr, align 8
  %8 = load %struct.secp256k1_ecmult_gen_context*, %struct.secp256k1_ecmult_gen_context** %ctx.addr, align 8
  %blind = getelementptr inbounds %struct.secp256k1_ecmult_gen_context, %struct.secp256k1_ecmult_gen_context* %8, i32 0, i32 1
  %call = call i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %gnb, %struct.secp256k1_scalar* noundef %7, %struct.secp256k1_scalar* noundef %blind)
  %infinity = getelementptr inbounds %struct.secp256k1_ge, %struct.secp256k1_ge* %add, i32 0, i32 2
  store i32 0, i32* %infinity, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bits, align 4
  %mul = mul nsw i32 %11, %12
  %13 = load i32, i32* %bits, align 4
  %call1 = call i32 @secp256k1_scalar_get_bits(%struct.secp256k1_scalar* noundef %gnb, i32 noundef %mul, i32 noundef %13)
  store i32 %call1, i32* %n_i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %g, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds [64 x [16 x %struct.secp256k1_ge_storage]], [64 x [16 x %struct.secp256k1_ge_storage]]* @secp256k1_ecmult_gen_prec_table, i64 0, i64 %idxprom
  %17 = load i32, i32* %j, align 4
  %idxprom5 = sext i32 %17 to i64
  %arrayidx6 = getelementptr inbounds [16 x %struct.secp256k1_ge_storage], [16 x %struct.secp256k1_ge_storage]* %arrayidx, i64 0, i64 %idxprom5
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %n_i, align 4
  %cmp7 = icmp eq i32 %18, %19
  %conv = zext i1 %cmp7 to i32
  call void @secp256k1_ge_storage_cmov(%struct.secp256k1_ge_storage* noundef %adds, %struct.secp256k1_ge_storage* noundef %arrayidx6, i32 noundef %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2, !llvm.loop !41

for.end:                                          ; preds = %for.cond2
  call void @secp256k1_ge_from_storage(%struct.secp256k1_ge* noundef %add, %struct.secp256k1_ge_storage* noundef %adds)
  %21 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %22 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  call void @secp256k1_gej_add_ge(%struct.secp256k1_gej* noundef %21, %struct.secp256k1_gej* noundef %22, %struct.secp256k1_ge* noundef %add)
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %23, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond, !llvm.loop !42

for.end10:                                        ; preds = %for.cond
  store i32 0, i32* %n_i, align 4
  call void @secp256k1_ge_clear(%struct.secp256k1_ge* noundef %add)
  call void @secp256k1_scalar_clear(%struct.secp256k1_scalar* noundef %gnb)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_scalar_inverse(%struct.secp256k1_scalar* noundef %r, %struct.secp256k1_scalar* noundef %x) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %x.addr = alloca %struct.secp256k1_scalar*, align 8
  %s = alloca %struct.secp256k1_modinv64_signed62, align 8
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store %struct.secp256k1_scalar* %x, %struct.secp256k1_scalar** %x.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %x.addr, align 8
  call void @secp256k1_scalar_to_signed62(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_scalar* noundef %0)
  call void @secp256k1_modinv64(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_modinv64_modinfo* noundef @secp256k1_const_modinfo_scalar)
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  call void @secp256k1_scalar_from_signed62(%struct.secp256k1_scalar* noundef %1, %struct.secp256k1_modinv64_signed62* noundef %s)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_scalar_cond_negate(%struct.secp256k1_scalar* noundef %r, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_scalar*, align 8
  %flag.addr = alloca i32, align 4
  %mask = alloca i64, align 8
  %nonzero = alloca i64, align 8
  %t = alloca i128, align 16
  store %struct.secp256k1_scalar* %r, %struct.secp256k1_scalar** %r.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %sub = sub nsw i32 %lnot.ext, 1
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %mask, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %call = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %1)
  %cmp = icmp ne i32 %call, 0
  %conv1 = zext i1 %cmp to i32
  %sub2 = sub nsw i32 %conv1, 1
  %conv3 = sext i32 %sub2 to i64
  store i64 %conv3, i64* %nonzero, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %2, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %d, i64 0, i64 0
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i64, i64* %mask, align 8
  %xor = xor i64 %3, %4
  call void @secp256k1_u128_from_u64(i128* noundef %t, i64 noundef %xor)
  %5 = load i64, i64* %mask, align 8
  %and = and i64 -4624529908474429118, %5
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %and)
  %call4 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %6 = load i64, i64* %nonzero, align 8
  %and5 = and i64 %call4, %6
  %7 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d6 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %d6, i64 0, i64 0
  store i64 %and5, i64* %arrayidx7, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %8 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d8 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %8, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [4 x i64], [4 x i64]* %d8, i64 0, i64 1
  %9 = load i64, i64* %arrayidx9, align 8
  %10 = load i64, i64* %mask, align 8
  %xor10 = xor i64 %9, %10
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %xor10)
  %11 = load i64, i64* %mask, align 8
  %and11 = and i64 -4994812053365940165, %11
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %and11)
  %call12 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %12 = load i64, i64* %nonzero, align 8
  %and13 = and i64 %call12, %12
  %13 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d14 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %13, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [4 x i64], [4 x i64]* %d14, i64 0, i64 1
  store i64 %and13, i64* %arrayidx15, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %14 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d16 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %14, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [4 x i64], [4 x i64]* %d16, i64 0, i64 2
  %15 = load i64, i64* %arrayidx17, align 8
  %16 = load i64, i64* %mask, align 8
  %xor18 = xor i64 %15, %16
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %xor18)
  %17 = load i64, i64* %mask, align 8
  %and19 = and i64 -2, %17
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %and19)
  %call20 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %18 = load i64, i64* %nonzero, align 8
  %and21 = and i64 %call20, %18
  %19 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d22 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %19, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [4 x i64], [4 x i64]* %d22, i64 0, i64 2
  store i64 %and21, i64* %arrayidx23, align 8
  call void @secp256k1_u128_rshift(i128* noundef %t, i32 noundef 64)
  %20 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d24 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %20, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x i64], [4 x i64]* %d24, i64 0, i64 3
  %21 = load i64, i64* %arrayidx25, align 8
  %22 = load i64, i64* %mask, align 8
  %xor26 = xor i64 %21, %22
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %xor26)
  %23 = load i64, i64* %mask, align 8
  %and27 = and i64 -1, %23
  call void @secp256k1_u128_accum_u64(i128* noundef %t, i64 noundef %and27)
  %call28 = call i64 @secp256k1_u128_to_u64(i128* noundef %t)
  %24 = load i64, i64* %nonzero, align 8
  %and29 = and i64 %call28, %24
  %25 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %r.addr, align 8
  %d30 = getelementptr inbounds %struct.secp256k1_scalar, %struct.secp256k1_scalar* %25, i32 0, i32 0
  %arrayidx31 = getelementptr inbounds [4 x i64], [4 x i64]* %d30, i64 0, i64 3
  store i64 %and29, i64* %arrayidx31, align 8
  %26 = load i64, i64* %mask, align 8
  %cmp32 = icmp eq i64 %26, 0
  %conv33 = zext i1 %cmp32 to i32
  %mul = mul nsw i32 2, %conv33
  %sub34 = sub nsw i32 %mul, 1
  ret i32 %sub34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_ge_storage_cmov(%struct.secp256k1_ge_storage* noundef %r, %struct.secp256k1_ge_storage* noundef %a, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_ge_storage*, align 8
  %a.addr = alloca %struct.secp256k1_ge_storage*, align 8
  %flag.addr = alloca i32, align 4
  store %struct.secp256k1_ge_storage* %r, %struct.secp256k1_ge_storage** %r.addr, align 8
  store %struct.secp256k1_ge_storage* %a, %struct.secp256k1_ge_storage** %a.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %0, i32 0, i32 0
  %1 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %a.addr, align 8
  %x1 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %1, i32 0, i32 0
  %2 = load i32, i32* %flag.addr, align 4
  call void @secp256k1_fe_storage_cmov(%struct.secp256k1_fe_storage* noundef %x, %struct.secp256k1_fe_storage* noundef %x1, i32 noundef %2)
  %3 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %3, i32 0, i32 1
  %4 = load %struct.secp256k1_ge_storage*, %struct.secp256k1_ge_storage** %a.addr, align 8
  %y2 = getelementptr inbounds %struct.secp256k1_ge_storage, %struct.secp256k1_ge_storage* %4, i32 0, i32 1
  %5 = load i32, i32* %flag.addr, align 4
  call void @secp256k1_fe_storage_cmov(%struct.secp256k1_fe_storage* noundef %y, %struct.secp256k1_fe_storage* noundef %y2, i32 noundef %5)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_storage_cmov(%struct.secp256k1_fe_storage* noundef %r, %struct.secp256k1_fe_storage* noundef %a, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe_storage*, align 8
  %a.addr = alloca %struct.secp256k1_fe_storage*, align 8
  %flag.addr = alloca i32, align 4
  %mask0 = alloca i64, align 8
  %mask1 = alloca i64, align 8
  store %struct.secp256k1_fe_storage* %r, %struct.secp256k1_fe_storage** %r.addr, align 8
  store %struct.secp256k1_fe_storage* %a, %struct.secp256k1_fe_storage** %a.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  %conv = sext i32 %0 to i64
  %add = add i64 %conv, -1
  store i64 %add, i64* %mask0, align 8
  %1 = load i64, i64* %mask0, align 8
  %neg = xor i64 %1, -1
  store i64 %neg, i64* %mask1, align 8
  %2 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %2, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %n, i64 0, i64 0
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i64, i64* %mask0, align 8
  %and = and i64 %3, %4
  %5 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %5, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %n1, i64 0, i64 0
  %6 = load i64, i64* %arrayidx2, align 8
  %7 = load i64, i64* %mask1, align 8
  %and3 = and i64 %6, %7
  %or = or i64 %and, %and3
  %8 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n4 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %8, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [4 x i64], [4 x i64]* %n4, i64 0, i64 0
  store i64 %or, i64* %arrayidx5, align 8
  %9 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %9, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x i64], [4 x i64]* %n6, i64 0, i64 1
  %10 = load i64, i64* %arrayidx7, align 8
  %11 = load i64, i64* %mask0, align 8
  %and8 = and i64 %10, %11
  %12 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n9 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %12, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [4 x i64], [4 x i64]* %n9, i64 0, i64 1
  %13 = load i64, i64* %arrayidx10, align 8
  %14 = load i64, i64* %mask1, align 8
  %and11 = and i64 %13, %14
  %or12 = or i64 %and8, %and11
  %15 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n13 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %15, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x i64], [4 x i64]* %n13, i64 0, i64 1
  store i64 %or12, i64* %arrayidx14, align 8
  %16 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n15 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %16, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x i64], [4 x i64]* %n15, i64 0, i64 2
  %17 = load i64, i64* %arrayidx16, align 8
  %18 = load i64, i64* %mask0, align 8
  %and17 = and i64 %17, %18
  %19 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n18 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %19, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [4 x i64], [4 x i64]* %n18, i64 0, i64 2
  %20 = load i64, i64* %arrayidx19, align 8
  %21 = load i64, i64* %mask1, align 8
  %and20 = and i64 %20, %21
  %or21 = or i64 %and17, %and20
  %22 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n22 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %22, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [4 x i64], [4 x i64]* %n22, i64 0, i64 2
  store i64 %or21, i64* %arrayidx23, align 8
  %23 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n24 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %23, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x i64], [4 x i64]* %n24, i64 0, i64 3
  %24 = load i64, i64* %arrayidx25, align 8
  %25 = load i64, i64* %mask0, align 8
  %and26 = and i64 %24, %25
  %26 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %a.addr, align 8
  %n27 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %26, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %n27, i64 0, i64 3
  %27 = load i64, i64* %arrayidx28, align 8
  %28 = load i64, i64* %mask1, align 8
  %and29 = and i64 %27, %28
  %or30 = or i64 %and26, %and29
  %29 = load %struct.secp256k1_fe_storage*, %struct.secp256k1_fe_storage** %r.addr, align 8
  %n31 = getelementptr inbounds %struct.secp256k1_fe_storage, %struct.secp256k1_fe_storage* %29, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [4 x i64], [4 x i64]* %n31, i64 0, i64 3
  store i64 %or30, i64* %arrayidx32, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64(%struct.secp256k1_modinv64_signed62* noundef %x, %struct.secp256k1_modinv64_modinfo* noundef %modinfo) #0 {
entry:
  %x.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %modinfo.addr = alloca %struct.secp256k1_modinv64_modinfo*, align 8
  %d = alloca %struct.secp256k1_modinv64_signed62, align 8
  %e = alloca %struct.secp256k1_modinv64_signed62, align 8
  %f = alloca %struct.secp256k1_modinv64_signed62, align 8
  %g = alloca %struct.secp256k1_modinv64_signed62, align 8
  %i = alloca i32, align 4
  %zeta = alloca i64, align 8
  %t = alloca %struct.secp256k1_modinv64_trans2x2, align 8
  store %struct.secp256k1_modinv64_signed62* %x, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  store %struct.secp256k1_modinv64_modinfo* %modinfo, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %0 = bitcast %struct.secp256k1_modinv64_signed62* %d to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 40, i1 false)
  %1 = bitcast %struct.secp256k1_modinv64_signed62* %e to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false)
  %2 = bitcast i8* %1 to %struct.secp256k1_modinv64_signed62*
  %3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %4 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i32 0, i32 0
  store i64 1, i64* %4, align 8
  %5 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  %modulus = getelementptr inbounds %struct.secp256k1_modinv64_modinfo, %struct.secp256k1_modinv64_modinfo* %5, i32 0, i32 0
  %6 = bitcast %struct.secp256k1_modinv64_signed62* %f to i8*
  %7 = bitcast %struct.secp256k1_modinv64_signed62* %modulus to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 40, i1 false)
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  %9 = bitcast %struct.secp256k1_modinv64_signed62* %g to i8*
  %10 = bitcast %struct.secp256k1_modinv64_signed62* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  store i64 -1, i64* %zeta, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %zeta, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %13 = load i64, i64* %arrayidx, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %g, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 0
  %14 = load i64, i64* %arrayidx2, align 8
  %call = call i64 @secp256k1_modinv64_divsteps_59(i64 noundef %12, i64 noundef %13, i64 noundef %14, %struct.secp256k1_modinv64_trans2x2* noundef %t)
  store i64 %call, i64* %zeta, align 8
  %15 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  call void @secp256k1_modinv64_update_de_62(%struct.secp256k1_modinv64_signed62* noundef %d, %struct.secp256k1_modinv64_signed62* noundef %e, %struct.secp256k1_modinv64_trans2x2* noundef %t, %struct.secp256k1_modinv64_modinfo* noundef %15)
  call void @secp256k1_modinv64_update_fg_62(%struct.secp256k1_modinv64_signed62* noundef %f, %struct.secp256k1_modinv64_signed62* noundef %g, %struct.secp256k1_modinv64_trans2x2* noundef %t)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !43

for.end:                                          ; preds = %for.cond
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %f, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 4
  %17 = load i64, i64* %arrayidx4, align 8
  %18 = load %struct.secp256k1_modinv64_modinfo*, %struct.secp256k1_modinv64_modinfo** %modinfo.addr, align 8
  call void @secp256k1_modinv64_normalize_62(%struct.secp256k1_modinv64_signed62* noundef %d, i64 noundef %17, %struct.secp256k1_modinv64_modinfo* noundef %18)
  %19 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %x.addr, align 8
  %20 = bitcast %struct.secp256k1_modinv64_signed62* %19 to i8*
  %21 = bitcast %struct.secp256k1_modinv64_signed62* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 40, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @secp256k1_modinv64_divsteps_59(i64 noundef %zeta, i64 noundef %f0, i64 noundef %g0, %struct.secp256k1_modinv64_trans2x2* noundef %t) #0 {
entry:
  %zeta.addr = alloca i64, align 8
  %f0.addr = alloca i64, align 8
  %g0.addr = alloca i64, align 8
  %t.addr = alloca %struct.secp256k1_modinv64_trans2x2*, align 8
  %u = alloca i64, align 8
  %v = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %c1 = alloca i64, align 8
  %c2 = alloca i64, align 8
  %f = alloca i64, align 8
  %g = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %z = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %zeta, i64* %zeta.addr, align 8
  store i64 %f0, i64* %f0.addr, align 8
  store i64 %g0, i64* %g0.addr, align 8
  store %struct.secp256k1_modinv64_trans2x2* %t, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  store i64 8, i64* %u, align 8
  store i64 0, i64* %v, align 8
  store i64 0, i64* %q, align 8
  store i64 8, i64* %r, align 8
  %0 = load i64, i64* %f0.addr, align 8
  store i64 %0, i64* %f, align 8
  %1 = load i64, i64* %g0.addr, align 8
  store i64 %1, i64* %g, align 8
  store i32 3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 62
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %3 = load i64, i64* %f, align 8
  %and = and i64 %3, 1
  %cmp1 = icmp eq i64 %and, 1
  %conv = zext i1 %cmp1 to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %4 = load i64, i64* %u, align 8
  %5 = load i64, i64* %f0.addr, align 8
  %mul = mul i64 %4, %5
  %6 = load i64, i64* %v, align 8
  %7 = load i64, i64* %g0.addr, align 8
  %mul3 = mul i64 %6, %7
  %add = add i64 %mul, %mul3
  %8 = load i64, i64* %f, align 8
  %9 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %9 to i64
  %shl = shl i64 %8, %sh_prom
  %cmp4 = icmp eq i64 %add, %shl
  %conv5 = zext i1 %cmp4 to i32
  br label %do.end6

do.end6:                                          ; preds = %do.body2
  br label %do.body7

do.body7:                                         ; preds = %do.end6
  %10 = load i64, i64* %q, align 8
  %11 = load i64, i64* %f0.addr, align 8
  %mul8 = mul i64 %10, %11
  %12 = load i64, i64* %r, align 8
  %13 = load i64, i64* %g0.addr, align 8
  %mul9 = mul i64 %12, %13
  %add10 = add i64 %mul8, %mul9
  %14 = load i64, i64* %g, align 8
  %15 = load i32, i32* %i, align 4
  %sh_prom11 = zext i32 %15 to i64
  %shl12 = shl i64 %14, %sh_prom11
  %cmp13 = icmp eq i64 %add10, %shl12
  %conv14 = zext i1 %cmp13 to i32
  br label %do.end15

do.end15:                                         ; preds = %do.body7
  %16 = load i64, i64* %zeta.addr, align 8
  %shr = ashr i64 %16, 63
  store i64 %shr, i64* %c1, align 8
  %17 = load i64, i64* %g, align 8
  %and16 = and i64 %17, 1
  %sub = sub i64 0, %and16
  store i64 %sub, i64* %c2, align 8
  %18 = load i64, i64* %f, align 8
  %19 = load i64, i64* %c1, align 8
  %xor = xor i64 %18, %19
  %20 = load i64, i64* %c1, align 8
  %sub17 = sub i64 %xor, %20
  store i64 %sub17, i64* %x, align 8
  %21 = load i64, i64* %u, align 8
  %22 = load i64, i64* %c1, align 8
  %xor18 = xor i64 %21, %22
  %23 = load i64, i64* %c1, align 8
  %sub19 = sub i64 %xor18, %23
  store i64 %sub19, i64* %y, align 8
  %24 = load i64, i64* %v, align 8
  %25 = load i64, i64* %c1, align 8
  %xor20 = xor i64 %24, %25
  %26 = load i64, i64* %c1, align 8
  %sub21 = sub i64 %xor20, %26
  store i64 %sub21, i64* %z, align 8
  %27 = load i64, i64* %x, align 8
  %28 = load i64, i64* %c2, align 8
  %and22 = and i64 %27, %28
  %29 = load i64, i64* %g, align 8
  %add23 = add i64 %29, %and22
  store i64 %add23, i64* %g, align 8
  %30 = load i64, i64* %y, align 8
  %31 = load i64, i64* %c2, align 8
  %and24 = and i64 %30, %31
  %32 = load i64, i64* %q, align 8
  %add25 = add i64 %32, %and24
  store i64 %add25, i64* %q, align 8
  %33 = load i64, i64* %z, align 8
  %34 = load i64, i64* %c2, align 8
  %and26 = and i64 %33, %34
  %35 = load i64, i64* %r, align 8
  %add27 = add i64 %35, %and26
  store i64 %add27, i64* %r, align 8
  %36 = load i64, i64* %c2, align 8
  %37 = load i64, i64* %c1, align 8
  %and28 = and i64 %37, %36
  store i64 %and28, i64* %c1, align 8
  %38 = load i64, i64* %zeta.addr, align 8
  %39 = load i64, i64* %c1, align 8
  %xor29 = xor i64 %38, %39
  %sub30 = sub i64 %xor29, 1
  store i64 %sub30, i64* %zeta.addr, align 8
  %40 = load i64, i64* %g, align 8
  %41 = load i64, i64* %c1, align 8
  %and31 = and i64 %40, %41
  %42 = load i64, i64* %f, align 8
  %add32 = add i64 %42, %and31
  store i64 %add32, i64* %f, align 8
  %43 = load i64, i64* %q, align 8
  %44 = load i64, i64* %c1, align 8
  %and33 = and i64 %43, %44
  %45 = load i64, i64* %u, align 8
  %add34 = add i64 %45, %and33
  store i64 %add34, i64* %u, align 8
  %46 = load i64, i64* %r, align 8
  %47 = load i64, i64* %c1, align 8
  %and35 = and i64 %46, %47
  %48 = load i64, i64* %v, align 8
  %add36 = add i64 %48, %and35
  store i64 %add36, i64* %v, align 8
  %49 = load i64, i64* %g, align 8
  %shr37 = lshr i64 %49, 1
  store i64 %shr37, i64* %g, align 8
  %50 = load i64, i64* %u, align 8
  %shl38 = shl i64 %50, 1
  store i64 %shl38, i64* %u, align 8
  %51 = load i64, i64* %v, align 8
  %shl39 = shl i64 %51, 1
  store i64 %shl39, i64* %v, align 8
  br label %do.body40

do.body40:                                        ; preds = %do.end15
  %52 = load i64, i64* %zeta.addr, align 8
  %cmp41 = icmp sge i64 %52, -591
  br i1 %cmp41, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body40
  %53 = load i64, i64* %zeta.addr, align 8
  %cmp43 = icmp sle i64 %53, 591
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body40
  %54 = phi i1 [ false, %do.body40 ], [ %cmp43, %land.rhs ]
  %land.ext = zext i1 %54 to i32
  br label %do.end45

do.end45:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %do.end45
  %55 = load i32, i32* %i, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !44

for.end:                                          ; preds = %for.cond
  %56 = load i64, i64* %u, align 8
  %57 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %u46 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %57, i32 0, i32 0
  store i64 %56, i64* %u46, align 8
  %58 = load i64, i64* %v, align 8
  %59 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %v47 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %59, i32 0, i32 1
  store i64 %58, i64* %v47, align 8
  %60 = load i64, i64* %q, align 8
  %61 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %q48 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %61, i32 0, i32 2
  store i64 %60, i64* %q48, align 8
  %62 = load i64, i64* %r, align 8
  %63 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %r49 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %63, i32 0, i32 3
  store i64 %62, i64* %r49, align 8
  %64 = load i64, i64* %zeta.addr, align 8
  ret i64 %64
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_modinv64_update_fg_62(%struct.secp256k1_modinv64_signed62* noundef %f, %struct.secp256k1_modinv64_signed62* noundef %g, %struct.secp256k1_modinv64_trans2x2* noundef %t) #0 {
entry:
  %f.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %g.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %t.addr = alloca %struct.secp256k1_modinv64_trans2x2*, align 8
  %M62 = alloca i64, align 8
  %f0 = alloca i64, align 8
  %f1 = alloca i64, align 8
  %f2 = alloca i64, align 8
  %f3 = alloca i64, align 8
  %f4 = alloca i64, align 8
  %g0 = alloca i64, align 8
  %g1 = alloca i64, align 8
  %g2 = alloca i64, align 8
  %g3 = alloca i64, align 8
  %g4 = alloca i64, align 8
  %u = alloca i64, align 8
  %v20 = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %cf = alloca i128, align 16
  %cg = alloca i128, align 16
  store %struct.secp256k1_modinv64_signed62* %f, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  store %struct.secp256k1_modinv64_signed62* %g, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  store %struct.secp256k1_modinv64_trans2x2* %t, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %f0, align 8
  %2 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %f1, align 8
  %4 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %f2, align 8
  %6 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %f3, align 8
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v7 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %v7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %f4, align 8
  %10 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v9 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %10, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %v9, i64 0, i64 0
  %11 = load i64, i64* %arrayidx10, align 8
  store i64 %11, i64* %g0, align 8
  %12 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v11 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %12, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [5 x i64], [5 x i64]* %v11, i64 0, i64 1
  %13 = load i64, i64* %arrayidx12, align 8
  store i64 %13, i64* %g1, align 8
  %14 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v13 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %14, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %v13, i64 0, i64 2
  %15 = load i64, i64* %arrayidx14, align 8
  store i64 %15, i64* %g2, align 8
  %16 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v15 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %16, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [5 x i64], [5 x i64]* %v15, i64 0, i64 3
  %17 = load i64, i64* %arrayidx16, align 8
  store i64 %17, i64* %g3, align 8
  %18 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v17 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %18, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [5 x i64], [5 x i64]* %v17, i64 0, i64 4
  %19 = load i64, i64* %arrayidx18, align 8
  store i64 %19, i64* %g4, align 8
  %20 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %u19 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %20, i32 0, i32 0
  %21 = load i64, i64* %u19, align 8
  store i64 %21, i64* %u, align 8
  %22 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %v21 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %22, i32 0, i32 1
  %23 = load i64, i64* %v21, align 8
  store i64 %23, i64* %v20, align 8
  %24 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %q22 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %24, i32 0, i32 2
  %25 = load i64, i64* %q22, align 8
  store i64 %25, i64* %q, align 8
  %26 = load %struct.secp256k1_modinv64_trans2x2*, %struct.secp256k1_modinv64_trans2x2** %t.addr, align 8
  %r23 = getelementptr inbounds %struct.secp256k1_modinv64_trans2x2, %struct.secp256k1_modinv64_trans2x2* %26, i32 0, i32 3
  %27 = load i64, i64* %r23, align 8
  store i64 %27, i64* %r, align 8
  %28 = load i64, i64* %u, align 8
  %29 = load i64, i64* %f0, align 8
  call void @secp256k1_i128_mul(i128* noundef %cf, i64 noundef %28, i64 noundef %29)
  %30 = load i64, i64* %v20, align 8
  %31 = load i64, i64* %g0, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %30, i64 noundef %31)
  %32 = load i64, i64* %q, align 8
  %33 = load i64, i64* %f0, align 8
  call void @secp256k1_i128_mul(i128* noundef %cg, i64 noundef %32, i64 noundef %33)
  %34 = load i64, i64* %r, align 8
  %35 = load i64, i64* %g0, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %34, i64 noundef %35)
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and = and i64 %call, 4611686018427387903
  %cmp = icmp eq i64 %and, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  br label %do.body24

do.body24:                                        ; preds = %do.end
  %call25 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and26 = and i64 %call25, 4611686018427387903
  %cmp27 = icmp eq i64 %and26, 0
  %conv28 = zext i1 %cmp27 to i32
  br label %do.end29

do.end29:                                         ; preds = %do.body24
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  %36 = load i64, i64* %u, align 8
  %37 = load i64, i64* %f1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %36, i64 noundef %37)
  %38 = load i64, i64* %v20, align 8
  %39 = load i64, i64* %g1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %38, i64 noundef %39)
  %40 = load i64, i64* %q, align 8
  %41 = load i64, i64* %f1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %40, i64 noundef %41)
  %42 = load i64, i64* %r, align 8
  %43 = load i64, i64* %g1, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %42, i64 noundef %43)
  %call30 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and31 = and i64 %call30, 4611686018427387903
  %44 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v32 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %44, i32 0, i32 0
  %arrayidx33 = getelementptr inbounds [5 x i64], [5 x i64]* %v32, i64 0, i64 0
  store i64 %and31, i64* %arrayidx33, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  %call34 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and35 = and i64 %call34, 4611686018427387903
  %45 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v36 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %45, i32 0, i32 0
  %arrayidx37 = getelementptr inbounds [5 x i64], [5 x i64]* %v36, i64 0, i64 0
  store i64 %and35, i64* %arrayidx37, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  %46 = load i64, i64* %u, align 8
  %47 = load i64, i64* %f2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %46, i64 noundef %47)
  %48 = load i64, i64* %v20, align 8
  %49 = load i64, i64* %g2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %48, i64 noundef %49)
  %50 = load i64, i64* %q, align 8
  %51 = load i64, i64* %f2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %50, i64 noundef %51)
  %52 = load i64, i64* %r, align 8
  %53 = load i64, i64* %g2, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %52, i64 noundef %53)
  %call38 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and39 = and i64 %call38, 4611686018427387903
  %54 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v40 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %54, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [5 x i64], [5 x i64]* %v40, i64 0, i64 1
  store i64 %and39, i64* %arrayidx41, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  %call42 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and43 = and i64 %call42, 4611686018427387903
  %55 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v44 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [5 x i64], [5 x i64]* %v44, i64 0, i64 1
  store i64 %and43, i64* %arrayidx45, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  %56 = load i64, i64* %u, align 8
  %57 = load i64, i64* %f3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %56, i64 noundef %57)
  %58 = load i64, i64* %v20, align 8
  %59 = load i64, i64* %g3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %58, i64 noundef %59)
  %60 = load i64, i64* %q, align 8
  %61 = load i64, i64* %f3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %60, i64 noundef %61)
  %62 = load i64, i64* %r, align 8
  %63 = load i64, i64* %g3, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %62, i64 noundef %63)
  %call46 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and47 = and i64 %call46, 4611686018427387903
  %64 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v48 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %64, i32 0, i32 0
  %arrayidx49 = getelementptr inbounds [5 x i64], [5 x i64]* %v48, i64 0, i64 2
  store i64 %and47, i64* %arrayidx49, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  %call50 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and51 = and i64 %call50, 4611686018427387903
  %65 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v52 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %65, i32 0, i32 0
  %arrayidx53 = getelementptr inbounds [5 x i64], [5 x i64]* %v52, i64 0, i64 2
  store i64 %and51, i64* %arrayidx53, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  %66 = load i64, i64* %u, align 8
  %67 = load i64, i64* %f4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %66, i64 noundef %67)
  %68 = load i64, i64* %v20, align 8
  %69 = load i64, i64* %g4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cf, i64 noundef %68, i64 noundef %69)
  %70 = load i64, i64* %q, align 8
  %71 = load i64, i64* %f4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %70, i64 noundef %71)
  %72 = load i64, i64* %r, align 8
  %73 = load i64, i64* %g4, align 8
  call void @secp256k1_i128_accum_mul(i128* noundef %cg, i64 noundef %72, i64 noundef %73)
  %call54 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %and55 = and i64 %call54, 4611686018427387903
  %74 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v56 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %74, i32 0, i32 0
  %arrayidx57 = getelementptr inbounds [5 x i64], [5 x i64]* %v56, i64 0, i64 3
  store i64 %and55, i64* %arrayidx57, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cf, i32 noundef 62)
  %call58 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %and59 = and i64 %call58, 4611686018427387903
  %75 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v60 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %75, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [5 x i64], [5 x i64]* %v60, i64 0, i64 3
  store i64 %and59, i64* %arrayidx61, align 8
  call void @secp256k1_i128_rshift(i128* noundef %cg, i32 noundef 62)
  %call62 = call i64 @secp256k1_i128_to_i64(i128* noundef %cf)
  %76 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %f.addr, align 8
  %v63 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %76, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [5 x i64], [5 x i64]* %v63, i64 0, i64 4
  store i64 %call62, i64* %arrayidx64, align 8
  %call65 = call i64 @secp256k1_i128_to_i64(i128* noundef %cg)
  %77 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %g.addr, align 8
  %v66 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %77, i32 0, i32 0
  %arrayidx67 = getelementptr inbounds [5 x i64], [5 x i64]* %v66, i64 0, i64 4
  store i64 %call65, i64* %arrayidx67, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_privkey_tweak_add(%struct.secp256k1_scalar* noundef %key, %struct.secp256k1_scalar* noundef %tweak) #0 {
entry:
  %key.addr = alloca %struct.secp256k1_scalar*, align 8
  %tweak.addr = alloca %struct.secp256k1_scalar*, align 8
  store %struct.secp256k1_scalar* %key, %struct.secp256k1_scalar** %key.addr, align 8
  store %struct.secp256k1_scalar* %tweak, %struct.secp256k1_scalar** %tweak.addr, align 8
  %0 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %key.addr, align 8
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %key.addr, align 8
  %2 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  %call = call i32 @secp256k1_scalar_add(%struct.secp256k1_scalar* noundef %0, %struct.secp256k1_scalar* noundef %1, %struct.secp256k1_scalar* noundef %2)
  %3 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %key.addr, align 8
  %call1 = call i32 @secp256k1_scalar_is_zero(%struct.secp256k1_scalar* noundef %3)
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_eckey_pubkey_tweak_add(%struct.secp256k1_ge* noundef %key, %struct.secp256k1_scalar* noundef %tweak) #0 {
entry:
  %retval = alloca i32, align 4
  %key.addr = alloca %struct.secp256k1_ge*, align 8
  %tweak.addr = alloca %struct.secp256k1_scalar*, align 8
  %pt = alloca %struct.secp256k1_gej, align 8
  %one = alloca %struct.secp256k1_scalar, align 8
  store %struct.secp256k1_ge* %key, %struct.secp256k1_ge** %key.addr, align 8
  store %struct.secp256k1_scalar* %tweak, %struct.secp256k1_scalar** %tweak.addr, align 8
  %0 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %key.addr, align 8
  call void @secp256k1_gej_set_ge(%struct.secp256k1_gej* noundef %pt, %struct.secp256k1_ge* noundef %0)
  call void @secp256k1_scalar_set_int(%struct.secp256k1_scalar* noundef %one, i32 noundef 1)
  %1 = load %struct.secp256k1_scalar*, %struct.secp256k1_scalar** %tweak.addr, align 8
  call void @secp256k1_ecmult(%struct.secp256k1_gej* noundef %pt, %struct.secp256k1_gej* noundef %pt, %struct.secp256k1_scalar* noundef %one, %struct.secp256k1_scalar* noundef %1)
  %call = call i32 @secp256k1_gej_is_infinity(%struct.secp256k1_gej* noundef %pt)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.secp256k1_ge*, %struct.secp256k1_ge** %key.addr, align 8
  call void @secp256k1_ge_set_gej(%struct.secp256k1_ge* noundef %2, %struct.secp256k1_gej* noundef %pt)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_gej_neg(%struct.secp256k1_gej* noundef %r, %struct.secp256k1_gej* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_gej*, align 8
  %a.addr = alloca %struct.secp256k1_gej*, align 8
  store %struct.secp256k1_gej* %r, %struct.secp256k1_gej** %r.addr, align 8
  store %struct.secp256k1_gej* %a, %struct.secp256k1_gej** %a.addr, align 8
  %0 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %infinity = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %0, i32 0, i32 3
  %1 = load i32, i32* %infinity, align 8
  %2 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %infinity1 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %2, i32 0, i32 3
  store i32 %1, i32* %infinity1, align 8
  %3 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %x = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %3, i32 0, i32 0
  %4 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %x2 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %4, i32 0, i32 0
  %5 = bitcast %struct.secp256k1_fe* %x to i8*
  %6 = bitcast %struct.secp256k1_fe* %x2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 40, i1 false)
  %7 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %7, i32 0, i32 1
  %8 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %y3 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %8, i32 0, i32 1
  %9 = bitcast %struct.secp256k1_fe* %y to i8*
  %10 = bitcast %struct.secp256k1_fe* %y3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 40, i1 false)
  %11 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %z = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %11, i32 0, i32 2
  %12 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %a.addr, align 8
  %z4 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %12, i32 0, i32 2
  %13 = bitcast %struct.secp256k1_fe* %z to i8*
  %14 = bitcast %struct.secp256k1_fe* %z4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 40, i1 false)
  %15 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y5 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %15, i32 0, i32 1
  call void @secp256k1_fe_normalize_weak(%struct.secp256k1_fe* noundef %y5)
  %16 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y6 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %16, i32 0, i32 1
  %17 = load %struct.secp256k1_gej*, %struct.secp256k1_gej** %r.addr, align 8
  %y7 = getelementptr inbounds %struct.secp256k1_gej, %struct.secp256k1_gej* %17, i32 0, i32 1
  call void @secp256k1_fe_negate(%struct.secp256k1_fe* noundef %y6, %struct.secp256k1_fe* noundef %y7, i32 noundef 1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_cmov(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %a, i32 noundef %flag) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %flag.addr = alloca i32, align 4
  %mask0 = alloca i64, align 8
  %mask1 = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  %0 = load i32, i32* %flag.addr, align 4
  %conv = sext i32 %0 to i64
  %add = add i64 %conv, -1
  store i64 %add, i64* %mask0, align 8
  %1 = load i64, i64* %mask0, align 8
  %neg = xor i64 %1, -1
  store i64 %neg, i64* %mask1, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i64, i64* %mask0, align 8
  %and = and i64 %3, %4
  %5 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %5, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 0
  %6 = load i64, i64* %arrayidx2, align 8
  %7 = load i64, i64* %mask1, align 8
  %and3 = and i64 %6, %7
  %or = or i64 %and, %and3
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n4 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [5 x i64], [5 x i64]* %n4, i64 0, i64 0
  store i64 %or, i64* %arrayidx5, align 8
  %9 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n6 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %9, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [5 x i64], [5 x i64]* %n6, i64 0, i64 1
  %10 = load i64, i64* %arrayidx7, align 8
  %11 = load i64, i64* %mask0, align 8
  %and8 = and i64 %10, %11
  %12 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n9 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %12, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %n9, i64 0, i64 1
  %13 = load i64, i64* %arrayidx10, align 8
  %14 = load i64, i64* %mask1, align 8
  %and11 = and i64 %13, %14
  %or12 = or i64 %and8, %and11
  %15 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n13 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %15, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %n13, i64 0, i64 1
  store i64 %or12, i64* %arrayidx14, align 8
  %16 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n15 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %16, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [5 x i64], [5 x i64]* %n15, i64 0, i64 2
  %17 = load i64, i64* %arrayidx16, align 8
  %18 = load i64, i64* %mask0, align 8
  %and17 = and i64 %17, %18
  %19 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n18 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %19, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [5 x i64], [5 x i64]* %n18, i64 0, i64 2
  %20 = load i64, i64* %arrayidx19, align 8
  %21 = load i64, i64* %mask1, align 8
  %and20 = and i64 %20, %21
  %or21 = or i64 %and17, %and20
  %22 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n22 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %22, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %n22, i64 0, i64 2
  store i64 %or21, i64* %arrayidx23, align 8
  %23 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n24 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %23, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [5 x i64], [5 x i64]* %n24, i64 0, i64 3
  %24 = load i64, i64* %arrayidx25, align 8
  %25 = load i64, i64* %mask0, align 8
  %and26 = and i64 %24, %25
  %26 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n27 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %26, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [5 x i64], [5 x i64]* %n27, i64 0, i64 3
  %27 = load i64, i64* %arrayidx28, align 8
  %28 = load i64, i64* %mask1, align 8
  %and29 = and i64 %27, %28
  %or30 = or i64 %and26, %and29
  %29 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n31 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %29, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [5 x i64], [5 x i64]* %n31, i64 0, i64 3
  store i64 %or30, i64* %arrayidx32, align 8
  %30 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n33 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %30, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [5 x i64], [5 x i64]* %n33, i64 0, i64 4
  %31 = load i64, i64* %arrayidx34, align 8
  %32 = load i64, i64* %mask0, align 8
  %and35 = and i64 %31, %32
  %33 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n36 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %33, i32 0, i32 0
  %arrayidx37 = getelementptr inbounds [5 x i64], [5 x i64]* %n36, i64 0, i64 4
  %34 = load i64, i64* %arrayidx37, align 8
  %35 = load i64, i64* %mask1, align 8
  %and38 = and i64 %34, %35
  %or39 = or i64 %and35, %and38
  %36 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n40 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %36, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [5 x i64], [5 x i64]* %n40, i64 0, i64 4
  store i64 %or39, i64* %arrayidx41, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_inv(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_fe* noundef %x) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %x.addr = alloca %struct.secp256k1_fe*, align 8
  %tmp = alloca %struct.secp256k1_fe, align 8
  %s = alloca %struct.secp256k1_modinv64_signed62, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_fe* %x, %struct.secp256k1_fe** %x.addr, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %x.addr, align 8
  %1 = bitcast %struct.secp256k1_fe* %tmp to i8*
  %2 = bitcast %struct.secp256k1_fe* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 40, i1 false)
  call void @secp256k1_fe_normalize(%struct.secp256k1_fe* noundef %tmp)
  call void @secp256k1_fe_to_signed62(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_fe* noundef %tmp)
  call void @secp256k1_modinv64(%struct.secp256k1_modinv64_signed62* noundef %s, %struct.secp256k1_modinv64_modinfo* noundef @secp256k1_const_modinfo_fe)
  %3 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  call void @secp256k1_fe_from_signed62(%struct.secp256k1_fe* noundef %3, %struct.secp256k1_modinv64_signed62* noundef %s)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_to_signed62(%struct.secp256k1_modinv64_signed62* noundef %r, %struct.secp256k1_fe* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %a.addr = alloca %struct.secp256k1_fe*, align 8
  %M62 = alloca i64, align 8
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  %a4 = alloca i64, align 8
  store %struct.secp256k1_modinv64_signed62* %r, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  store %struct.secp256k1_fe* %a, %struct.secp256k1_fe** %a.addr, align 8
  store i64 4611686018427387903, i64* %M62, align 8
  %0 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n1 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %n1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n3 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %n3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n5 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %n5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %a.addr, align 8
  %n7 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %n7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %a4, align 8
  %10 = load i64, i64* %a0, align 8
  %11 = load i64, i64* %a1, align 8
  %shl = shl i64 %11, 52
  %or = or i64 %10, %shl
  %and = and i64 %or, 4611686018427387903
  %12 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %12, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  store i64 %and, i64* %arrayidx9, align 8
  %13 = load i64, i64* %a1, align 8
  %shr = lshr i64 %13, 10
  %14 = load i64, i64* %a2, align 8
  %shl10 = shl i64 %14, 42
  %or11 = or i64 %shr, %shl10
  %and12 = and i64 %or11, 4611686018427387903
  %15 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v13 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %15, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %v13, i64 0, i64 1
  store i64 %and12, i64* %arrayidx14, align 8
  %16 = load i64, i64* %a2, align 8
  %shr15 = lshr i64 %16, 20
  %17 = load i64, i64* %a3, align 8
  %shl16 = shl i64 %17, 32
  %or17 = or i64 %shr15, %shl16
  %and18 = and i64 %or17, 4611686018427387903
  %18 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v19 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %18, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [5 x i64], [5 x i64]* %v19, i64 0, i64 2
  store i64 %and18, i64* %arrayidx20, align 8
  %19 = load i64, i64* %a3, align 8
  %shr21 = lshr i64 %19, 30
  %20 = load i64, i64* %a4, align 8
  %shl22 = shl i64 %20, 22
  %or23 = or i64 %shr21, %shl22
  %and24 = and i64 %or23, 4611686018427387903
  %21 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v25 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %21, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [5 x i64], [5 x i64]* %v25, i64 0, i64 3
  store i64 %and24, i64* %arrayidx26, align 8
  %22 = load i64, i64* %a4, align 8
  %shr27 = lshr i64 %22, 40
  %23 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %r.addr, align 8
  %v28 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %23, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [5 x i64], [5 x i64]* %v28, i64 0, i64 4
  store i64 %shr27, i64* %arrayidx29, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_fe_from_signed62(%struct.secp256k1_fe* noundef %r, %struct.secp256k1_modinv64_signed62* noundef %a) #0 {
entry:
  %r.addr = alloca %struct.secp256k1_fe*, align 8
  %a.addr = alloca %struct.secp256k1_modinv64_signed62*, align 8
  %M52 = alloca i64, align 8
  %a0 = alloca i64, align 8
  %a1 = alloca i64, align 8
  %a2 = alloca i64, align 8
  %a3 = alloca i64, align 8
  %a4 = alloca i64, align 8
  store %struct.secp256k1_fe* %r, %struct.secp256k1_fe** %r.addr, align 8
  store %struct.secp256k1_modinv64_signed62* %a, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  store i64 4503599627370495, i64* %M52, align 8
  %0 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %v, i64 0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %a0, align 8
  %2 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v1 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %2, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i64], [5 x i64]* %v1, i64 0, i64 1
  %3 = load i64, i64* %arrayidx2, align 8
  store i64 %3, i64* %a1, align 8
  %4 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v3 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %4, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i64], [5 x i64]* %v3, i64 0, i64 2
  %5 = load i64, i64* %arrayidx4, align 8
  store i64 %5, i64* %a2, align 8
  %6 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v5 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %6, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i64], [5 x i64]* %v5, i64 0, i64 3
  %7 = load i64, i64* %arrayidx6, align 8
  store i64 %7, i64* %a3, align 8
  %8 = load %struct.secp256k1_modinv64_signed62*, %struct.secp256k1_modinv64_signed62** %a.addr, align 8
  %v7 = getelementptr inbounds %struct.secp256k1_modinv64_signed62, %struct.secp256k1_modinv64_signed62* %8, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %v7, i64 0, i64 4
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %a4, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %10 = load i64, i64* %a0, align 8
  %shr = lshr i64 %10, 62
  %cmp = icmp eq i64 %shr, 0
  %conv = zext i1 %cmp to i32
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body9

do.body9:                                         ; preds = %do.end
  %11 = load i64, i64* %a1, align 8
  %shr10 = lshr i64 %11, 62
  %cmp11 = icmp eq i64 %shr10, 0
  %conv12 = zext i1 %cmp11 to i32
  br label %do.end13

do.end13:                                         ; preds = %do.body9
  br label %do.body14

do.body14:                                        ; preds = %do.end13
  %12 = load i64, i64* %a2, align 8
  %shr15 = lshr i64 %12, 62
  %cmp16 = icmp eq i64 %shr15, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %do.end18

do.end18:                                         ; preds = %do.body14
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  %13 = load i64, i64* %a3, align 8
  %shr20 = lshr i64 %13, 62
  %cmp21 = icmp eq i64 %shr20, 0
  %conv22 = zext i1 %cmp21 to i32
  br label %do.end23

do.end23:                                         ; preds = %do.body19
  br label %do.body24

do.body24:                                        ; preds = %do.end23
  %14 = load i64, i64* %a4, align 8
  %shr25 = lshr i64 %14, 8
  %cmp26 = icmp eq i64 %shr25, 0
  %conv27 = zext i1 %cmp26 to i32
  br label %do.end28

do.end28:                                         ; preds = %do.body24
  %15 = load i64, i64* %a0, align 8
  %and = and i64 %15, 4503599627370495
  %16 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %16, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [5 x i64], [5 x i64]* %n, i64 0, i64 0
  store i64 %and, i64* %arrayidx29, align 8
  %17 = load i64, i64* %a0, align 8
  %shr30 = lshr i64 %17, 52
  %18 = load i64, i64* %a1, align 8
  %shl = shl i64 %18, 10
  %or = or i64 %shr30, %shl
  %and31 = and i64 %or, 4503599627370495
  %19 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n32 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %19, i32 0, i32 0
  %arrayidx33 = getelementptr inbounds [5 x i64], [5 x i64]* %n32, i64 0, i64 1
  store i64 %and31, i64* %arrayidx33, align 8
  %20 = load i64, i64* %a1, align 8
  %shr34 = lshr i64 %20, 42
  %21 = load i64, i64* %a2, align 8
  %shl35 = shl i64 %21, 20
  %or36 = or i64 %shr34, %shl35
  %and37 = and i64 %or36, 4503599627370495
  %22 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n38 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %22, i32 0, i32 0
  %arrayidx39 = getelementptr inbounds [5 x i64], [5 x i64]* %n38, i64 0, i64 2
  store i64 %and37, i64* %arrayidx39, align 8
  %23 = load i64, i64* %a2, align 8
  %shr40 = lshr i64 %23, 32
  %24 = load i64, i64* %a3, align 8
  %shl41 = shl i64 %24, 30
  %or42 = or i64 %shr40, %shl41
  %and43 = and i64 %or42, 4503599627370495
  %25 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n44 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %25, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [5 x i64], [5 x i64]* %n44, i64 0, i64 3
  store i64 %and43, i64* %arrayidx45, align 8
  %26 = load i64, i64* %a3, align 8
  %shr46 = lshr i64 %26, 22
  %27 = load i64, i64* %a4, align 8
  %shl47 = shl i64 %27, 40
  %or48 = or i64 %shr46, %shl47
  %28 = load %struct.secp256k1_fe*, %struct.secp256k1_fe** %r.addr, align 8
  %n49 = getelementptr inbounds %struct.secp256k1_fe, %struct.secp256k1_fe* %28, i32 0, i32 0
  %arrayidx50 = getelementptr inbounds [5 x i64], [5 x i64]* %n49, i64 0, i64 4
  store i64 %or48, i64* %arrayidx50, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_sha256_transform(i32* noundef %s, i8* noundef %buf) #0 {
entry:
  %s.addr = alloca i32*, align 8
  %buf.addr = alloca i8*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  %w0 = alloca i32, align 4
  %w1 = alloca i32, align 4
  %w2 = alloca i32, align 4
  %w3 = alloca i32, align 4
  %w4 = alloca i32, align 4
  %w5 = alloca i32, align 4
  %w6 = alloca i32, align 4
  %w7 = alloca i32, align 4
  %w8 = alloca i32, align 4
  %w9 = alloca i32, align 4
  %w10 = alloca i32, align 4
  %w11 = alloca i32, align 4
  %w12 = alloca i32, align 4
  %w13 = alloca i32, align 4
  %w14 = alloca i32, align 4
  %w15 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t140 = alloca i32, align 4
  %t261 = alloca i32, align 4
  %t182 = alloca i32, align 4
  %t2103 = alloca i32, align 4
  %t1124 = alloca i32, align 4
  %t2145 = alloca i32, align 4
  %t1166 = alloca i32, align 4
  %t2187 = alloca i32, align 4
  %t1208 = alloca i32, align 4
  %t2229 = alloca i32, align 4
  %t1250 = alloca i32, align 4
  %t2271 = alloca i32, align 4
  %t1292 = alloca i32, align 4
  %t2313 = alloca i32, align 4
  %t1334 = alloca i32, align 4
  %t2355 = alloca i32, align 4
  %t1376 = alloca i32, align 4
  %t2397 = alloca i32, align 4
  %t1418 = alloca i32, align 4
  %t2439 = alloca i32, align 4
  %t1460 = alloca i32, align 4
  %t2481 = alloca i32, align 4
  %t1502 = alloca i32, align 4
  %t2523 = alloca i32, align 4
  %t1544 = alloca i32, align 4
  %t2565 = alloca i32, align 4
  %t1586 = alloca i32, align 4
  %t2607 = alloca i32, align 4
  %t1628 = alloca i32, align 4
  %t2649 = alloca i32, align 4
  %t1670 = alloca i32, align 4
  %t2710 = alloca i32, align 4
  %t1731 = alloca i32, align 4
  %t2771 = alloca i32, align 4
  %t1792 = alloca i32, align 4
  %t2832 = alloca i32, align 4
  %t1853 = alloca i32, align 4
  %t2893 = alloca i32, align 4
  %t1914 = alloca i32, align 4
  %t2954 = alloca i32, align 4
  %t1975 = alloca i32, align 4
  %t21015 = alloca i32, align 4
  %t11036 = alloca i32, align 4
  %t21076 = alloca i32, align 4
  %t11097 = alloca i32, align 4
  %t21137 = alloca i32, align 4
  %t11158 = alloca i32, align 4
  %t21198 = alloca i32, align 4
  %t11219 = alloca i32, align 4
  %t21259 = alloca i32, align 4
  %t11280 = alloca i32, align 4
  %t21320 = alloca i32, align 4
  %t11341 = alloca i32, align 4
  %t21381 = alloca i32, align 4
  %t11402 = alloca i32, align 4
  %t21442 = alloca i32, align 4
  %t11463 = alloca i32, align 4
  %t21503 = alloca i32, align 4
  %t11524 = alloca i32, align 4
  %t21564 = alloca i32, align 4
  %t11585 = alloca i32, align 4
  %t21625 = alloca i32, align 4
  %t11646 = alloca i32, align 4
  %t21686 = alloca i32, align 4
  %t11707 = alloca i32, align 4
  %t21747 = alloca i32, align 4
  %t11768 = alloca i32, align 4
  %t21808 = alloca i32, align 4
  %t11829 = alloca i32, align 4
  %t21869 = alloca i32, align 4
  %t11890 = alloca i32, align 4
  %t21930 = alloca i32, align 4
  %t11951 = alloca i32, align 4
  %t21991 = alloca i32, align 4
  %t12012 = alloca i32, align 4
  %t22052 = alloca i32, align 4
  %t12073 = alloca i32, align 4
  %t22113 = alloca i32, align 4
  %t12134 = alloca i32, align 4
  %t22174 = alloca i32, align 4
  %t12195 = alloca i32, align 4
  %t22235 = alloca i32, align 4
  %t12256 = alloca i32, align 4
  %t22296 = alloca i32, align 4
  %t12317 = alloca i32, align 4
  %t22357 = alloca i32, align 4
  %t12378 = alloca i32, align 4
  %t22418 = alloca i32, align 4
  %t12439 = alloca i32, align 4
  %t22479 = alloca i32, align 4
  %t12500 = alloca i32, align 4
  %t22540 = alloca i32, align 4
  %t12561 = alloca i32, align 4
  %t22601 = alloca i32, align 4
  %t12622 = alloca i32, align 4
  %t22662 = alloca i32, align 4
  %t12683 = alloca i32, align 4
  %t22723 = alloca i32, align 4
  %t12744 = alloca i32, align 4
  %t22784 = alloca i32, align 4
  %t12805 = alloca i32, align 4
  %t22845 = alloca i32, align 4
  %t12866 = alloca i32, align 4
  %t22906 = alloca i32, align 4
  %t12927 = alloca i32, align 4
  %t22967 = alloca i32, align 4
  %t12988 = alloca i32, align 4
  %t23028 = alloca i32, align 4
  %t13049 = alloca i32, align 4
  %t23089 = alloca i32, align 4
  %t13110 = alloca i32, align 4
  %t23150 = alloca i32, align 4
  %t13171 = alloca i32, align 4
  %t23211 = alloca i32, align 4
  %t13232 = alloca i32, align 4
  %t23272 = alloca i32, align 4
  %t13293 = alloca i32, align 4
  %t23333 = alloca i32, align 4
  %t13354 = alloca i32, align 4
  %t23394 = alloca i32, align 4
  %t13415 = alloca i32, align 4
  %t23455 = alloca i32, align 4
  %t13476 = alloca i32, align 4
  %t23516 = alloca i32, align 4
  %t13537 = alloca i32, align 4
  %t23577 = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load i32*, i32** %s.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %a, align 4
  %2 = load i32*, i32** %s.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i64 1
  %3 = load i32, i32* %arrayidx1, align 4
  store i32 %3, i32* %b, align 4
  %4 = load i32*, i32** %s.addr, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i64 2
  %5 = load i32, i32* %arrayidx2, align 4
  store i32 %5, i32* %c, align 4
  %6 = load i32*, i32** %s.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 3
  %7 = load i32, i32* %arrayidx3, align 4
  store i32 %7, i32* %d, align 4
  %8 = load i32*, i32** %s.addr, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 4
  %9 = load i32, i32* %arrayidx4, align 4
  store i32 %9, i32* %e, align 4
  %10 = load i32*, i32** %s.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 5
  %11 = load i32, i32* %arrayidx5, align 4
  store i32 %11, i32* %f, align 4
  %12 = load i32*, i32** %s.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 6
  %13 = load i32, i32* %arrayidx6, align 4
  store i32 %13, i32* %g, align 4
  %14 = load i32*, i32** %s.addr, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i64 7
  %15 = load i32, i32* %arrayidx7, align 4
  store i32 %15, i32* %h, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %16 = load i32, i32* %h, align 4
  %17 = load i32, i32* %e, align 4
  %shr = lshr i32 %17, 6
  %18 = load i32, i32* %e, align 4
  %shl = shl i32 %18, 26
  %or = or i32 %shr, %shl
  %19 = load i32, i32* %e, align 4
  %shr8 = lshr i32 %19, 11
  %20 = load i32, i32* %e, align 4
  %shl9 = shl i32 %20, 21
  %or10 = or i32 %shr8, %shl9
  %xor = xor i32 %or, %or10
  %21 = load i32, i32* %e, align 4
  %shr11 = lshr i32 %21, 25
  %22 = load i32, i32* %e, align 4
  %shl12 = shl i32 %22, 7
  %or13 = or i32 %shr11, %shl12
  %xor14 = xor i32 %xor, %or13
  %add = add i32 %16, %xor14
  %23 = load i32, i32* %g, align 4
  %24 = load i32, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %26 = load i32, i32* %g, align 4
  %xor15 = xor i32 %25, %26
  %and = and i32 %24, %xor15
  %xor16 = xor i32 %23, %and
  %add17 = add i32 %add, %xor16
  %add18 = add i32 %add17, 1116352408
  %27 = load i8*, i8** %buf.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %27, i64 0
  %call = call i32 @secp256k1_read_be32(i8* noundef %arrayidx19)
  store i32 %call, i32* %w0, align 4
  %add20 = add i32 %add18, %call
  store i32 %add20, i32* %t1, align 4
  %28 = load i32, i32* %a, align 4
  %shr21 = lshr i32 %28, 2
  %29 = load i32, i32* %a, align 4
  %shl22 = shl i32 %29, 30
  %or23 = or i32 %shr21, %shl22
  %30 = load i32, i32* %a, align 4
  %shr24 = lshr i32 %30, 13
  %31 = load i32, i32* %a, align 4
  %shl25 = shl i32 %31, 19
  %or26 = or i32 %shr24, %shl25
  %xor27 = xor i32 %or23, %or26
  %32 = load i32, i32* %a, align 4
  %shr28 = lshr i32 %32, 22
  %33 = load i32, i32* %a, align 4
  %shl29 = shl i32 %33, 10
  %or30 = or i32 %shr28, %shl29
  %xor31 = xor i32 %xor27, %or30
  %34 = load i32, i32* %a, align 4
  %35 = load i32, i32* %b, align 4
  %and32 = and i32 %34, %35
  %36 = load i32, i32* %c, align 4
  %37 = load i32, i32* %a, align 4
  %38 = load i32, i32* %b, align 4
  %or33 = or i32 %37, %38
  %and34 = and i32 %36, %or33
  %or35 = or i32 %and32, %and34
  %add36 = add i32 %xor31, %or35
  store i32 %add36, i32* %t2, align 4
  %39 = load i32, i32* %t1, align 4
  %40 = load i32, i32* %d, align 4
  %add37 = add i32 %40, %39
  store i32 %add37, i32* %d, align 4
  %41 = load i32, i32* %t1, align 4
  %42 = load i32, i32* %t2, align 4
  %add38 = add i32 %41, %42
  store i32 %add38, i32* %h, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body39

do.body39:                                        ; preds = %do.end
  %43 = load i32, i32* %g, align 4
  %44 = load i32, i32* %d, align 4
  %shr41 = lshr i32 %44, 6
  %45 = load i32, i32* %d, align 4
  %shl42 = shl i32 %45, 26
  %or43 = or i32 %shr41, %shl42
  %46 = load i32, i32* %d, align 4
  %shr44 = lshr i32 %46, 11
  %47 = load i32, i32* %d, align 4
  %shl45 = shl i32 %47, 21
  %or46 = or i32 %shr44, %shl45
  %xor47 = xor i32 %or43, %or46
  %48 = load i32, i32* %d, align 4
  %shr48 = lshr i32 %48, 25
  %49 = load i32, i32* %d, align 4
  %shl49 = shl i32 %49, 7
  %or50 = or i32 %shr48, %shl49
  %xor51 = xor i32 %xor47, %or50
  %add52 = add i32 %43, %xor51
  %50 = load i32, i32* %f, align 4
  %51 = load i32, i32* %d, align 4
  %52 = load i32, i32* %e, align 4
  %53 = load i32, i32* %f, align 4
  %xor53 = xor i32 %52, %53
  %and54 = and i32 %51, %xor53
  %xor55 = xor i32 %50, %and54
  %add56 = add i32 %add52, %xor55
  %add57 = add i32 %add56, 1899447441
  %54 = load i8*, i8** %buf.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %54, i64 4
  %call59 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx58)
  store i32 %call59, i32* %w1, align 4
  %add60 = add i32 %add57, %call59
  store i32 %add60, i32* %t140, align 4
  %55 = load i32, i32* %h, align 4
  %shr62 = lshr i32 %55, 2
  %56 = load i32, i32* %h, align 4
  %shl63 = shl i32 %56, 30
  %or64 = or i32 %shr62, %shl63
  %57 = load i32, i32* %h, align 4
  %shr65 = lshr i32 %57, 13
  %58 = load i32, i32* %h, align 4
  %shl66 = shl i32 %58, 19
  %or67 = or i32 %shr65, %shl66
  %xor68 = xor i32 %or64, %or67
  %59 = load i32, i32* %h, align 4
  %shr69 = lshr i32 %59, 22
  %60 = load i32, i32* %h, align 4
  %shl70 = shl i32 %60, 10
  %or71 = or i32 %shr69, %shl70
  %xor72 = xor i32 %xor68, %or71
  %61 = load i32, i32* %h, align 4
  %62 = load i32, i32* %a, align 4
  %and73 = and i32 %61, %62
  %63 = load i32, i32* %b, align 4
  %64 = load i32, i32* %h, align 4
  %65 = load i32, i32* %a, align 4
  %or74 = or i32 %64, %65
  %and75 = and i32 %63, %or74
  %or76 = or i32 %and73, %and75
  %add77 = add i32 %xor72, %or76
  store i32 %add77, i32* %t261, align 4
  %66 = load i32, i32* %t140, align 4
  %67 = load i32, i32* %c, align 4
  %add78 = add i32 %67, %66
  store i32 %add78, i32* %c, align 4
  %68 = load i32, i32* %t140, align 4
  %69 = load i32, i32* %t261, align 4
  %add79 = add i32 %68, %69
  store i32 %add79, i32* %g, align 4
  br label %do.end80

do.end80:                                         ; preds = %do.body39
  br label %do.body81

do.body81:                                        ; preds = %do.end80
  %70 = load i32, i32* %f, align 4
  %71 = load i32, i32* %c, align 4
  %shr83 = lshr i32 %71, 6
  %72 = load i32, i32* %c, align 4
  %shl84 = shl i32 %72, 26
  %or85 = or i32 %shr83, %shl84
  %73 = load i32, i32* %c, align 4
  %shr86 = lshr i32 %73, 11
  %74 = load i32, i32* %c, align 4
  %shl87 = shl i32 %74, 21
  %or88 = or i32 %shr86, %shl87
  %xor89 = xor i32 %or85, %or88
  %75 = load i32, i32* %c, align 4
  %shr90 = lshr i32 %75, 25
  %76 = load i32, i32* %c, align 4
  %shl91 = shl i32 %76, 7
  %or92 = or i32 %shr90, %shl91
  %xor93 = xor i32 %xor89, %or92
  %add94 = add i32 %70, %xor93
  %77 = load i32, i32* %e, align 4
  %78 = load i32, i32* %c, align 4
  %79 = load i32, i32* %d, align 4
  %80 = load i32, i32* %e, align 4
  %xor95 = xor i32 %79, %80
  %and96 = and i32 %78, %xor95
  %xor97 = xor i32 %77, %and96
  %add98 = add i32 %add94, %xor97
  %add99 = add i32 %add98, -1245643825
  %81 = load i8*, i8** %buf.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %81, i64 8
  %call101 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx100)
  store i32 %call101, i32* %w2, align 4
  %add102 = add i32 %add99, %call101
  store i32 %add102, i32* %t182, align 4
  %82 = load i32, i32* %g, align 4
  %shr104 = lshr i32 %82, 2
  %83 = load i32, i32* %g, align 4
  %shl105 = shl i32 %83, 30
  %or106 = or i32 %shr104, %shl105
  %84 = load i32, i32* %g, align 4
  %shr107 = lshr i32 %84, 13
  %85 = load i32, i32* %g, align 4
  %shl108 = shl i32 %85, 19
  %or109 = or i32 %shr107, %shl108
  %xor110 = xor i32 %or106, %or109
  %86 = load i32, i32* %g, align 4
  %shr111 = lshr i32 %86, 22
  %87 = load i32, i32* %g, align 4
  %shl112 = shl i32 %87, 10
  %or113 = or i32 %shr111, %shl112
  %xor114 = xor i32 %xor110, %or113
  %88 = load i32, i32* %g, align 4
  %89 = load i32, i32* %h, align 4
  %and115 = and i32 %88, %89
  %90 = load i32, i32* %a, align 4
  %91 = load i32, i32* %g, align 4
  %92 = load i32, i32* %h, align 4
  %or116 = or i32 %91, %92
  %and117 = and i32 %90, %or116
  %or118 = or i32 %and115, %and117
  %add119 = add i32 %xor114, %or118
  store i32 %add119, i32* %t2103, align 4
  %93 = load i32, i32* %t182, align 4
  %94 = load i32, i32* %b, align 4
  %add120 = add i32 %94, %93
  store i32 %add120, i32* %b, align 4
  %95 = load i32, i32* %t182, align 4
  %96 = load i32, i32* %t2103, align 4
  %add121 = add i32 %95, %96
  store i32 %add121, i32* %f, align 4
  br label %do.end122

do.end122:                                        ; preds = %do.body81
  br label %do.body123

do.body123:                                       ; preds = %do.end122
  %97 = load i32, i32* %e, align 4
  %98 = load i32, i32* %b, align 4
  %shr125 = lshr i32 %98, 6
  %99 = load i32, i32* %b, align 4
  %shl126 = shl i32 %99, 26
  %or127 = or i32 %shr125, %shl126
  %100 = load i32, i32* %b, align 4
  %shr128 = lshr i32 %100, 11
  %101 = load i32, i32* %b, align 4
  %shl129 = shl i32 %101, 21
  %or130 = or i32 %shr128, %shl129
  %xor131 = xor i32 %or127, %or130
  %102 = load i32, i32* %b, align 4
  %shr132 = lshr i32 %102, 25
  %103 = load i32, i32* %b, align 4
  %shl133 = shl i32 %103, 7
  %or134 = or i32 %shr132, %shl133
  %xor135 = xor i32 %xor131, %or134
  %add136 = add i32 %97, %xor135
  %104 = load i32, i32* %d, align 4
  %105 = load i32, i32* %b, align 4
  %106 = load i32, i32* %c, align 4
  %107 = load i32, i32* %d, align 4
  %xor137 = xor i32 %106, %107
  %and138 = and i32 %105, %xor137
  %xor139 = xor i32 %104, %and138
  %add140 = add i32 %add136, %xor139
  %add141 = add i32 %add140, -373957723
  %108 = load i8*, i8** %buf.addr, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %108, i64 12
  %call143 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx142)
  store i32 %call143, i32* %w3, align 4
  %add144 = add i32 %add141, %call143
  store i32 %add144, i32* %t1124, align 4
  %109 = load i32, i32* %f, align 4
  %shr146 = lshr i32 %109, 2
  %110 = load i32, i32* %f, align 4
  %shl147 = shl i32 %110, 30
  %or148 = or i32 %shr146, %shl147
  %111 = load i32, i32* %f, align 4
  %shr149 = lshr i32 %111, 13
  %112 = load i32, i32* %f, align 4
  %shl150 = shl i32 %112, 19
  %or151 = or i32 %shr149, %shl150
  %xor152 = xor i32 %or148, %or151
  %113 = load i32, i32* %f, align 4
  %shr153 = lshr i32 %113, 22
  %114 = load i32, i32* %f, align 4
  %shl154 = shl i32 %114, 10
  %or155 = or i32 %shr153, %shl154
  %xor156 = xor i32 %xor152, %or155
  %115 = load i32, i32* %f, align 4
  %116 = load i32, i32* %g, align 4
  %and157 = and i32 %115, %116
  %117 = load i32, i32* %h, align 4
  %118 = load i32, i32* %f, align 4
  %119 = load i32, i32* %g, align 4
  %or158 = or i32 %118, %119
  %and159 = and i32 %117, %or158
  %or160 = or i32 %and157, %and159
  %add161 = add i32 %xor156, %or160
  store i32 %add161, i32* %t2145, align 4
  %120 = load i32, i32* %t1124, align 4
  %121 = load i32, i32* %a, align 4
  %add162 = add i32 %121, %120
  store i32 %add162, i32* %a, align 4
  %122 = load i32, i32* %t1124, align 4
  %123 = load i32, i32* %t2145, align 4
  %add163 = add i32 %122, %123
  store i32 %add163, i32* %e, align 4
  br label %do.end164

do.end164:                                        ; preds = %do.body123
  br label %do.body165

do.body165:                                       ; preds = %do.end164
  %124 = load i32, i32* %d, align 4
  %125 = load i32, i32* %a, align 4
  %shr167 = lshr i32 %125, 6
  %126 = load i32, i32* %a, align 4
  %shl168 = shl i32 %126, 26
  %or169 = or i32 %shr167, %shl168
  %127 = load i32, i32* %a, align 4
  %shr170 = lshr i32 %127, 11
  %128 = load i32, i32* %a, align 4
  %shl171 = shl i32 %128, 21
  %or172 = or i32 %shr170, %shl171
  %xor173 = xor i32 %or169, %or172
  %129 = load i32, i32* %a, align 4
  %shr174 = lshr i32 %129, 25
  %130 = load i32, i32* %a, align 4
  %shl175 = shl i32 %130, 7
  %or176 = or i32 %shr174, %shl175
  %xor177 = xor i32 %xor173, %or176
  %add178 = add i32 %124, %xor177
  %131 = load i32, i32* %c, align 4
  %132 = load i32, i32* %a, align 4
  %133 = load i32, i32* %b, align 4
  %134 = load i32, i32* %c, align 4
  %xor179 = xor i32 %133, %134
  %and180 = and i32 %132, %xor179
  %xor181 = xor i32 %131, %and180
  %add182 = add i32 %add178, %xor181
  %add183 = add i32 %add182, 961987163
  %135 = load i8*, i8** %buf.addr, align 8
  %arrayidx184 = getelementptr inbounds i8, i8* %135, i64 16
  %call185 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx184)
  store i32 %call185, i32* %w4, align 4
  %add186 = add i32 %add183, %call185
  store i32 %add186, i32* %t1166, align 4
  %136 = load i32, i32* %e, align 4
  %shr188 = lshr i32 %136, 2
  %137 = load i32, i32* %e, align 4
  %shl189 = shl i32 %137, 30
  %or190 = or i32 %shr188, %shl189
  %138 = load i32, i32* %e, align 4
  %shr191 = lshr i32 %138, 13
  %139 = load i32, i32* %e, align 4
  %shl192 = shl i32 %139, 19
  %or193 = or i32 %shr191, %shl192
  %xor194 = xor i32 %or190, %or193
  %140 = load i32, i32* %e, align 4
  %shr195 = lshr i32 %140, 22
  %141 = load i32, i32* %e, align 4
  %shl196 = shl i32 %141, 10
  %or197 = or i32 %shr195, %shl196
  %xor198 = xor i32 %xor194, %or197
  %142 = load i32, i32* %e, align 4
  %143 = load i32, i32* %f, align 4
  %and199 = and i32 %142, %143
  %144 = load i32, i32* %g, align 4
  %145 = load i32, i32* %e, align 4
  %146 = load i32, i32* %f, align 4
  %or200 = or i32 %145, %146
  %and201 = and i32 %144, %or200
  %or202 = or i32 %and199, %and201
  %add203 = add i32 %xor198, %or202
  store i32 %add203, i32* %t2187, align 4
  %147 = load i32, i32* %t1166, align 4
  %148 = load i32, i32* %h, align 4
  %add204 = add i32 %148, %147
  store i32 %add204, i32* %h, align 4
  %149 = load i32, i32* %t1166, align 4
  %150 = load i32, i32* %t2187, align 4
  %add205 = add i32 %149, %150
  store i32 %add205, i32* %d, align 4
  br label %do.end206

do.end206:                                        ; preds = %do.body165
  br label %do.body207

do.body207:                                       ; preds = %do.end206
  %151 = load i32, i32* %c, align 4
  %152 = load i32, i32* %h, align 4
  %shr209 = lshr i32 %152, 6
  %153 = load i32, i32* %h, align 4
  %shl210 = shl i32 %153, 26
  %or211 = or i32 %shr209, %shl210
  %154 = load i32, i32* %h, align 4
  %shr212 = lshr i32 %154, 11
  %155 = load i32, i32* %h, align 4
  %shl213 = shl i32 %155, 21
  %or214 = or i32 %shr212, %shl213
  %xor215 = xor i32 %or211, %or214
  %156 = load i32, i32* %h, align 4
  %shr216 = lshr i32 %156, 25
  %157 = load i32, i32* %h, align 4
  %shl217 = shl i32 %157, 7
  %or218 = or i32 %shr216, %shl217
  %xor219 = xor i32 %xor215, %or218
  %add220 = add i32 %151, %xor219
  %158 = load i32, i32* %b, align 4
  %159 = load i32, i32* %h, align 4
  %160 = load i32, i32* %a, align 4
  %161 = load i32, i32* %b, align 4
  %xor221 = xor i32 %160, %161
  %and222 = and i32 %159, %xor221
  %xor223 = xor i32 %158, %and222
  %add224 = add i32 %add220, %xor223
  %add225 = add i32 %add224, 1508970993
  %162 = load i8*, i8** %buf.addr, align 8
  %arrayidx226 = getelementptr inbounds i8, i8* %162, i64 20
  %call227 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx226)
  store i32 %call227, i32* %w5, align 4
  %add228 = add i32 %add225, %call227
  store i32 %add228, i32* %t1208, align 4
  %163 = load i32, i32* %d, align 4
  %shr230 = lshr i32 %163, 2
  %164 = load i32, i32* %d, align 4
  %shl231 = shl i32 %164, 30
  %or232 = or i32 %shr230, %shl231
  %165 = load i32, i32* %d, align 4
  %shr233 = lshr i32 %165, 13
  %166 = load i32, i32* %d, align 4
  %shl234 = shl i32 %166, 19
  %or235 = or i32 %shr233, %shl234
  %xor236 = xor i32 %or232, %or235
  %167 = load i32, i32* %d, align 4
  %shr237 = lshr i32 %167, 22
  %168 = load i32, i32* %d, align 4
  %shl238 = shl i32 %168, 10
  %or239 = or i32 %shr237, %shl238
  %xor240 = xor i32 %xor236, %or239
  %169 = load i32, i32* %d, align 4
  %170 = load i32, i32* %e, align 4
  %and241 = and i32 %169, %170
  %171 = load i32, i32* %f, align 4
  %172 = load i32, i32* %d, align 4
  %173 = load i32, i32* %e, align 4
  %or242 = or i32 %172, %173
  %and243 = and i32 %171, %or242
  %or244 = or i32 %and241, %and243
  %add245 = add i32 %xor240, %or244
  store i32 %add245, i32* %t2229, align 4
  %174 = load i32, i32* %t1208, align 4
  %175 = load i32, i32* %g, align 4
  %add246 = add i32 %175, %174
  store i32 %add246, i32* %g, align 4
  %176 = load i32, i32* %t1208, align 4
  %177 = load i32, i32* %t2229, align 4
  %add247 = add i32 %176, %177
  store i32 %add247, i32* %c, align 4
  br label %do.end248

do.end248:                                        ; preds = %do.body207
  br label %do.body249

do.body249:                                       ; preds = %do.end248
  %178 = load i32, i32* %b, align 4
  %179 = load i32, i32* %g, align 4
  %shr251 = lshr i32 %179, 6
  %180 = load i32, i32* %g, align 4
  %shl252 = shl i32 %180, 26
  %or253 = or i32 %shr251, %shl252
  %181 = load i32, i32* %g, align 4
  %shr254 = lshr i32 %181, 11
  %182 = load i32, i32* %g, align 4
  %shl255 = shl i32 %182, 21
  %or256 = or i32 %shr254, %shl255
  %xor257 = xor i32 %or253, %or256
  %183 = load i32, i32* %g, align 4
  %shr258 = lshr i32 %183, 25
  %184 = load i32, i32* %g, align 4
  %shl259 = shl i32 %184, 7
  %or260 = or i32 %shr258, %shl259
  %xor261 = xor i32 %xor257, %or260
  %add262 = add i32 %178, %xor261
  %185 = load i32, i32* %a, align 4
  %186 = load i32, i32* %g, align 4
  %187 = load i32, i32* %h, align 4
  %188 = load i32, i32* %a, align 4
  %xor263 = xor i32 %187, %188
  %and264 = and i32 %186, %xor263
  %xor265 = xor i32 %185, %and264
  %add266 = add i32 %add262, %xor265
  %add267 = add i32 %add266, -1841331548
  %189 = load i8*, i8** %buf.addr, align 8
  %arrayidx268 = getelementptr inbounds i8, i8* %189, i64 24
  %call269 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx268)
  store i32 %call269, i32* %w6, align 4
  %add270 = add i32 %add267, %call269
  store i32 %add270, i32* %t1250, align 4
  %190 = load i32, i32* %c, align 4
  %shr272 = lshr i32 %190, 2
  %191 = load i32, i32* %c, align 4
  %shl273 = shl i32 %191, 30
  %or274 = or i32 %shr272, %shl273
  %192 = load i32, i32* %c, align 4
  %shr275 = lshr i32 %192, 13
  %193 = load i32, i32* %c, align 4
  %shl276 = shl i32 %193, 19
  %or277 = or i32 %shr275, %shl276
  %xor278 = xor i32 %or274, %or277
  %194 = load i32, i32* %c, align 4
  %shr279 = lshr i32 %194, 22
  %195 = load i32, i32* %c, align 4
  %shl280 = shl i32 %195, 10
  %or281 = or i32 %shr279, %shl280
  %xor282 = xor i32 %xor278, %or281
  %196 = load i32, i32* %c, align 4
  %197 = load i32, i32* %d, align 4
  %and283 = and i32 %196, %197
  %198 = load i32, i32* %e, align 4
  %199 = load i32, i32* %c, align 4
  %200 = load i32, i32* %d, align 4
  %or284 = or i32 %199, %200
  %and285 = and i32 %198, %or284
  %or286 = or i32 %and283, %and285
  %add287 = add i32 %xor282, %or286
  store i32 %add287, i32* %t2271, align 4
  %201 = load i32, i32* %t1250, align 4
  %202 = load i32, i32* %f, align 4
  %add288 = add i32 %202, %201
  store i32 %add288, i32* %f, align 4
  %203 = load i32, i32* %t1250, align 4
  %204 = load i32, i32* %t2271, align 4
  %add289 = add i32 %203, %204
  store i32 %add289, i32* %b, align 4
  br label %do.end290

do.end290:                                        ; preds = %do.body249
  br label %do.body291

do.body291:                                       ; preds = %do.end290
  %205 = load i32, i32* %a, align 4
  %206 = load i32, i32* %f, align 4
  %shr293 = lshr i32 %206, 6
  %207 = load i32, i32* %f, align 4
  %shl294 = shl i32 %207, 26
  %or295 = or i32 %shr293, %shl294
  %208 = load i32, i32* %f, align 4
  %shr296 = lshr i32 %208, 11
  %209 = load i32, i32* %f, align 4
  %shl297 = shl i32 %209, 21
  %or298 = or i32 %shr296, %shl297
  %xor299 = xor i32 %or295, %or298
  %210 = load i32, i32* %f, align 4
  %shr300 = lshr i32 %210, 25
  %211 = load i32, i32* %f, align 4
  %shl301 = shl i32 %211, 7
  %or302 = or i32 %shr300, %shl301
  %xor303 = xor i32 %xor299, %or302
  %add304 = add i32 %205, %xor303
  %212 = load i32, i32* %h, align 4
  %213 = load i32, i32* %f, align 4
  %214 = load i32, i32* %g, align 4
  %215 = load i32, i32* %h, align 4
  %xor305 = xor i32 %214, %215
  %and306 = and i32 %213, %xor305
  %xor307 = xor i32 %212, %and306
  %add308 = add i32 %add304, %xor307
  %add309 = add i32 %add308, -1424204075
  %216 = load i8*, i8** %buf.addr, align 8
  %arrayidx310 = getelementptr inbounds i8, i8* %216, i64 28
  %call311 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx310)
  store i32 %call311, i32* %w7, align 4
  %add312 = add i32 %add309, %call311
  store i32 %add312, i32* %t1292, align 4
  %217 = load i32, i32* %b, align 4
  %shr314 = lshr i32 %217, 2
  %218 = load i32, i32* %b, align 4
  %shl315 = shl i32 %218, 30
  %or316 = or i32 %shr314, %shl315
  %219 = load i32, i32* %b, align 4
  %shr317 = lshr i32 %219, 13
  %220 = load i32, i32* %b, align 4
  %shl318 = shl i32 %220, 19
  %or319 = or i32 %shr317, %shl318
  %xor320 = xor i32 %or316, %or319
  %221 = load i32, i32* %b, align 4
  %shr321 = lshr i32 %221, 22
  %222 = load i32, i32* %b, align 4
  %shl322 = shl i32 %222, 10
  %or323 = or i32 %shr321, %shl322
  %xor324 = xor i32 %xor320, %or323
  %223 = load i32, i32* %b, align 4
  %224 = load i32, i32* %c, align 4
  %and325 = and i32 %223, %224
  %225 = load i32, i32* %d, align 4
  %226 = load i32, i32* %b, align 4
  %227 = load i32, i32* %c, align 4
  %or326 = or i32 %226, %227
  %and327 = and i32 %225, %or326
  %or328 = or i32 %and325, %and327
  %add329 = add i32 %xor324, %or328
  store i32 %add329, i32* %t2313, align 4
  %228 = load i32, i32* %t1292, align 4
  %229 = load i32, i32* %e, align 4
  %add330 = add i32 %229, %228
  store i32 %add330, i32* %e, align 4
  %230 = load i32, i32* %t1292, align 4
  %231 = load i32, i32* %t2313, align 4
  %add331 = add i32 %230, %231
  store i32 %add331, i32* %a, align 4
  br label %do.end332

do.end332:                                        ; preds = %do.body291
  br label %do.body333

do.body333:                                       ; preds = %do.end332
  %232 = load i32, i32* %h, align 4
  %233 = load i32, i32* %e, align 4
  %shr335 = lshr i32 %233, 6
  %234 = load i32, i32* %e, align 4
  %shl336 = shl i32 %234, 26
  %or337 = or i32 %shr335, %shl336
  %235 = load i32, i32* %e, align 4
  %shr338 = lshr i32 %235, 11
  %236 = load i32, i32* %e, align 4
  %shl339 = shl i32 %236, 21
  %or340 = or i32 %shr338, %shl339
  %xor341 = xor i32 %or337, %or340
  %237 = load i32, i32* %e, align 4
  %shr342 = lshr i32 %237, 25
  %238 = load i32, i32* %e, align 4
  %shl343 = shl i32 %238, 7
  %or344 = or i32 %shr342, %shl343
  %xor345 = xor i32 %xor341, %or344
  %add346 = add i32 %232, %xor345
  %239 = load i32, i32* %g, align 4
  %240 = load i32, i32* %e, align 4
  %241 = load i32, i32* %f, align 4
  %242 = load i32, i32* %g, align 4
  %xor347 = xor i32 %241, %242
  %and348 = and i32 %240, %xor347
  %xor349 = xor i32 %239, %and348
  %add350 = add i32 %add346, %xor349
  %add351 = add i32 %add350, -670586216
  %243 = load i8*, i8** %buf.addr, align 8
  %arrayidx352 = getelementptr inbounds i8, i8* %243, i64 32
  %call353 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx352)
  store i32 %call353, i32* %w8, align 4
  %add354 = add i32 %add351, %call353
  store i32 %add354, i32* %t1334, align 4
  %244 = load i32, i32* %a, align 4
  %shr356 = lshr i32 %244, 2
  %245 = load i32, i32* %a, align 4
  %shl357 = shl i32 %245, 30
  %or358 = or i32 %shr356, %shl357
  %246 = load i32, i32* %a, align 4
  %shr359 = lshr i32 %246, 13
  %247 = load i32, i32* %a, align 4
  %shl360 = shl i32 %247, 19
  %or361 = or i32 %shr359, %shl360
  %xor362 = xor i32 %or358, %or361
  %248 = load i32, i32* %a, align 4
  %shr363 = lshr i32 %248, 22
  %249 = load i32, i32* %a, align 4
  %shl364 = shl i32 %249, 10
  %or365 = or i32 %shr363, %shl364
  %xor366 = xor i32 %xor362, %or365
  %250 = load i32, i32* %a, align 4
  %251 = load i32, i32* %b, align 4
  %and367 = and i32 %250, %251
  %252 = load i32, i32* %c, align 4
  %253 = load i32, i32* %a, align 4
  %254 = load i32, i32* %b, align 4
  %or368 = or i32 %253, %254
  %and369 = and i32 %252, %or368
  %or370 = or i32 %and367, %and369
  %add371 = add i32 %xor366, %or370
  store i32 %add371, i32* %t2355, align 4
  %255 = load i32, i32* %t1334, align 4
  %256 = load i32, i32* %d, align 4
  %add372 = add i32 %256, %255
  store i32 %add372, i32* %d, align 4
  %257 = load i32, i32* %t1334, align 4
  %258 = load i32, i32* %t2355, align 4
  %add373 = add i32 %257, %258
  store i32 %add373, i32* %h, align 4
  br label %do.end374

do.end374:                                        ; preds = %do.body333
  br label %do.body375

do.body375:                                       ; preds = %do.end374
  %259 = load i32, i32* %g, align 4
  %260 = load i32, i32* %d, align 4
  %shr377 = lshr i32 %260, 6
  %261 = load i32, i32* %d, align 4
  %shl378 = shl i32 %261, 26
  %or379 = or i32 %shr377, %shl378
  %262 = load i32, i32* %d, align 4
  %shr380 = lshr i32 %262, 11
  %263 = load i32, i32* %d, align 4
  %shl381 = shl i32 %263, 21
  %or382 = or i32 %shr380, %shl381
  %xor383 = xor i32 %or379, %or382
  %264 = load i32, i32* %d, align 4
  %shr384 = lshr i32 %264, 25
  %265 = load i32, i32* %d, align 4
  %shl385 = shl i32 %265, 7
  %or386 = or i32 %shr384, %shl385
  %xor387 = xor i32 %xor383, %or386
  %add388 = add i32 %259, %xor387
  %266 = load i32, i32* %f, align 4
  %267 = load i32, i32* %d, align 4
  %268 = load i32, i32* %e, align 4
  %269 = load i32, i32* %f, align 4
  %xor389 = xor i32 %268, %269
  %and390 = and i32 %267, %xor389
  %xor391 = xor i32 %266, %and390
  %add392 = add i32 %add388, %xor391
  %add393 = add i32 %add392, 310598401
  %270 = load i8*, i8** %buf.addr, align 8
  %arrayidx394 = getelementptr inbounds i8, i8* %270, i64 36
  %call395 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx394)
  store i32 %call395, i32* %w9, align 4
  %add396 = add i32 %add393, %call395
  store i32 %add396, i32* %t1376, align 4
  %271 = load i32, i32* %h, align 4
  %shr398 = lshr i32 %271, 2
  %272 = load i32, i32* %h, align 4
  %shl399 = shl i32 %272, 30
  %or400 = or i32 %shr398, %shl399
  %273 = load i32, i32* %h, align 4
  %shr401 = lshr i32 %273, 13
  %274 = load i32, i32* %h, align 4
  %shl402 = shl i32 %274, 19
  %or403 = or i32 %shr401, %shl402
  %xor404 = xor i32 %or400, %or403
  %275 = load i32, i32* %h, align 4
  %shr405 = lshr i32 %275, 22
  %276 = load i32, i32* %h, align 4
  %shl406 = shl i32 %276, 10
  %or407 = or i32 %shr405, %shl406
  %xor408 = xor i32 %xor404, %or407
  %277 = load i32, i32* %h, align 4
  %278 = load i32, i32* %a, align 4
  %and409 = and i32 %277, %278
  %279 = load i32, i32* %b, align 4
  %280 = load i32, i32* %h, align 4
  %281 = load i32, i32* %a, align 4
  %or410 = or i32 %280, %281
  %and411 = and i32 %279, %or410
  %or412 = or i32 %and409, %and411
  %add413 = add i32 %xor408, %or412
  store i32 %add413, i32* %t2397, align 4
  %282 = load i32, i32* %t1376, align 4
  %283 = load i32, i32* %c, align 4
  %add414 = add i32 %283, %282
  store i32 %add414, i32* %c, align 4
  %284 = load i32, i32* %t1376, align 4
  %285 = load i32, i32* %t2397, align 4
  %add415 = add i32 %284, %285
  store i32 %add415, i32* %g, align 4
  br label %do.end416

do.end416:                                        ; preds = %do.body375
  br label %do.body417

do.body417:                                       ; preds = %do.end416
  %286 = load i32, i32* %f, align 4
  %287 = load i32, i32* %c, align 4
  %shr419 = lshr i32 %287, 6
  %288 = load i32, i32* %c, align 4
  %shl420 = shl i32 %288, 26
  %or421 = or i32 %shr419, %shl420
  %289 = load i32, i32* %c, align 4
  %shr422 = lshr i32 %289, 11
  %290 = load i32, i32* %c, align 4
  %shl423 = shl i32 %290, 21
  %or424 = or i32 %shr422, %shl423
  %xor425 = xor i32 %or421, %or424
  %291 = load i32, i32* %c, align 4
  %shr426 = lshr i32 %291, 25
  %292 = load i32, i32* %c, align 4
  %shl427 = shl i32 %292, 7
  %or428 = or i32 %shr426, %shl427
  %xor429 = xor i32 %xor425, %or428
  %add430 = add i32 %286, %xor429
  %293 = load i32, i32* %e, align 4
  %294 = load i32, i32* %c, align 4
  %295 = load i32, i32* %d, align 4
  %296 = load i32, i32* %e, align 4
  %xor431 = xor i32 %295, %296
  %and432 = and i32 %294, %xor431
  %xor433 = xor i32 %293, %and432
  %add434 = add i32 %add430, %xor433
  %add435 = add i32 %add434, 607225278
  %297 = load i8*, i8** %buf.addr, align 8
  %arrayidx436 = getelementptr inbounds i8, i8* %297, i64 40
  %call437 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx436)
  store i32 %call437, i32* %w10, align 4
  %add438 = add i32 %add435, %call437
  store i32 %add438, i32* %t1418, align 4
  %298 = load i32, i32* %g, align 4
  %shr440 = lshr i32 %298, 2
  %299 = load i32, i32* %g, align 4
  %shl441 = shl i32 %299, 30
  %or442 = or i32 %shr440, %shl441
  %300 = load i32, i32* %g, align 4
  %shr443 = lshr i32 %300, 13
  %301 = load i32, i32* %g, align 4
  %shl444 = shl i32 %301, 19
  %or445 = or i32 %shr443, %shl444
  %xor446 = xor i32 %or442, %or445
  %302 = load i32, i32* %g, align 4
  %shr447 = lshr i32 %302, 22
  %303 = load i32, i32* %g, align 4
  %shl448 = shl i32 %303, 10
  %or449 = or i32 %shr447, %shl448
  %xor450 = xor i32 %xor446, %or449
  %304 = load i32, i32* %g, align 4
  %305 = load i32, i32* %h, align 4
  %and451 = and i32 %304, %305
  %306 = load i32, i32* %a, align 4
  %307 = load i32, i32* %g, align 4
  %308 = load i32, i32* %h, align 4
  %or452 = or i32 %307, %308
  %and453 = and i32 %306, %or452
  %or454 = or i32 %and451, %and453
  %add455 = add i32 %xor450, %or454
  store i32 %add455, i32* %t2439, align 4
  %309 = load i32, i32* %t1418, align 4
  %310 = load i32, i32* %b, align 4
  %add456 = add i32 %310, %309
  store i32 %add456, i32* %b, align 4
  %311 = load i32, i32* %t1418, align 4
  %312 = load i32, i32* %t2439, align 4
  %add457 = add i32 %311, %312
  store i32 %add457, i32* %f, align 4
  br label %do.end458

do.end458:                                        ; preds = %do.body417
  br label %do.body459

do.body459:                                       ; preds = %do.end458
  %313 = load i32, i32* %e, align 4
  %314 = load i32, i32* %b, align 4
  %shr461 = lshr i32 %314, 6
  %315 = load i32, i32* %b, align 4
  %shl462 = shl i32 %315, 26
  %or463 = or i32 %shr461, %shl462
  %316 = load i32, i32* %b, align 4
  %shr464 = lshr i32 %316, 11
  %317 = load i32, i32* %b, align 4
  %shl465 = shl i32 %317, 21
  %or466 = or i32 %shr464, %shl465
  %xor467 = xor i32 %or463, %or466
  %318 = load i32, i32* %b, align 4
  %shr468 = lshr i32 %318, 25
  %319 = load i32, i32* %b, align 4
  %shl469 = shl i32 %319, 7
  %or470 = or i32 %shr468, %shl469
  %xor471 = xor i32 %xor467, %or470
  %add472 = add i32 %313, %xor471
  %320 = load i32, i32* %d, align 4
  %321 = load i32, i32* %b, align 4
  %322 = load i32, i32* %c, align 4
  %323 = load i32, i32* %d, align 4
  %xor473 = xor i32 %322, %323
  %and474 = and i32 %321, %xor473
  %xor475 = xor i32 %320, %and474
  %add476 = add i32 %add472, %xor475
  %add477 = add i32 %add476, 1426881987
  %324 = load i8*, i8** %buf.addr, align 8
  %arrayidx478 = getelementptr inbounds i8, i8* %324, i64 44
  %call479 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx478)
  store i32 %call479, i32* %w11, align 4
  %add480 = add i32 %add477, %call479
  store i32 %add480, i32* %t1460, align 4
  %325 = load i32, i32* %f, align 4
  %shr482 = lshr i32 %325, 2
  %326 = load i32, i32* %f, align 4
  %shl483 = shl i32 %326, 30
  %or484 = or i32 %shr482, %shl483
  %327 = load i32, i32* %f, align 4
  %shr485 = lshr i32 %327, 13
  %328 = load i32, i32* %f, align 4
  %shl486 = shl i32 %328, 19
  %or487 = or i32 %shr485, %shl486
  %xor488 = xor i32 %or484, %or487
  %329 = load i32, i32* %f, align 4
  %shr489 = lshr i32 %329, 22
  %330 = load i32, i32* %f, align 4
  %shl490 = shl i32 %330, 10
  %or491 = or i32 %shr489, %shl490
  %xor492 = xor i32 %xor488, %or491
  %331 = load i32, i32* %f, align 4
  %332 = load i32, i32* %g, align 4
  %and493 = and i32 %331, %332
  %333 = load i32, i32* %h, align 4
  %334 = load i32, i32* %f, align 4
  %335 = load i32, i32* %g, align 4
  %or494 = or i32 %334, %335
  %and495 = and i32 %333, %or494
  %or496 = or i32 %and493, %and495
  %add497 = add i32 %xor492, %or496
  store i32 %add497, i32* %t2481, align 4
  %336 = load i32, i32* %t1460, align 4
  %337 = load i32, i32* %a, align 4
  %add498 = add i32 %337, %336
  store i32 %add498, i32* %a, align 4
  %338 = load i32, i32* %t1460, align 4
  %339 = load i32, i32* %t2481, align 4
  %add499 = add i32 %338, %339
  store i32 %add499, i32* %e, align 4
  br label %do.end500

do.end500:                                        ; preds = %do.body459
  br label %do.body501

do.body501:                                       ; preds = %do.end500
  %340 = load i32, i32* %d, align 4
  %341 = load i32, i32* %a, align 4
  %shr503 = lshr i32 %341, 6
  %342 = load i32, i32* %a, align 4
  %shl504 = shl i32 %342, 26
  %or505 = or i32 %shr503, %shl504
  %343 = load i32, i32* %a, align 4
  %shr506 = lshr i32 %343, 11
  %344 = load i32, i32* %a, align 4
  %shl507 = shl i32 %344, 21
  %or508 = or i32 %shr506, %shl507
  %xor509 = xor i32 %or505, %or508
  %345 = load i32, i32* %a, align 4
  %shr510 = lshr i32 %345, 25
  %346 = load i32, i32* %a, align 4
  %shl511 = shl i32 %346, 7
  %or512 = or i32 %shr510, %shl511
  %xor513 = xor i32 %xor509, %or512
  %add514 = add i32 %340, %xor513
  %347 = load i32, i32* %c, align 4
  %348 = load i32, i32* %a, align 4
  %349 = load i32, i32* %b, align 4
  %350 = load i32, i32* %c, align 4
  %xor515 = xor i32 %349, %350
  %and516 = and i32 %348, %xor515
  %xor517 = xor i32 %347, %and516
  %add518 = add i32 %add514, %xor517
  %add519 = add i32 %add518, 1925078388
  %351 = load i8*, i8** %buf.addr, align 8
  %arrayidx520 = getelementptr inbounds i8, i8* %351, i64 48
  %call521 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx520)
  store i32 %call521, i32* %w12, align 4
  %add522 = add i32 %add519, %call521
  store i32 %add522, i32* %t1502, align 4
  %352 = load i32, i32* %e, align 4
  %shr524 = lshr i32 %352, 2
  %353 = load i32, i32* %e, align 4
  %shl525 = shl i32 %353, 30
  %or526 = or i32 %shr524, %shl525
  %354 = load i32, i32* %e, align 4
  %shr527 = lshr i32 %354, 13
  %355 = load i32, i32* %e, align 4
  %shl528 = shl i32 %355, 19
  %or529 = or i32 %shr527, %shl528
  %xor530 = xor i32 %or526, %or529
  %356 = load i32, i32* %e, align 4
  %shr531 = lshr i32 %356, 22
  %357 = load i32, i32* %e, align 4
  %shl532 = shl i32 %357, 10
  %or533 = or i32 %shr531, %shl532
  %xor534 = xor i32 %xor530, %or533
  %358 = load i32, i32* %e, align 4
  %359 = load i32, i32* %f, align 4
  %and535 = and i32 %358, %359
  %360 = load i32, i32* %g, align 4
  %361 = load i32, i32* %e, align 4
  %362 = load i32, i32* %f, align 4
  %or536 = or i32 %361, %362
  %and537 = and i32 %360, %or536
  %or538 = or i32 %and535, %and537
  %add539 = add i32 %xor534, %or538
  store i32 %add539, i32* %t2523, align 4
  %363 = load i32, i32* %t1502, align 4
  %364 = load i32, i32* %h, align 4
  %add540 = add i32 %364, %363
  store i32 %add540, i32* %h, align 4
  %365 = load i32, i32* %t1502, align 4
  %366 = load i32, i32* %t2523, align 4
  %add541 = add i32 %365, %366
  store i32 %add541, i32* %d, align 4
  br label %do.end542

do.end542:                                        ; preds = %do.body501
  br label %do.body543

do.body543:                                       ; preds = %do.end542
  %367 = load i32, i32* %c, align 4
  %368 = load i32, i32* %h, align 4
  %shr545 = lshr i32 %368, 6
  %369 = load i32, i32* %h, align 4
  %shl546 = shl i32 %369, 26
  %or547 = or i32 %shr545, %shl546
  %370 = load i32, i32* %h, align 4
  %shr548 = lshr i32 %370, 11
  %371 = load i32, i32* %h, align 4
  %shl549 = shl i32 %371, 21
  %or550 = or i32 %shr548, %shl549
  %xor551 = xor i32 %or547, %or550
  %372 = load i32, i32* %h, align 4
  %shr552 = lshr i32 %372, 25
  %373 = load i32, i32* %h, align 4
  %shl553 = shl i32 %373, 7
  %or554 = or i32 %shr552, %shl553
  %xor555 = xor i32 %xor551, %or554
  %add556 = add i32 %367, %xor555
  %374 = load i32, i32* %b, align 4
  %375 = load i32, i32* %h, align 4
  %376 = load i32, i32* %a, align 4
  %377 = load i32, i32* %b, align 4
  %xor557 = xor i32 %376, %377
  %and558 = and i32 %375, %xor557
  %xor559 = xor i32 %374, %and558
  %add560 = add i32 %add556, %xor559
  %add561 = add i32 %add560, -2132889090
  %378 = load i8*, i8** %buf.addr, align 8
  %arrayidx562 = getelementptr inbounds i8, i8* %378, i64 52
  %call563 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx562)
  store i32 %call563, i32* %w13, align 4
  %add564 = add i32 %add561, %call563
  store i32 %add564, i32* %t1544, align 4
  %379 = load i32, i32* %d, align 4
  %shr566 = lshr i32 %379, 2
  %380 = load i32, i32* %d, align 4
  %shl567 = shl i32 %380, 30
  %or568 = or i32 %shr566, %shl567
  %381 = load i32, i32* %d, align 4
  %shr569 = lshr i32 %381, 13
  %382 = load i32, i32* %d, align 4
  %shl570 = shl i32 %382, 19
  %or571 = or i32 %shr569, %shl570
  %xor572 = xor i32 %or568, %or571
  %383 = load i32, i32* %d, align 4
  %shr573 = lshr i32 %383, 22
  %384 = load i32, i32* %d, align 4
  %shl574 = shl i32 %384, 10
  %or575 = or i32 %shr573, %shl574
  %xor576 = xor i32 %xor572, %or575
  %385 = load i32, i32* %d, align 4
  %386 = load i32, i32* %e, align 4
  %and577 = and i32 %385, %386
  %387 = load i32, i32* %f, align 4
  %388 = load i32, i32* %d, align 4
  %389 = load i32, i32* %e, align 4
  %or578 = or i32 %388, %389
  %and579 = and i32 %387, %or578
  %or580 = or i32 %and577, %and579
  %add581 = add i32 %xor576, %or580
  store i32 %add581, i32* %t2565, align 4
  %390 = load i32, i32* %t1544, align 4
  %391 = load i32, i32* %g, align 4
  %add582 = add i32 %391, %390
  store i32 %add582, i32* %g, align 4
  %392 = load i32, i32* %t1544, align 4
  %393 = load i32, i32* %t2565, align 4
  %add583 = add i32 %392, %393
  store i32 %add583, i32* %c, align 4
  br label %do.end584

do.end584:                                        ; preds = %do.body543
  br label %do.body585

do.body585:                                       ; preds = %do.end584
  %394 = load i32, i32* %b, align 4
  %395 = load i32, i32* %g, align 4
  %shr587 = lshr i32 %395, 6
  %396 = load i32, i32* %g, align 4
  %shl588 = shl i32 %396, 26
  %or589 = or i32 %shr587, %shl588
  %397 = load i32, i32* %g, align 4
  %shr590 = lshr i32 %397, 11
  %398 = load i32, i32* %g, align 4
  %shl591 = shl i32 %398, 21
  %or592 = or i32 %shr590, %shl591
  %xor593 = xor i32 %or589, %or592
  %399 = load i32, i32* %g, align 4
  %shr594 = lshr i32 %399, 25
  %400 = load i32, i32* %g, align 4
  %shl595 = shl i32 %400, 7
  %or596 = or i32 %shr594, %shl595
  %xor597 = xor i32 %xor593, %or596
  %add598 = add i32 %394, %xor597
  %401 = load i32, i32* %a, align 4
  %402 = load i32, i32* %g, align 4
  %403 = load i32, i32* %h, align 4
  %404 = load i32, i32* %a, align 4
  %xor599 = xor i32 %403, %404
  %and600 = and i32 %402, %xor599
  %xor601 = xor i32 %401, %and600
  %add602 = add i32 %add598, %xor601
  %add603 = add i32 %add602, -1680079193
  %405 = load i8*, i8** %buf.addr, align 8
  %arrayidx604 = getelementptr inbounds i8, i8* %405, i64 56
  %call605 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx604)
  store i32 %call605, i32* %w14, align 4
  %add606 = add i32 %add603, %call605
  store i32 %add606, i32* %t1586, align 4
  %406 = load i32, i32* %c, align 4
  %shr608 = lshr i32 %406, 2
  %407 = load i32, i32* %c, align 4
  %shl609 = shl i32 %407, 30
  %or610 = or i32 %shr608, %shl609
  %408 = load i32, i32* %c, align 4
  %shr611 = lshr i32 %408, 13
  %409 = load i32, i32* %c, align 4
  %shl612 = shl i32 %409, 19
  %or613 = or i32 %shr611, %shl612
  %xor614 = xor i32 %or610, %or613
  %410 = load i32, i32* %c, align 4
  %shr615 = lshr i32 %410, 22
  %411 = load i32, i32* %c, align 4
  %shl616 = shl i32 %411, 10
  %or617 = or i32 %shr615, %shl616
  %xor618 = xor i32 %xor614, %or617
  %412 = load i32, i32* %c, align 4
  %413 = load i32, i32* %d, align 4
  %and619 = and i32 %412, %413
  %414 = load i32, i32* %e, align 4
  %415 = load i32, i32* %c, align 4
  %416 = load i32, i32* %d, align 4
  %or620 = or i32 %415, %416
  %and621 = and i32 %414, %or620
  %or622 = or i32 %and619, %and621
  %add623 = add i32 %xor618, %or622
  store i32 %add623, i32* %t2607, align 4
  %417 = load i32, i32* %t1586, align 4
  %418 = load i32, i32* %f, align 4
  %add624 = add i32 %418, %417
  store i32 %add624, i32* %f, align 4
  %419 = load i32, i32* %t1586, align 4
  %420 = load i32, i32* %t2607, align 4
  %add625 = add i32 %419, %420
  store i32 %add625, i32* %b, align 4
  br label %do.end626

do.end626:                                        ; preds = %do.body585
  br label %do.body627

do.body627:                                       ; preds = %do.end626
  %421 = load i32, i32* %a, align 4
  %422 = load i32, i32* %f, align 4
  %shr629 = lshr i32 %422, 6
  %423 = load i32, i32* %f, align 4
  %shl630 = shl i32 %423, 26
  %or631 = or i32 %shr629, %shl630
  %424 = load i32, i32* %f, align 4
  %shr632 = lshr i32 %424, 11
  %425 = load i32, i32* %f, align 4
  %shl633 = shl i32 %425, 21
  %or634 = or i32 %shr632, %shl633
  %xor635 = xor i32 %or631, %or634
  %426 = load i32, i32* %f, align 4
  %shr636 = lshr i32 %426, 25
  %427 = load i32, i32* %f, align 4
  %shl637 = shl i32 %427, 7
  %or638 = or i32 %shr636, %shl637
  %xor639 = xor i32 %xor635, %or638
  %add640 = add i32 %421, %xor639
  %428 = load i32, i32* %h, align 4
  %429 = load i32, i32* %f, align 4
  %430 = load i32, i32* %g, align 4
  %431 = load i32, i32* %h, align 4
  %xor641 = xor i32 %430, %431
  %and642 = and i32 %429, %xor641
  %xor643 = xor i32 %428, %and642
  %add644 = add i32 %add640, %xor643
  %add645 = add i32 %add644, -1046744716
  %432 = load i8*, i8** %buf.addr, align 8
  %arrayidx646 = getelementptr inbounds i8, i8* %432, i64 60
  %call647 = call i32 @secp256k1_read_be32(i8* noundef %arrayidx646)
  store i32 %call647, i32* %w15, align 4
  %add648 = add i32 %add645, %call647
  store i32 %add648, i32* %t1628, align 4
  %433 = load i32, i32* %b, align 4
  %shr650 = lshr i32 %433, 2
  %434 = load i32, i32* %b, align 4
  %shl651 = shl i32 %434, 30
  %or652 = or i32 %shr650, %shl651
  %435 = load i32, i32* %b, align 4
  %shr653 = lshr i32 %435, 13
  %436 = load i32, i32* %b, align 4
  %shl654 = shl i32 %436, 19
  %or655 = or i32 %shr653, %shl654
  %xor656 = xor i32 %or652, %or655
  %437 = load i32, i32* %b, align 4
  %shr657 = lshr i32 %437, 22
  %438 = load i32, i32* %b, align 4
  %shl658 = shl i32 %438, 10
  %or659 = or i32 %shr657, %shl658
  %xor660 = xor i32 %xor656, %or659
  %439 = load i32, i32* %b, align 4
  %440 = load i32, i32* %c, align 4
  %and661 = and i32 %439, %440
  %441 = load i32, i32* %d, align 4
  %442 = load i32, i32* %b, align 4
  %443 = load i32, i32* %c, align 4
  %or662 = or i32 %442, %443
  %and663 = and i32 %441, %or662
  %or664 = or i32 %and661, %and663
  %add665 = add i32 %xor660, %or664
  store i32 %add665, i32* %t2649, align 4
  %444 = load i32, i32* %t1628, align 4
  %445 = load i32, i32* %e, align 4
  %add666 = add i32 %445, %444
  store i32 %add666, i32* %e, align 4
  %446 = load i32, i32* %t1628, align 4
  %447 = load i32, i32* %t2649, align 4
  %add667 = add i32 %446, %447
  store i32 %add667, i32* %a, align 4
  br label %do.end668

do.end668:                                        ; preds = %do.body627
  br label %do.body669

do.body669:                                       ; preds = %do.end668
  %448 = load i32, i32* %h, align 4
  %449 = load i32, i32* %e, align 4
  %shr671 = lshr i32 %449, 6
  %450 = load i32, i32* %e, align 4
  %shl672 = shl i32 %450, 26
  %or673 = or i32 %shr671, %shl672
  %451 = load i32, i32* %e, align 4
  %shr674 = lshr i32 %451, 11
  %452 = load i32, i32* %e, align 4
  %shl675 = shl i32 %452, 21
  %or676 = or i32 %shr674, %shl675
  %xor677 = xor i32 %or673, %or676
  %453 = load i32, i32* %e, align 4
  %shr678 = lshr i32 %453, 25
  %454 = load i32, i32* %e, align 4
  %shl679 = shl i32 %454, 7
  %or680 = or i32 %shr678, %shl679
  %xor681 = xor i32 %xor677, %or680
  %add682 = add i32 %448, %xor681
  %455 = load i32, i32* %g, align 4
  %456 = load i32, i32* %e, align 4
  %457 = load i32, i32* %f, align 4
  %458 = load i32, i32* %g, align 4
  %xor683 = xor i32 %457, %458
  %and684 = and i32 %456, %xor683
  %xor685 = xor i32 %455, %and684
  %add686 = add i32 %add682, %xor685
  %add687 = add i32 %add686, -459576895
  %459 = load i32, i32* %w14, align 4
  %shr688 = lshr i32 %459, 17
  %460 = load i32, i32* %w14, align 4
  %shl689 = shl i32 %460, 15
  %or690 = or i32 %shr688, %shl689
  %461 = load i32, i32* %w14, align 4
  %shr691 = lshr i32 %461, 19
  %462 = load i32, i32* %w14, align 4
  %shl692 = shl i32 %462, 13
  %or693 = or i32 %shr691, %shl692
  %xor694 = xor i32 %or690, %or693
  %463 = load i32, i32* %w14, align 4
  %shr695 = lshr i32 %463, 10
  %xor696 = xor i32 %xor694, %shr695
  %464 = load i32, i32* %w9, align 4
  %add697 = add i32 %xor696, %464
  %465 = load i32, i32* %w1, align 4
  %shr698 = lshr i32 %465, 7
  %466 = load i32, i32* %w1, align 4
  %shl699 = shl i32 %466, 25
  %or700 = or i32 %shr698, %shl699
  %467 = load i32, i32* %w1, align 4
  %shr701 = lshr i32 %467, 18
  %468 = load i32, i32* %w1, align 4
  %shl702 = shl i32 %468, 14
  %or703 = or i32 %shr701, %shl702
  %xor704 = xor i32 %or700, %or703
  %469 = load i32, i32* %w1, align 4
  %shr705 = lshr i32 %469, 3
  %xor706 = xor i32 %xor704, %shr705
  %add707 = add i32 %add697, %xor706
  %470 = load i32, i32* %w0, align 4
  %add708 = add i32 %470, %add707
  store i32 %add708, i32* %w0, align 4
  %add709 = add i32 %add687, %add708
  store i32 %add709, i32* %t1670, align 4
  %471 = load i32, i32* %a, align 4
  %shr711 = lshr i32 %471, 2
  %472 = load i32, i32* %a, align 4
  %shl712 = shl i32 %472, 30
  %or713 = or i32 %shr711, %shl712
  %473 = load i32, i32* %a, align 4
  %shr714 = lshr i32 %473, 13
  %474 = load i32, i32* %a, align 4
  %shl715 = shl i32 %474, 19
  %or716 = or i32 %shr714, %shl715
  %xor717 = xor i32 %or713, %or716
  %475 = load i32, i32* %a, align 4
  %shr718 = lshr i32 %475, 22
  %476 = load i32, i32* %a, align 4
  %shl719 = shl i32 %476, 10
  %or720 = or i32 %shr718, %shl719
  %xor721 = xor i32 %xor717, %or720
  %477 = load i32, i32* %a, align 4
  %478 = load i32, i32* %b, align 4
  %and722 = and i32 %477, %478
  %479 = load i32, i32* %c, align 4
  %480 = load i32, i32* %a, align 4
  %481 = load i32, i32* %b, align 4
  %or723 = or i32 %480, %481
  %and724 = and i32 %479, %or723
  %or725 = or i32 %and722, %and724
  %add726 = add i32 %xor721, %or725
  store i32 %add726, i32* %t2710, align 4
  %482 = load i32, i32* %t1670, align 4
  %483 = load i32, i32* %d, align 4
  %add727 = add i32 %483, %482
  store i32 %add727, i32* %d, align 4
  %484 = load i32, i32* %t1670, align 4
  %485 = load i32, i32* %t2710, align 4
  %add728 = add i32 %484, %485
  store i32 %add728, i32* %h, align 4
  br label %do.end729

do.end729:                                        ; preds = %do.body669
  br label %do.body730

do.body730:                                       ; preds = %do.end729
  %486 = load i32, i32* %g, align 4
  %487 = load i32, i32* %d, align 4
  %shr732 = lshr i32 %487, 6
  %488 = load i32, i32* %d, align 4
  %shl733 = shl i32 %488, 26
  %or734 = or i32 %shr732, %shl733
  %489 = load i32, i32* %d, align 4
  %shr735 = lshr i32 %489, 11
  %490 = load i32, i32* %d, align 4
  %shl736 = shl i32 %490, 21
  %or737 = or i32 %shr735, %shl736
  %xor738 = xor i32 %or734, %or737
  %491 = load i32, i32* %d, align 4
  %shr739 = lshr i32 %491, 25
  %492 = load i32, i32* %d, align 4
  %shl740 = shl i32 %492, 7
  %or741 = or i32 %shr739, %shl740
  %xor742 = xor i32 %xor738, %or741
  %add743 = add i32 %486, %xor742
  %493 = load i32, i32* %f, align 4
  %494 = load i32, i32* %d, align 4
  %495 = load i32, i32* %e, align 4
  %496 = load i32, i32* %f, align 4
  %xor744 = xor i32 %495, %496
  %and745 = and i32 %494, %xor744
  %xor746 = xor i32 %493, %and745
  %add747 = add i32 %add743, %xor746
  %add748 = add i32 %add747, -272742522
  %497 = load i32, i32* %w15, align 4
  %shr749 = lshr i32 %497, 17
  %498 = load i32, i32* %w15, align 4
  %shl750 = shl i32 %498, 15
  %or751 = or i32 %shr749, %shl750
  %499 = load i32, i32* %w15, align 4
  %shr752 = lshr i32 %499, 19
  %500 = load i32, i32* %w15, align 4
  %shl753 = shl i32 %500, 13
  %or754 = or i32 %shr752, %shl753
  %xor755 = xor i32 %or751, %or754
  %501 = load i32, i32* %w15, align 4
  %shr756 = lshr i32 %501, 10
  %xor757 = xor i32 %xor755, %shr756
  %502 = load i32, i32* %w10, align 4
  %add758 = add i32 %xor757, %502
  %503 = load i32, i32* %w2, align 4
  %shr759 = lshr i32 %503, 7
  %504 = load i32, i32* %w2, align 4
  %shl760 = shl i32 %504, 25
  %or761 = or i32 %shr759, %shl760
  %505 = load i32, i32* %w2, align 4
  %shr762 = lshr i32 %505, 18
  %506 = load i32, i32* %w2, align 4
  %shl763 = shl i32 %506, 14
  %or764 = or i32 %shr762, %shl763
  %xor765 = xor i32 %or761, %or764
  %507 = load i32, i32* %w2, align 4
  %shr766 = lshr i32 %507, 3
  %xor767 = xor i32 %xor765, %shr766
  %add768 = add i32 %add758, %xor767
  %508 = load i32, i32* %w1, align 4
  %add769 = add i32 %508, %add768
  store i32 %add769, i32* %w1, align 4
  %add770 = add i32 %add748, %add769
  store i32 %add770, i32* %t1731, align 4
  %509 = load i32, i32* %h, align 4
  %shr772 = lshr i32 %509, 2
  %510 = load i32, i32* %h, align 4
  %shl773 = shl i32 %510, 30
  %or774 = or i32 %shr772, %shl773
  %511 = load i32, i32* %h, align 4
  %shr775 = lshr i32 %511, 13
  %512 = load i32, i32* %h, align 4
  %shl776 = shl i32 %512, 19
  %or777 = or i32 %shr775, %shl776
  %xor778 = xor i32 %or774, %or777
  %513 = load i32, i32* %h, align 4
  %shr779 = lshr i32 %513, 22
  %514 = load i32, i32* %h, align 4
  %shl780 = shl i32 %514, 10
  %or781 = or i32 %shr779, %shl780
  %xor782 = xor i32 %xor778, %or781
  %515 = load i32, i32* %h, align 4
  %516 = load i32, i32* %a, align 4
  %and783 = and i32 %515, %516
  %517 = load i32, i32* %b, align 4
  %518 = load i32, i32* %h, align 4
  %519 = load i32, i32* %a, align 4
  %or784 = or i32 %518, %519
  %and785 = and i32 %517, %or784
  %or786 = or i32 %and783, %and785
  %add787 = add i32 %xor782, %or786
  store i32 %add787, i32* %t2771, align 4
  %520 = load i32, i32* %t1731, align 4
  %521 = load i32, i32* %c, align 4
  %add788 = add i32 %521, %520
  store i32 %add788, i32* %c, align 4
  %522 = load i32, i32* %t1731, align 4
  %523 = load i32, i32* %t2771, align 4
  %add789 = add i32 %522, %523
  store i32 %add789, i32* %g, align 4
  br label %do.end790

do.end790:                                        ; preds = %do.body730
  br label %do.body791

do.body791:                                       ; preds = %do.end790
  %524 = load i32, i32* %f, align 4
  %525 = load i32, i32* %c, align 4
  %shr793 = lshr i32 %525, 6
  %526 = load i32, i32* %c, align 4
  %shl794 = shl i32 %526, 26
  %or795 = or i32 %shr793, %shl794
  %527 = load i32, i32* %c, align 4
  %shr796 = lshr i32 %527, 11
  %528 = load i32, i32* %c, align 4
  %shl797 = shl i32 %528, 21
  %or798 = or i32 %shr796, %shl797
  %xor799 = xor i32 %or795, %or798
  %529 = load i32, i32* %c, align 4
  %shr800 = lshr i32 %529, 25
  %530 = load i32, i32* %c, align 4
  %shl801 = shl i32 %530, 7
  %or802 = or i32 %shr800, %shl801
  %xor803 = xor i32 %xor799, %or802
  %add804 = add i32 %524, %xor803
  %531 = load i32, i32* %e, align 4
  %532 = load i32, i32* %c, align 4
  %533 = load i32, i32* %d, align 4
  %534 = load i32, i32* %e, align 4
  %xor805 = xor i32 %533, %534
  %and806 = and i32 %532, %xor805
  %xor807 = xor i32 %531, %and806
  %add808 = add i32 %add804, %xor807
  %add809 = add i32 %add808, 264347078
  %535 = load i32, i32* %w0, align 4
  %shr810 = lshr i32 %535, 17
  %536 = load i32, i32* %w0, align 4
  %shl811 = shl i32 %536, 15
  %or812 = or i32 %shr810, %shl811
  %537 = load i32, i32* %w0, align 4
  %shr813 = lshr i32 %537, 19
  %538 = load i32, i32* %w0, align 4
  %shl814 = shl i32 %538, 13
  %or815 = or i32 %shr813, %shl814
  %xor816 = xor i32 %or812, %or815
  %539 = load i32, i32* %w0, align 4
  %shr817 = lshr i32 %539, 10
  %xor818 = xor i32 %xor816, %shr817
  %540 = load i32, i32* %w11, align 4
  %add819 = add i32 %xor818, %540
  %541 = load i32, i32* %w3, align 4
  %shr820 = lshr i32 %541, 7
  %542 = load i32, i32* %w3, align 4
  %shl821 = shl i32 %542, 25
  %or822 = or i32 %shr820, %shl821
  %543 = load i32, i32* %w3, align 4
  %shr823 = lshr i32 %543, 18
  %544 = load i32, i32* %w3, align 4
  %shl824 = shl i32 %544, 14
  %or825 = or i32 %shr823, %shl824
  %xor826 = xor i32 %or822, %or825
  %545 = load i32, i32* %w3, align 4
  %shr827 = lshr i32 %545, 3
  %xor828 = xor i32 %xor826, %shr827
  %add829 = add i32 %add819, %xor828
  %546 = load i32, i32* %w2, align 4
  %add830 = add i32 %546, %add829
  store i32 %add830, i32* %w2, align 4
  %add831 = add i32 %add809, %add830
  store i32 %add831, i32* %t1792, align 4
  %547 = load i32, i32* %g, align 4
  %shr833 = lshr i32 %547, 2
  %548 = load i32, i32* %g, align 4
  %shl834 = shl i32 %548, 30
  %or835 = or i32 %shr833, %shl834
  %549 = load i32, i32* %g, align 4
  %shr836 = lshr i32 %549, 13
  %550 = load i32, i32* %g, align 4
  %shl837 = shl i32 %550, 19
  %or838 = or i32 %shr836, %shl837
  %xor839 = xor i32 %or835, %or838
  %551 = load i32, i32* %g, align 4
  %shr840 = lshr i32 %551, 22
  %552 = load i32, i32* %g, align 4
  %shl841 = shl i32 %552, 10
  %or842 = or i32 %shr840, %shl841
  %xor843 = xor i32 %xor839, %or842
  %553 = load i32, i32* %g, align 4
  %554 = load i32, i32* %h, align 4
  %and844 = and i32 %553, %554
  %555 = load i32, i32* %a, align 4
  %556 = load i32, i32* %g, align 4
  %557 = load i32, i32* %h, align 4
  %or845 = or i32 %556, %557
  %and846 = and i32 %555, %or845
  %or847 = or i32 %and844, %and846
  %add848 = add i32 %xor843, %or847
  store i32 %add848, i32* %t2832, align 4
  %558 = load i32, i32* %t1792, align 4
  %559 = load i32, i32* %b, align 4
  %add849 = add i32 %559, %558
  store i32 %add849, i32* %b, align 4
  %560 = load i32, i32* %t1792, align 4
  %561 = load i32, i32* %t2832, align 4
  %add850 = add i32 %560, %561
  store i32 %add850, i32* %f, align 4
  br label %do.end851

do.end851:                                        ; preds = %do.body791
  br label %do.body852

do.body852:                                       ; preds = %do.end851
  %562 = load i32, i32* %e, align 4
  %563 = load i32, i32* %b, align 4
  %shr854 = lshr i32 %563, 6
  %564 = load i32, i32* %b, align 4
  %shl855 = shl i32 %564, 26
  %or856 = or i32 %shr854, %shl855
  %565 = load i32, i32* %b, align 4
  %shr857 = lshr i32 %565, 11
  %566 = load i32, i32* %b, align 4
  %shl858 = shl i32 %566, 21
  %or859 = or i32 %shr857, %shl858
  %xor860 = xor i32 %or856, %or859
  %567 = load i32, i32* %b, align 4
  %shr861 = lshr i32 %567, 25
  %568 = load i32, i32* %b, align 4
  %shl862 = shl i32 %568, 7
  %or863 = or i32 %shr861, %shl862
  %xor864 = xor i32 %xor860, %or863
  %add865 = add i32 %562, %xor864
  %569 = load i32, i32* %d, align 4
  %570 = load i32, i32* %b, align 4
  %571 = load i32, i32* %c, align 4
  %572 = load i32, i32* %d, align 4
  %xor866 = xor i32 %571, %572
  %and867 = and i32 %570, %xor866
  %xor868 = xor i32 %569, %and867
  %add869 = add i32 %add865, %xor868
  %add870 = add i32 %add869, 604807628
  %573 = load i32, i32* %w1, align 4
  %shr871 = lshr i32 %573, 17
  %574 = load i32, i32* %w1, align 4
  %shl872 = shl i32 %574, 15
  %or873 = or i32 %shr871, %shl872
  %575 = load i32, i32* %w1, align 4
  %shr874 = lshr i32 %575, 19
  %576 = load i32, i32* %w1, align 4
  %shl875 = shl i32 %576, 13
  %or876 = or i32 %shr874, %shl875
  %xor877 = xor i32 %or873, %or876
  %577 = load i32, i32* %w1, align 4
  %shr878 = lshr i32 %577, 10
  %xor879 = xor i32 %xor877, %shr878
  %578 = load i32, i32* %w12, align 4
  %add880 = add i32 %xor879, %578
  %579 = load i32, i32* %w4, align 4
  %shr881 = lshr i32 %579, 7
  %580 = load i32, i32* %w4, align 4
  %shl882 = shl i32 %580, 25
  %or883 = or i32 %shr881, %shl882
  %581 = load i32, i32* %w4, align 4
  %shr884 = lshr i32 %581, 18
  %582 = load i32, i32* %w4, align 4
  %shl885 = shl i32 %582, 14
  %or886 = or i32 %shr884, %shl885
  %xor887 = xor i32 %or883, %or886
  %583 = load i32, i32* %w4, align 4
  %shr888 = lshr i32 %583, 3
  %xor889 = xor i32 %xor887, %shr888
  %add890 = add i32 %add880, %xor889
  %584 = load i32, i32* %w3, align 4
  %add891 = add i32 %584, %add890
  store i32 %add891, i32* %w3, align 4
  %add892 = add i32 %add870, %add891
  store i32 %add892, i32* %t1853, align 4
  %585 = load i32, i32* %f, align 4
  %shr894 = lshr i32 %585, 2
  %586 = load i32, i32* %f, align 4
  %shl895 = shl i32 %586, 30
  %or896 = or i32 %shr894, %shl895
  %587 = load i32, i32* %f, align 4
  %shr897 = lshr i32 %587, 13
  %588 = load i32, i32* %f, align 4
  %shl898 = shl i32 %588, 19
  %or899 = or i32 %shr897, %shl898
  %xor900 = xor i32 %or896, %or899
  %589 = load i32, i32* %f, align 4
  %shr901 = lshr i32 %589, 22
  %590 = load i32, i32* %f, align 4
  %shl902 = shl i32 %590, 10
  %or903 = or i32 %shr901, %shl902
  %xor904 = xor i32 %xor900, %or903
  %591 = load i32, i32* %f, align 4
  %592 = load i32, i32* %g, align 4
  %and905 = and i32 %591, %592
  %593 = load i32, i32* %h, align 4
  %594 = load i32, i32* %f, align 4
  %595 = load i32, i32* %g, align 4
  %or906 = or i32 %594, %595
  %and907 = and i32 %593, %or906
  %or908 = or i32 %and905, %and907
  %add909 = add i32 %xor904, %or908
  store i32 %add909, i32* %t2893, align 4
  %596 = load i32, i32* %t1853, align 4
  %597 = load i32, i32* %a, align 4
  %add910 = add i32 %597, %596
  store i32 %add910, i32* %a, align 4
  %598 = load i32, i32* %t1853, align 4
  %599 = load i32, i32* %t2893, align 4
  %add911 = add i32 %598, %599
  store i32 %add911, i32* %e, align 4
  br label %do.end912

do.end912:                                        ; preds = %do.body852
  br label %do.body913

do.body913:                                       ; preds = %do.end912
  %600 = load i32, i32* %d, align 4
  %601 = load i32, i32* %a, align 4
  %shr915 = lshr i32 %601, 6
  %602 = load i32, i32* %a, align 4
  %shl916 = shl i32 %602, 26
  %or917 = or i32 %shr915, %shl916
  %603 = load i32, i32* %a, align 4
  %shr918 = lshr i32 %603, 11
  %604 = load i32, i32* %a, align 4
  %shl919 = shl i32 %604, 21
  %or920 = or i32 %shr918, %shl919
  %xor921 = xor i32 %or917, %or920
  %605 = load i32, i32* %a, align 4
  %shr922 = lshr i32 %605, 25
  %606 = load i32, i32* %a, align 4
  %shl923 = shl i32 %606, 7
  %or924 = or i32 %shr922, %shl923
  %xor925 = xor i32 %xor921, %or924
  %add926 = add i32 %600, %xor925
  %607 = load i32, i32* %c, align 4
  %608 = load i32, i32* %a, align 4
  %609 = load i32, i32* %b, align 4
  %610 = load i32, i32* %c, align 4
  %xor927 = xor i32 %609, %610
  %and928 = and i32 %608, %xor927
  %xor929 = xor i32 %607, %and928
  %add930 = add i32 %add926, %xor929
  %add931 = add i32 %add930, 770255983
  %611 = load i32, i32* %w2, align 4
  %shr932 = lshr i32 %611, 17
  %612 = load i32, i32* %w2, align 4
  %shl933 = shl i32 %612, 15
  %or934 = or i32 %shr932, %shl933
  %613 = load i32, i32* %w2, align 4
  %shr935 = lshr i32 %613, 19
  %614 = load i32, i32* %w2, align 4
  %shl936 = shl i32 %614, 13
  %or937 = or i32 %shr935, %shl936
  %xor938 = xor i32 %or934, %or937
  %615 = load i32, i32* %w2, align 4
  %shr939 = lshr i32 %615, 10
  %xor940 = xor i32 %xor938, %shr939
  %616 = load i32, i32* %w13, align 4
  %add941 = add i32 %xor940, %616
  %617 = load i32, i32* %w5, align 4
  %shr942 = lshr i32 %617, 7
  %618 = load i32, i32* %w5, align 4
  %shl943 = shl i32 %618, 25
  %or944 = or i32 %shr942, %shl943
  %619 = load i32, i32* %w5, align 4
  %shr945 = lshr i32 %619, 18
  %620 = load i32, i32* %w5, align 4
  %shl946 = shl i32 %620, 14
  %or947 = or i32 %shr945, %shl946
  %xor948 = xor i32 %or944, %or947
  %621 = load i32, i32* %w5, align 4
  %shr949 = lshr i32 %621, 3
  %xor950 = xor i32 %xor948, %shr949
  %add951 = add i32 %add941, %xor950
  %622 = load i32, i32* %w4, align 4
  %add952 = add i32 %622, %add951
  store i32 %add952, i32* %w4, align 4
  %add953 = add i32 %add931, %add952
  store i32 %add953, i32* %t1914, align 4
  %623 = load i32, i32* %e, align 4
  %shr955 = lshr i32 %623, 2
  %624 = load i32, i32* %e, align 4
  %shl956 = shl i32 %624, 30
  %or957 = or i32 %shr955, %shl956
  %625 = load i32, i32* %e, align 4
  %shr958 = lshr i32 %625, 13
  %626 = load i32, i32* %e, align 4
  %shl959 = shl i32 %626, 19
  %or960 = or i32 %shr958, %shl959
  %xor961 = xor i32 %or957, %or960
  %627 = load i32, i32* %e, align 4
  %shr962 = lshr i32 %627, 22
  %628 = load i32, i32* %e, align 4
  %shl963 = shl i32 %628, 10
  %or964 = or i32 %shr962, %shl963
  %xor965 = xor i32 %xor961, %or964
  %629 = load i32, i32* %e, align 4
  %630 = load i32, i32* %f, align 4
  %and966 = and i32 %629, %630
  %631 = load i32, i32* %g, align 4
  %632 = load i32, i32* %e, align 4
  %633 = load i32, i32* %f, align 4
  %or967 = or i32 %632, %633
  %and968 = and i32 %631, %or967
  %or969 = or i32 %and966, %and968
  %add970 = add i32 %xor965, %or969
  store i32 %add970, i32* %t2954, align 4
  %634 = load i32, i32* %t1914, align 4
  %635 = load i32, i32* %h, align 4
  %add971 = add i32 %635, %634
  store i32 %add971, i32* %h, align 4
  %636 = load i32, i32* %t1914, align 4
  %637 = load i32, i32* %t2954, align 4
  %add972 = add i32 %636, %637
  store i32 %add972, i32* %d, align 4
  br label %do.end973

do.end973:                                        ; preds = %do.body913
  br label %do.body974

do.body974:                                       ; preds = %do.end973
  %638 = load i32, i32* %c, align 4
  %639 = load i32, i32* %h, align 4
  %shr976 = lshr i32 %639, 6
  %640 = load i32, i32* %h, align 4
  %shl977 = shl i32 %640, 26
  %or978 = or i32 %shr976, %shl977
  %641 = load i32, i32* %h, align 4
  %shr979 = lshr i32 %641, 11
  %642 = load i32, i32* %h, align 4
  %shl980 = shl i32 %642, 21
  %or981 = or i32 %shr979, %shl980
  %xor982 = xor i32 %or978, %or981
  %643 = load i32, i32* %h, align 4
  %shr983 = lshr i32 %643, 25
  %644 = load i32, i32* %h, align 4
  %shl984 = shl i32 %644, 7
  %or985 = or i32 %shr983, %shl984
  %xor986 = xor i32 %xor982, %or985
  %add987 = add i32 %638, %xor986
  %645 = load i32, i32* %b, align 4
  %646 = load i32, i32* %h, align 4
  %647 = load i32, i32* %a, align 4
  %648 = load i32, i32* %b, align 4
  %xor988 = xor i32 %647, %648
  %and989 = and i32 %646, %xor988
  %xor990 = xor i32 %645, %and989
  %add991 = add i32 %add987, %xor990
  %add992 = add i32 %add991, 1249150122
  %649 = load i32, i32* %w3, align 4
  %shr993 = lshr i32 %649, 17
  %650 = load i32, i32* %w3, align 4
  %shl994 = shl i32 %650, 15
  %or995 = or i32 %shr993, %shl994
  %651 = load i32, i32* %w3, align 4
  %shr996 = lshr i32 %651, 19
  %652 = load i32, i32* %w3, align 4
  %shl997 = shl i32 %652, 13
  %or998 = or i32 %shr996, %shl997
  %xor999 = xor i32 %or995, %or998
  %653 = load i32, i32* %w3, align 4
  %shr1000 = lshr i32 %653, 10
  %xor1001 = xor i32 %xor999, %shr1000
  %654 = load i32, i32* %w14, align 4
  %add1002 = add i32 %xor1001, %654
  %655 = load i32, i32* %w6, align 4
  %shr1003 = lshr i32 %655, 7
  %656 = load i32, i32* %w6, align 4
  %shl1004 = shl i32 %656, 25
  %or1005 = or i32 %shr1003, %shl1004
  %657 = load i32, i32* %w6, align 4
  %shr1006 = lshr i32 %657, 18
  %658 = load i32, i32* %w6, align 4
  %shl1007 = shl i32 %658, 14
  %or1008 = or i32 %shr1006, %shl1007
  %xor1009 = xor i32 %or1005, %or1008
  %659 = load i32, i32* %w6, align 4
  %shr1010 = lshr i32 %659, 3
  %xor1011 = xor i32 %xor1009, %shr1010
  %add1012 = add i32 %add1002, %xor1011
  %660 = load i32, i32* %w5, align 4
  %add1013 = add i32 %660, %add1012
  store i32 %add1013, i32* %w5, align 4
  %add1014 = add i32 %add992, %add1013
  store i32 %add1014, i32* %t1975, align 4
  %661 = load i32, i32* %d, align 4
  %shr1016 = lshr i32 %661, 2
  %662 = load i32, i32* %d, align 4
  %shl1017 = shl i32 %662, 30
  %or1018 = or i32 %shr1016, %shl1017
  %663 = load i32, i32* %d, align 4
  %shr1019 = lshr i32 %663, 13
  %664 = load i32, i32* %d, align 4
  %shl1020 = shl i32 %664, 19
  %or1021 = or i32 %shr1019, %shl1020
  %xor1022 = xor i32 %or1018, %or1021
  %665 = load i32, i32* %d, align 4
  %shr1023 = lshr i32 %665, 22
  %666 = load i32, i32* %d, align 4
  %shl1024 = shl i32 %666, 10
  %or1025 = or i32 %shr1023, %shl1024
  %xor1026 = xor i32 %xor1022, %or1025
  %667 = load i32, i32* %d, align 4
  %668 = load i32, i32* %e, align 4
  %and1027 = and i32 %667, %668
  %669 = load i32, i32* %f, align 4
  %670 = load i32, i32* %d, align 4
  %671 = load i32, i32* %e, align 4
  %or1028 = or i32 %670, %671
  %and1029 = and i32 %669, %or1028
  %or1030 = or i32 %and1027, %and1029
  %add1031 = add i32 %xor1026, %or1030
  store i32 %add1031, i32* %t21015, align 4
  %672 = load i32, i32* %t1975, align 4
  %673 = load i32, i32* %g, align 4
  %add1032 = add i32 %673, %672
  store i32 %add1032, i32* %g, align 4
  %674 = load i32, i32* %t1975, align 4
  %675 = load i32, i32* %t21015, align 4
  %add1033 = add i32 %674, %675
  store i32 %add1033, i32* %c, align 4
  br label %do.end1034

do.end1034:                                       ; preds = %do.body974
  br label %do.body1035

do.body1035:                                      ; preds = %do.end1034
  %676 = load i32, i32* %b, align 4
  %677 = load i32, i32* %g, align 4
  %shr1037 = lshr i32 %677, 6
  %678 = load i32, i32* %g, align 4
  %shl1038 = shl i32 %678, 26
  %or1039 = or i32 %shr1037, %shl1038
  %679 = load i32, i32* %g, align 4
  %shr1040 = lshr i32 %679, 11
  %680 = load i32, i32* %g, align 4
  %shl1041 = shl i32 %680, 21
  %or1042 = or i32 %shr1040, %shl1041
  %xor1043 = xor i32 %or1039, %or1042
  %681 = load i32, i32* %g, align 4
  %shr1044 = lshr i32 %681, 25
  %682 = load i32, i32* %g, align 4
  %shl1045 = shl i32 %682, 7
  %or1046 = or i32 %shr1044, %shl1045
  %xor1047 = xor i32 %xor1043, %or1046
  %add1048 = add i32 %676, %xor1047
  %683 = load i32, i32* %a, align 4
  %684 = load i32, i32* %g, align 4
  %685 = load i32, i32* %h, align 4
  %686 = load i32, i32* %a, align 4
  %xor1049 = xor i32 %685, %686
  %and1050 = and i32 %684, %xor1049
  %xor1051 = xor i32 %683, %and1050
  %add1052 = add i32 %add1048, %xor1051
  %add1053 = add i32 %add1052, 1555081692
  %687 = load i32, i32* %w4, align 4
  %shr1054 = lshr i32 %687, 17
  %688 = load i32, i32* %w4, align 4
  %shl1055 = shl i32 %688, 15
  %or1056 = or i32 %shr1054, %shl1055
  %689 = load i32, i32* %w4, align 4
  %shr1057 = lshr i32 %689, 19
  %690 = load i32, i32* %w4, align 4
  %shl1058 = shl i32 %690, 13
  %or1059 = or i32 %shr1057, %shl1058
  %xor1060 = xor i32 %or1056, %or1059
  %691 = load i32, i32* %w4, align 4
  %shr1061 = lshr i32 %691, 10
  %xor1062 = xor i32 %xor1060, %shr1061
  %692 = load i32, i32* %w15, align 4
  %add1063 = add i32 %xor1062, %692
  %693 = load i32, i32* %w7, align 4
  %shr1064 = lshr i32 %693, 7
  %694 = load i32, i32* %w7, align 4
  %shl1065 = shl i32 %694, 25
  %or1066 = or i32 %shr1064, %shl1065
  %695 = load i32, i32* %w7, align 4
  %shr1067 = lshr i32 %695, 18
  %696 = load i32, i32* %w7, align 4
  %shl1068 = shl i32 %696, 14
  %or1069 = or i32 %shr1067, %shl1068
  %xor1070 = xor i32 %or1066, %or1069
  %697 = load i32, i32* %w7, align 4
  %shr1071 = lshr i32 %697, 3
  %xor1072 = xor i32 %xor1070, %shr1071
  %add1073 = add i32 %add1063, %xor1072
  %698 = load i32, i32* %w6, align 4
  %add1074 = add i32 %698, %add1073
  store i32 %add1074, i32* %w6, align 4
  %add1075 = add i32 %add1053, %add1074
  store i32 %add1075, i32* %t11036, align 4
  %699 = load i32, i32* %c, align 4
  %shr1077 = lshr i32 %699, 2
  %700 = load i32, i32* %c, align 4
  %shl1078 = shl i32 %700, 30
  %or1079 = or i32 %shr1077, %shl1078
  %701 = load i32, i32* %c, align 4
  %shr1080 = lshr i32 %701, 13
  %702 = load i32, i32* %c, align 4
  %shl1081 = shl i32 %702, 19
  %or1082 = or i32 %shr1080, %shl1081
  %xor1083 = xor i32 %or1079, %or1082
  %703 = load i32, i32* %c, align 4
  %shr1084 = lshr i32 %703, 22
  %704 = load i32, i32* %c, align 4
  %shl1085 = shl i32 %704, 10
  %or1086 = or i32 %shr1084, %shl1085
  %xor1087 = xor i32 %xor1083, %or1086
  %705 = load i32, i32* %c, align 4
  %706 = load i32, i32* %d, align 4
  %and1088 = and i32 %705, %706
  %707 = load i32, i32* %e, align 4
  %708 = load i32, i32* %c, align 4
  %709 = load i32, i32* %d, align 4
  %or1089 = or i32 %708, %709
  %and1090 = and i32 %707, %or1089
  %or1091 = or i32 %and1088, %and1090
  %add1092 = add i32 %xor1087, %or1091
  store i32 %add1092, i32* %t21076, align 4
  %710 = load i32, i32* %t11036, align 4
  %711 = load i32, i32* %f, align 4
  %add1093 = add i32 %711, %710
  store i32 %add1093, i32* %f, align 4
  %712 = load i32, i32* %t11036, align 4
  %713 = load i32, i32* %t21076, align 4
  %add1094 = add i32 %712, %713
  store i32 %add1094, i32* %b, align 4
  br label %do.end1095

do.end1095:                                       ; preds = %do.body1035
  br label %do.body1096

do.body1096:                                      ; preds = %do.end1095
  %714 = load i32, i32* %a, align 4
  %715 = load i32, i32* %f, align 4
  %shr1098 = lshr i32 %715, 6
  %716 = load i32, i32* %f, align 4
  %shl1099 = shl i32 %716, 26
  %or1100 = or i32 %shr1098, %shl1099
  %717 = load i32, i32* %f, align 4
  %shr1101 = lshr i32 %717, 11
  %718 = load i32, i32* %f, align 4
  %shl1102 = shl i32 %718, 21
  %or1103 = or i32 %shr1101, %shl1102
  %xor1104 = xor i32 %or1100, %or1103
  %719 = load i32, i32* %f, align 4
  %shr1105 = lshr i32 %719, 25
  %720 = load i32, i32* %f, align 4
  %shl1106 = shl i32 %720, 7
  %or1107 = or i32 %shr1105, %shl1106
  %xor1108 = xor i32 %xor1104, %or1107
  %add1109 = add i32 %714, %xor1108
  %721 = load i32, i32* %h, align 4
  %722 = load i32, i32* %f, align 4
  %723 = load i32, i32* %g, align 4
  %724 = load i32, i32* %h, align 4
  %xor1110 = xor i32 %723, %724
  %and1111 = and i32 %722, %xor1110
  %xor1112 = xor i32 %721, %and1111
  %add1113 = add i32 %add1109, %xor1112
  %add1114 = add i32 %add1113, 1996064986
  %725 = load i32, i32* %w5, align 4
  %shr1115 = lshr i32 %725, 17
  %726 = load i32, i32* %w5, align 4
  %shl1116 = shl i32 %726, 15
  %or1117 = or i32 %shr1115, %shl1116
  %727 = load i32, i32* %w5, align 4
  %shr1118 = lshr i32 %727, 19
  %728 = load i32, i32* %w5, align 4
  %shl1119 = shl i32 %728, 13
  %or1120 = or i32 %shr1118, %shl1119
  %xor1121 = xor i32 %or1117, %or1120
  %729 = load i32, i32* %w5, align 4
  %shr1122 = lshr i32 %729, 10
  %xor1123 = xor i32 %xor1121, %shr1122
  %730 = load i32, i32* %w0, align 4
  %add1124 = add i32 %xor1123, %730
  %731 = load i32, i32* %w8, align 4
  %shr1125 = lshr i32 %731, 7
  %732 = load i32, i32* %w8, align 4
  %shl1126 = shl i32 %732, 25
  %or1127 = or i32 %shr1125, %shl1126
  %733 = load i32, i32* %w8, align 4
  %shr1128 = lshr i32 %733, 18
  %734 = load i32, i32* %w8, align 4
  %shl1129 = shl i32 %734, 14
  %or1130 = or i32 %shr1128, %shl1129
  %xor1131 = xor i32 %or1127, %or1130
  %735 = load i32, i32* %w8, align 4
  %shr1132 = lshr i32 %735, 3
  %xor1133 = xor i32 %xor1131, %shr1132
  %add1134 = add i32 %add1124, %xor1133
  %736 = load i32, i32* %w7, align 4
  %add1135 = add i32 %736, %add1134
  store i32 %add1135, i32* %w7, align 4
  %add1136 = add i32 %add1114, %add1135
  store i32 %add1136, i32* %t11097, align 4
  %737 = load i32, i32* %b, align 4
  %shr1138 = lshr i32 %737, 2
  %738 = load i32, i32* %b, align 4
  %shl1139 = shl i32 %738, 30
  %or1140 = or i32 %shr1138, %shl1139
  %739 = load i32, i32* %b, align 4
  %shr1141 = lshr i32 %739, 13
  %740 = load i32, i32* %b, align 4
  %shl1142 = shl i32 %740, 19
  %or1143 = or i32 %shr1141, %shl1142
  %xor1144 = xor i32 %or1140, %or1143
  %741 = load i32, i32* %b, align 4
  %shr1145 = lshr i32 %741, 22
  %742 = load i32, i32* %b, align 4
  %shl1146 = shl i32 %742, 10
  %or1147 = or i32 %shr1145, %shl1146
  %xor1148 = xor i32 %xor1144, %or1147
  %743 = load i32, i32* %b, align 4
  %744 = load i32, i32* %c, align 4
  %and1149 = and i32 %743, %744
  %745 = load i32, i32* %d, align 4
  %746 = load i32, i32* %b, align 4
  %747 = load i32, i32* %c, align 4
  %or1150 = or i32 %746, %747
  %and1151 = and i32 %745, %or1150
  %or1152 = or i32 %and1149, %and1151
  %add1153 = add i32 %xor1148, %or1152
  store i32 %add1153, i32* %t21137, align 4
  %748 = load i32, i32* %t11097, align 4
  %749 = load i32, i32* %e, align 4
  %add1154 = add i32 %749, %748
  store i32 %add1154, i32* %e, align 4
  %750 = load i32, i32* %t11097, align 4
  %751 = load i32, i32* %t21137, align 4
  %add1155 = add i32 %750, %751
  store i32 %add1155, i32* %a, align 4
  br label %do.end1156

do.end1156:                                       ; preds = %do.body1096
  br label %do.body1157

do.body1157:                                      ; preds = %do.end1156
  %752 = load i32, i32* %h, align 4
  %753 = load i32, i32* %e, align 4
  %shr1159 = lshr i32 %753, 6
  %754 = load i32, i32* %e, align 4
  %shl1160 = shl i32 %754, 26
  %or1161 = or i32 %shr1159, %shl1160
  %755 = load i32, i32* %e, align 4
  %shr1162 = lshr i32 %755, 11
  %756 = load i32, i32* %e, align 4
  %shl1163 = shl i32 %756, 21
  %or1164 = or i32 %shr1162, %shl1163
  %xor1165 = xor i32 %or1161, %or1164
  %757 = load i32, i32* %e, align 4
  %shr1166 = lshr i32 %757, 25
  %758 = load i32, i32* %e, align 4
  %shl1167 = shl i32 %758, 7
  %or1168 = or i32 %shr1166, %shl1167
  %xor1169 = xor i32 %xor1165, %or1168
  %add1170 = add i32 %752, %xor1169
  %759 = load i32, i32* %g, align 4
  %760 = load i32, i32* %e, align 4
  %761 = load i32, i32* %f, align 4
  %762 = load i32, i32* %g, align 4
  %xor1171 = xor i32 %761, %762
  %and1172 = and i32 %760, %xor1171
  %xor1173 = xor i32 %759, %and1172
  %add1174 = add i32 %add1170, %xor1173
  %add1175 = add i32 %add1174, -1740746414
  %763 = load i32, i32* %w6, align 4
  %shr1176 = lshr i32 %763, 17
  %764 = load i32, i32* %w6, align 4
  %shl1177 = shl i32 %764, 15
  %or1178 = or i32 %shr1176, %shl1177
  %765 = load i32, i32* %w6, align 4
  %shr1179 = lshr i32 %765, 19
  %766 = load i32, i32* %w6, align 4
  %shl1180 = shl i32 %766, 13
  %or1181 = or i32 %shr1179, %shl1180
  %xor1182 = xor i32 %or1178, %or1181
  %767 = load i32, i32* %w6, align 4
  %shr1183 = lshr i32 %767, 10
  %xor1184 = xor i32 %xor1182, %shr1183
  %768 = load i32, i32* %w1, align 4
  %add1185 = add i32 %xor1184, %768
  %769 = load i32, i32* %w9, align 4
  %shr1186 = lshr i32 %769, 7
  %770 = load i32, i32* %w9, align 4
  %shl1187 = shl i32 %770, 25
  %or1188 = or i32 %shr1186, %shl1187
  %771 = load i32, i32* %w9, align 4
  %shr1189 = lshr i32 %771, 18
  %772 = load i32, i32* %w9, align 4
  %shl1190 = shl i32 %772, 14
  %or1191 = or i32 %shr1189, %shl1190
  %xor1192 = xor i32 %or1188, %or1191
  %773 = load i32, i32* %w9, align 4
  %shr1193 = lshr i32 %773, 3
  %xor1194 = xor i32 %xor1192, %shr1193
  %add1195 = add i32 %add1185, %xor1194
  %774 = load i32, i32* %w8, align 4
  %add1196 = add i32 %774, %add1195
  store i32 %add1196, i32* %w8, align 4
  %add1197 = add i32 %add1175, %add1196
  store i32 %add1197, i32* %t11158, align 4
  %775 = load i32, i32* %a, align 4
  %shr1199 = lshr i32 %775, 2
  %776 = load i32, i32* %a, align 4
  %shl1200 = shl i32 %776, 30
  %or1201 = or i32 %shr1199, %shl1200
  %777 = load i32, i32* %a, align 4
  %shr1202 = lshr i32 %777, 13
  %778 = load i32, i32* %a, align 4
  %shl1203 = shl i32 %778, 19
  %or1204 = or i32 %shr1202, %shl1203
  %xor1205 = xor i32 %or1201, %or1204
  %779 = load i32, i32* %a, align 4
  %shr1206 = lshr i32 %779, 22
  %780 = load i32, i32* %a, align 4
  %shl1207 = shl i32 %780, 10
  %or1208 = or i32 %shr1206, %shl1207
  %xor1209 = xor i32 %xor1205, %or1208
  %781 = load i32, i32* %a, align 4
  %782 = load i32, i32* %b, align 4
  %and1210 = and i32 %781, %782
  %783 = load i32, i32* %c, align 4
  %784 = load i32, i32* %a, align 4
  %785 = load i32, i32* %b, align 4
  %or1211 = or i32 %784, %785
  %and1212 = and i32 %783, %or1211
  %or1213 = or i32 %and1210, %and1212
  %add1214 = add i32 %xor1209, %or1213
  store i32 %add1214, i32* %t21198, align 4
  %786 = load i32, i32* %t11158, align 4
  %787 = load i32, i32* %d, align 4
  %add1215 = add i32 %787, %786
  store i32 %add1215, i32* %d, align 4
  %788 = load i32, i32* %t11158, align 4
  %789 = load i32, i32* %t21198, align 4
  %add1216 = add i32 %788, %789
  store i32 %add1216, i32* %h, align 4
  br label %do.end1217

do.end1217:                                       ; preds = %do.body1157
  br label %do.body1218

do.body1218:                                      ; preds = %do.end1217
  %790 = load i32, i32* %g, align 4
  %791 = load i32, i32* %d, align 4
  %shr1220 = lshr i32 %791, 6
  %792 = load i32, i32* %d, align 4
  %shl1221 = shl i32 %792, 26
  %or1222 = or i32 %shr1220, %shl1221
  %793 = load i32, i32* %d, align 4
  %shr1223 = lshr i32 %793, 11
  %794 = load i32, i32* %d, align 4
  %shl1224 = shl i32 %794, 21
  %or1225 = or i32 %shr1223, %shl1224
  %xor1226 = xor i32 %or1222, %or1225
  %795 = load i32, i32* %d, align 4
  %shr1227 = lshr i32 %795, 25
  %796 = load i32, i32* %d, align 4
  %shl1228 = shl i32 %796, 7
  %or1229 = or i32 %shr1227, %shl1228
  %xor1230 = xor i32 %xor1226, %or1229
  %add1231 = add i32 %790, %xor1230
  %797 = load i32, i32* %f, align 4
  %798 = load i32, i32* %d, align 4
  %799 = load i32, i32* %e, align 4
  %800 = load i32, i32* %f, align 4
  %xor1232 = xor i32 %799, %800
  %and1233 = and i32 %798, %xor1232
  %xor1234 = xor i32 %797, %and1233
  %add1235 = add i32 %add1231, %xor1234
  %add1236 = add i32 %add1235, -1473132947
  %801 = load i32, i32* %w7, align 4
  %shr1237 = lshr i32 %801, 17
  %802 = load i32, i32* %w7, align 4
  %shl1238 = shl i32 %802, 15
  %or1239 = or i32 %shr1237, %shl1238
  %803 = load i32, i32* %w7, align 4
  %shr1240 = lshr i32 %803, 19
  %804 = load i32, i32* %w7, align 4
  %shl1241 = shl i32 %804, 13
  %or1242 = or i32 %shr1240, %shl1241
  %xor1243 = xor i32 %or1239, %or1242
  %805 = load i32, i32* %w7, align 4
  %shr1244 = lshr i32 %805, 10
  %xor1245 = xor i32 %xor1243, %shr1244
  %806 = load i32, i32* %w2, align 4
  %add1246 = add i32 %xor1245, %806
  %807 = load i32, i32* %w10, align 4
  %shr1247 = lshr i32 %807, 7
  %808 = load i32, i32* %w10, align 4
  %shl1248 = shl i32 %808, 25
  %or1249 = or i32 %shr1247, %shl1248
  %809 = load i32, i32* %w10, align 4
  %shr1250 = lshr i32 %809, 18
  %810 = load i32, i32* %w10, align 4
  %shl1251 = shl i32 %810, 14
  %or1252 = or i32 %shr1250, %shl1251
  %xor1253 = xor i32 %or1249, %or1252
  %811 = load i32, i32* %w10, align 4
  %shr1254 = lshr i32 %811, 3
  %xor1255 = xor i32 %xor1253, %shr1254
  %add1256 = add i32 %add1246, %xor1255
  %812 = load i32, i32* %w9, align 4
  %add1257 = add i32 %812, %add1256
  store i32 %add1257, i32* %w9, align 4
  %add1258 = add i32 %add1236, %add1257
  store i32 %add1258, i32* %t11219, align 4
  %813 = load i32, i32* %h, align 4
  %shr1260 = lshr i32 %813, 2
  %814 = load i32, i32* %h, align 4
  %shl1261 = shl i32 %814, 30
  %or1262 = or i32 %shr1260, %shl1261
  %815 = load i32, i32* %h, align 4
  %shr1263 = lshr i32 %815, 13
  %816 = load i32, i32* %h, align 4
  %shl1264 = shl i32 %816, 19
  %or1265 = or i32 %shr1263, %shl1264
  %xor1266 = xor i32 %or1262, %or1265
  %817 = load i32, i32* %h, align 4
  %shr1267 = lshr i32 %817, 22
  %818 = load i32, i32* %h, align 4
  %shl1268 = shl i32 %818, 10
  %or1269 = or i32 %shr1267, %shl1268
  %xor1270 = xor i32 %xor1266, %or1269
  %819 = load i32, i32* %h, align 4
  %820 = load i32, i32* %a, align 4
  %and1271 = and i32 %819, %820
  %821 = load i32, i32* %b, align 4
  %822 = load i32, i32* %h, align 4
  %823 = load i32, i32* %a, align 4
  %or1272 = or i32 %822, %823
  %and1273 = and i32 %821, %or1272
  %or1274 = or i32 %and1271, %and1273
  %add1275 = add i32 %xor1270, %or1274
  store i32 %add1275, i32* %t21259, align 4
  %824 = load i32, i32* %t11219, align 4
  %825 = load i32, i32* %c, align 4
  %add1276 = add i32 %825, %824
  store i32 %add1276, i32* %c, align 4
  %826 = load i32, i32* %t11219, align 4
  %827 = load i32, i32* %t21259, align 4
  %add1277 = add i32 %826, %827
  store i32 %add1277, i32* %g, align 4
  br label %do.end1278

do.end1278:                                       ; preds = %do.body1218
  br label %do.body1279

do.body1279:                                      ; preds = %do.end1278
  %828 = load i32, i32* %f, align 4
  %829 = load i32, i32* %c, align 4
  %shr1281 = lshr i32 %829, 6
  %830 = load i32, i32* %c, align 4
  %shl1282 = shl i32 %830, 26
  %or1283 = or i32 %shr1281, %shl1282
  %831 = load i32, i32* %c, align 4
  %shr1284 = lshr i32 %831, 11
  %832 = load i32, i32* %c, align 4
  %shl1285 = shl i32 %832, 21
  %or1286 = or i32 %shr1284, %shl1285
  %xor1287 = xor i32 %or1283, %or1286
  %833 = load i32, i32* %c, align 4
  %shr1288 = lshr i32 %833, 25
  %834 = load i32, i32* %c, align 4
  %shl1289 = shl i32 %834, 7
  %or1290 = or i32 %shr1288, %shl1289
  %xor1291 = xor i32 %xor1287, %or1290
  %add1292 = add i32 %828, %xor1291
  %835 = load i32, i32* %e, align 4
  %836 = load i32, i32* %c, align 4
  %837 = load i32, i32* %d, align 4
  %838 = load i32, i32* %e, align 4
  %xor1293 = xor i32 %837, %838
  %and1294 = and i32 %836, %xor1293
  %xor1295 = xor i32 %835, %and1294
  %add1296 = add i32 %add1292, %xor1295
  %add1297 = add i32 %add1296, -1341970488
  %839 = load i32, i32* %w8, align 4
  %shr1298 = lshr i32 %839, 17
  %840 = load i32, i32* %w8, align 4
  %shl1299 = shl i32 %840, 15
  %or1300 = or i32 %shr1298, %shl1299
  %841 = load i32, i32* %w8, align 4
  %shr1301 = lshr i32 %841, 19
  %842 = load i32, i32* %w8, align 4
  %shl1302 = shl i32 %842, 13
  %or1303 = or i32 %shr1301, %shl1302
  %xor1304 = xor i32 %or1300, %or1303
  %843 = load i32, i32* %w8, align 4
  %shr1305 = lshr i32 %843, 10
  %xor1306 = xor i32 %xor1304, %shr1305
  %844 = load i32, i32* %w3, align 4
  %add1307 = add i32 %xor1306, %844
  %845 = load i32, i32* %w11, align 4
  %shr1308 = lshr i32 %845, 7
  %846 = load i32, i32* %w11, align 4
  %shl1309 = shl i32 %846, 25
  %or1310 = or i32 %shr1308, %shl1309
  %847 = load i32, i32* %w11, align 4
  %shr1311 = lshr i32 %847, 18
  %848 = load i32, i32* %w11, align 4
  %shl1312 = shl i32 %848, 14
  %or1313 = or i32 %shr1311, %shl1312
  %xor1314 = xor i32 %or1310, %or1313
  %849 = load i32, i32* %w11, align 4
  %shr1315 = lshr i32 %849, 3
  %xor1316 = xor i32 %xor1314, %shr1315
  %add1317 = add i32 %add1307, %xor1316
  %850 = load i32, i32* %w10, align 4
  %add1318 = add i32 %850, %add1317
  store i32 %add1318, i32* %w10, align 4
  %add1319 = add i32 %add1297, %add1318
  store i32 %add1319, i32* %t11280, align 4
  %851 = load i32, i32* %g, align 4
  %shr1321 = lshr i32 %851, 2
  %852 = load i32, i32* %g, align 4
  %shl1322 = shl i32 %852, 30
  %or1323 = or i32 %shr1321, %shl1322
  %853 = load i32, i32* %g, align 4
  %shr1324 = lshr i32 %853, 13
  %854 = load i32, i32* %g, align 4
  %shl1325 = shl i32 %854, 19
  %or1326 = or i32 %shr1324, %shl1325
  %xor1327 = xor i32 %or1323, %or1326
  %855 = load i32, i32* %g, align 4
  %shr1328 = lshr i32 %855, 22
  %856 = load i32, i32* %g, align 4
  %shl1329 = shl i32 %856, 10
  %or1330 = or i32 %shr1328, %shl1329
  %xor1331 = xor i32 %xor1327, %or1330
  %857 = load i32, i32* %g, align 4
  %858 = load i32, i32* %h, align 4
  %and1332 = and i32 %857, %858
  %859 = load i32, i32* %a, align 4
  %860 = load i32, i32* %g, align 4
  %861 = load i32, i32* %h, align 4
  %or1333 = or i32 %860, %861
  %and1334 = and i32 %859, %or1333
  %or1335 = or i32 %and1332, %and1334
  %add1336 = add i32 %xor1331, %or1335
  store i32 %add1336, i32* %t21320, align 4
  %862 = load i32, i32* %t11280, align 4
  %863 = load i32, i32* %b, align 4
  %add1337 = add i32 %863, %862
  store i32 %add1337, i32* %b, align 4
  %864 = load i32, i32* %t11280, align 4
  %865 = load i32, i32* %t21320, align 4
  %add1338 = add i32 %864, %865
  store i32 %add1338, i32* %f, align 4
  br label %do.end1339

do.end1339:                                       ; preds = %do.body1279
  br label %do.body1340

do.body1340:                                      ; preds = %do.end1339
  %866 = load i32, i32* %e, align 4
  %867 = load i32, i32* %b, align 4
  %shr1342 = lshr i32 %867, 6
  %868 = load i32, i32* %b, align 4
  %shl1343 = shl i32 %868, 26
  %or1344 = or i32 %shr1342, %shl1343
  %869 = load i32, i32* %b, align 4
  %shr1345 = lshr i32 %869, 11
  %870 = load i32, i32* %b, align 4
  %shl1346 = shl i32 %870, 21
  %or1347 = or i32 %shr1345, %shl1346
  %xor1348 = xor i32 %or1344, %or1347
  %871 = load i32, i32* %b, align 4
  %shr1349 = lshr i32 %871, 25
  %872 = load i32, i32* %b, align 4
  %shl1350 = shl i32 %872, 7
  %or1351 = or i32 %shr1349, %shl1350
  %xor1352 = xor i32 %xor1348, %or1351
  %add1353 = add i32 %866, %xor1352
  %873 = load i32, i32* %d, align 4
  %874 = load i32, i32* %b, align 4
  %875 = load i32, i32* %c, align 4
  %876 = load i32, i32* %d, align 4
  %xor1354 = xor i32 %875, %876
  %and1355 = and i32 %874, %xor1354
  %xor1356 = xor i32 %873, %and1355
  %add1357 = add i32 %add1353, %xor1356
  %add1358 = add i32 %add1357, -1084653625
  %877 = load i32, i32* %w9, align 4
  %shr1359 = lshr i32 %877, 17
  %878 = load i32, i32* %w9, align 4
  %shl1360 = shl i32 %878, 15
  %or1361 = or i32 %shr1359, %shl1360
  %879 = load i32, i32* %w9, align 4
  %shr1362 = lshr i32 %879, 19
  %880 = load i32, i32* %w9, align 4
  %shl1363 = shl i32 %880, 13
  %or1364 = or i32 %shr1362, %shl1363
  %xor1365 = xor i32 %or1361, %or1364
  %881 = load i32, i32* %w9, align 4
  %shr1366 = lshr i32 %881, 10
  %xor1367 = xor i32 %xor1365, %shr1366
  %882 = load i32, i32* %w4, align 4
  %add1368 = add i32 %xor1367, %882
  %883 = load i32, i32* %w12, align 4
  %shr1369 = lshr i32 %883, 7
  %884 = load i32, i32* %w12, align 4
  %shl1370 = shl i32 %884, 25
  %or1371 = or i32 %shr1369, %shl1370
  %885 = load i32, i32* %w12, align 4
  %shr1372 = lshr i32 %885, 18
  %886 = load i32, i32* %w12, align 4
  %shl1373 = shl i32 %886, 14
  %or1374 = or i32 %shr1372, %shl1373
  %xor1375 = xor i32 %or1371, %or1374
  %887 = load i32, i32* %w12, align 4
  %shr1376 = lshr i32 %887, 3
  %xor1377 = xor i32 %xor1375, %shr1376
  %add1378 = add i32 %add1368, %xor1377
  %888 = load i32, i32* %w11, align 4
  %add1379 = add i32 %888, %add1378
  store i32 %add1379, i32* %w11, align 4
  %add1380 = add i32 %add1358, %add1379
  store i32 %add1380, i32* %t11341, align 4
  %889 = load i32, i32* %f, align 4
  %shr1382 = lshr i32 %889, 2
  %890 = load i32, i32* %f, align 4
  %shl1383 = shl i32 %890, 30
  %or1384 = or i32 %shr1382, %shl1383
  %891 = load i32, i32* %f, align 4
  %shr1385 = lshr i32 %891, 13
  %892 = load i32, i32* %f, align 4
  %shl1386 = shl i32 %892, 19
  %or1387 = or i32 %shr1385, %shl1386
  %xor1388 = xor i32 %or1384, %or1387
  %893 = load i32, i32* %f, align 4
  %shr1389 = lshr i32 %893, 22
  %894 = load i32, i32* %f, align 4
  %shl1390 = shl i32 %894, 10
  %or1391 = or i32 %shr1389, %shl1390
  %xor1392 = xor i32 %xor1388, %or1391
  %895 = load i32, i32* %f, align 4
  %896 = load i32, i32* %g, align 4
  %and1393 = and i32 %895, %896
  %897 = load i32, i32* %h, align 4
  %898 = load i32, i32* %f, align 4
  %899 = load i32, i32* %g, align 4
  %or1394 = or i32 %898, %899
  %and1395 = and i32 %897, %or1394
  %or1396 = or i32 %and1393, %and1395
  %add1397 = add i32 %xor1392, %or1396
  store i32 %add1397, i32* %t21381, align 4
  %900 = load i32, i32* %t11341, align 4
  %901 = load i32, i32* %a, align 4
  %add1398 = add i32 %901, %900
  store i32 %add1398, i32* %a, align 4
  %902 = load i32, i32* %t11341, align 4
  %903 = load i32, i32* %t21381, align 4
  %add1399 = add i32 %902, %903
  store i32 %add1399, i32* %e, align 4
  br label %do.end1400

do.end1400:                                       ; preds = %do.body1340
  br label %do.body1401

do.body1401:                                      ; preds = %do.end1400
  %904 = load i32, i32* %d, align 4
  %905 = load i32, i32* %a, align 4
  %shr1403 = lshr i32 %905, 6
  %906 = load i32, i32* %a, align 4
  %shl1404 = shl i32 %906, 26
  %or1405 = or i32 %shr1403, %shl1404
  %907 = load i32, i32* %a, align 4
  %shr1406 = lshr i32 %907, 11
  %908 = load i32, i32* %a, align 4
  %shl1407 = shl i32 %908, 21
  %or1408 = or i32 %shr1406, %shl1407
  %xor1409 = xor i32 %or1405, %or1408
  %909 = load i32, i32* %a, align 4
  %shr1410 = lshr i32 %909, 25
  %910 = load i32, i32* %a, align 4
  %shl1411 = shl i32 %910, 7
  %or1412 = or i32 %shr1410, %shl1411
  %xor1413 = xor i32 %xor1409, %or1412
  %add1414 = add i32 %904, %xor1413
  %911 = load i32, i32* %c, align 4
  %912 = load i32, i32* %a, align 4
  %913 = load i32, i32* %b, align 4
  %914 = load i32, i32* %c, align 4
  %xor1415 = xor i32 %913, %914
  %and1416 = and i32 %912, %xor1415
  %xor1417 = xor i32 %911, %and1416
  %add1418 = add i32 %add1414, %xor1417
  %add1419 = add i32 %add1418, -958395405
  %915 = load i32, i32* %w10, align 4
  %shr1420 = lshr i32 %915, 17
  %916 = load i32, i32* %w10, align 4
  %shl1421 = shl i32 %916, 15
  %or1422 = or i32 %shr1420, %shl1421
  %917 = load i32, i32* %w10, align 4
  %shr1423 = lshr i32 %917, 19
  %918 = load i32, i32* %w10, align 4
  %shl1424 = shl i32 %918, 13
  %or1425 = or i32 %shr1423, %shl1424
  %xor1426 = xor i32 %or1422, %or1425
  %919 = load i32, i32* %w10, align 4
  %shr1427 = lshr i32 %919, 10
  %xor1428 = xor i32 %xor1426, %shr1427
  %920 = load i32, i32* %w5, align 4
  %add1429 = add i32 %xor1428, %920
  %921 = load i32, i32* %w13, align 4
  %shr1430 = lshr i32 %921, 7
  %922 = load i32, i32* %w13, align 4
  %shl1431 = shl i32 %922, 25
  %or1432 = or i32 %shr1430, %shl1431
  %923 = load i32, i32* %w13, align 4
  %shr1433 = lshr i32 %923, 18
  %924 = load i32, i32* %w13, align 4
  %shl1434 = shl i32 %924, 14
  %or1435 = or i32 %shr1433, %shl1434
  %xor1436 = xor i32 %or1432, %or1435
  %925 = load i32, i32* %w13, align 4
  %shr1437 = lshr i32 %925, 3
  %xor1438 = xor i32 %xor1436, %shr1437
  %add1439 = add i32 %add1429, %xor1438
  %926 = load i32, i32* %w12, align 4
  %add1440 = add i32 %926, %add1439
  store i32 %add1440, i32* %w12, align 4
  %add1441 = add i32 %add1419, %add1440
  store i32 %add1441, i32* %t11402, align 4
  %927 = load i32, i32* %e, align 4
  %shr1443 = lshr i32 %927, 2
  %928 = load i32, i32* %e, align 4
  %shl1444 = shl i32 %928, 30
  %or1445 = or i32 %shr1443, %shl1444
  %929 = load i32, i32* %e, align 4
  %shr1446 = lshr i32 %929, 13
  %930 = load i32, i32* %e, align 4
  %shl1447 = shl i32 %930, 19
  %or1448 = or i32 %shr1446, %shl1447
  %xor1449 = xor i32 %or1445, %or1448
  %931 = load i32, i32* %e, align 4
  %shr1450 = lshr i32 %931, 22
  %932 = load i32, i32* %e, align 4
  %shl1451 = shl i32 %932, 10
  %or1452 = or i32 %shr1450, %shl1451
  %xor1453 = xor i32 %xor1449, %or1452
  %933 = load i32, i32* %e, align 4
  %934 = load i32, i32* %f, align 4
  %and1454 = and i32 %933, %934
  %935 = load i32, i32* %g, align 4
  %936 = load i32, i32* %e, align 4
  %937 = load i32, i32* %f, align 4
  %or1455 = or i32 %936, %937
  %and1456 = and i32 %935, %or1455
  %or1457 = or i32 %and1454, %and1456
  %add1458 = add i32 %xor1453, %or1457
  store i32 %add1458, i32* %t21442, align 4
  %938 = load i32, i32* %t11402, align 4
  %939 = load i32, i32* %h, align 4
  %add1459 = add i32 %939, %938
  store i32 %add1459, i32* %h, align 4
  %940 = load i32, i32* %t11402, align 4
  %941 = load i32, i32* %t21442, align 4
  %add1460 = add i32 %940, %941
  store i32 %add1460, i32* %d, align 4
  br label %do.end1461

do.end1461:                                       ; preds = %do.body1401
  br label %do.body1462

do.body1462:                                      ; preds = %do.end1461
  %942 = load i32, i32* %c, align 4
  %943 = load i32, i32* %h, align 4
  %shr1464 = lshr i32 %943, 6
  %944 = load i32, i32* %h, align 4
  %shl1465 = shl i32 %944, 26
  %or1466 = or i32 %shr1464, %shl1465
  %945 = load i32, i32* %h, align 4
  %shr1467 = lshr i32 %945, 11
  %946 = load i32, i32* %h, align 4
  %shl1468 = shl i32 %946, 21
  %or1469 = or i32 %shr1467, %shl1468
  %xor1470 = xor i32 %or1466, %or1469
  %947 = load i32, i32* %h, align 4
  %shr1471 = lshr i32 %947, 25
  %948 = load i32, i32* %h, align 4
  %shl1472 = shl i32 %948, 7
  %or1473 = or i32 %shr1471, %shl1472
  %xor1474 = xor i32 %xor1470, %or1473
  %add1475 = add i32 %942, %xor1474
  %949 = load i32, i32* %b, align 4
  %950 = load i32, i32* %h, align 4
  %951 = load i32, i32* %a, align 4
  %952 = load i32, i32* %b, align 4
  %xor1476 = xor i32 %951, %952
  %and1477 = and i32 %950, %xor1476
  %xor1478 = xor i32 %949, %and1477
  %add1479 = add i32 %add1475, %xor1478
  %add1480 = add i32 %add1479, -710438585
  %953 = load i32, i32* %w11, align 4
  %shr1481 = lshr i32 %953, 17
  %954 = load i32, i32* %w11, align 4
  %shl1482 = shl i32 %954, 15
  %or1483 = or i32 %shr1481, %shl1482
  %955 = load i32, i32* %w11, align 4
  %shr1484 = lshr i32 %955, 19
  %956 = load i32, i32* %w11, align 4
  %shl1485 = shl i32 %956, 13
  %or1486 = or i32 %shr1484, %shl1485
  %xor1487 = xor i32 %or1483, %or1486
  %957 = load i32, i32* %w11, align 4
  %shr1488 = lshr i32 %957, 10
  %xor1489 = xor i32 %xor1487, %shr1488
  %958 = load i32, i32* %w6, align 4
  %add1490 = add i32 %xor1489, %958
  %959 = load i32, i32* %w14, align 4
  %shr1491 = lshr i32 %959, 7
  %960 = load i32, i32* %w14, align 4
  %shl1492 = shl i32 %960, 25
  %or1493 = or i32 %shr1491, %shl1492
  %961 = load i32, i32* %w14, align 4
  %shr1494 = lshr i32 %961, 18
  %962 = load i32, i32* %w14, align 4
  %shl1495 = shl i32 %962, 14
  %or1496 = or i32 %shr1494, %shl1495
  %xor1497 = xor i32 %or1493, %or1496
  %963 = load i32, i32* %w14, align 4
  %shr1498 = lshr i32 %963, 3
  %xor1499 = xor i32 %xor1497, %shr1498
  %add1500 = add i32 %add1490, %xor1499
  %964 = load i32, i32* %w13, align 4
  %add1501 = add i32 %964, %add1500
  store i32 %add1501, i32* %w13, align 4
  %add1502 = add i32 %add1480, %add1501
  store i32 %add1502, i32* %t11463, align 4
  %965 = load i32, i32* %d, align 4
  %shr1504 = lshr i32 %965, 2
  %966 = load i32, i32* %d, align 4
  %shl1505 = shl i32 %966, 30
  %or1506 = or i32 %shr1504, %shl1505
  %967 = load i32, i32* %d, align 4
  %shr1507 = lshr i32 %967, 13
  %968 = load i32, i32* %d, align 4
  %shl1508 = shl i32 %968, 19
  %or1509 = or i32 %shr1507, %shl1508
  %xor1510 = xor i32 %or1506, %or1509
  %969 = load i32, i32* %d, align 4
  %shr1511 = lshr i32 %969, 22
  %970 = load i32, i32* %d, align 4
  %shl1512 = shl i32 %970, 10
  %or1513 = or i32 %shr1511, %shl1512
  %xor1514 = xor i32 %xor1510, %or1513
  %971 = load i32, i32* %d, align 4
  %972 = load i32, i32* %e, align 4
  %and1515 = and i32 %971, %972
  %973 = load i32, i32* %f, align 4
  %974 = load i32, i32* %d, align 4
  %975 = load i32, i32* %e, align 4
  %or1516 = or i32 %974, %975
  %and1517 = and i32 %973, %or1516
  %or1518 = or i32 %and1515, %and1517
  %add1519 = add i32 %xor1514, %or1518
  store i32 %add1519, i32* %t21503, align 4
  %976 = load i32, i32* %t11463, align 4
  %977 = load i32, i32* %g, align 4
  %add1520 = add i32 %977, %976
  store i32 %add1520, i32* %g, align 4
  %978 = load i32, i32* %t11463, align 4
  %979 = load i32, i32* %t21503, align 4
  %add1521 = add i32 %978, %979
  store i32 %add1521, i32* %c, align 4
  br label %do.end1522

do.end1522:                                       ; preds = %do.body1462
  br label %do.body1523

do.body1523:                                      ; preds = %do.end1522
  %980 = load i32, i32* %b, align 4
  %981 = load i32, i32* %g, align 4
  %shr1525 = lshr i32 %981, 6
  %982 = load i32, i32* %g, align 4
  %shl1526 = shl i32 %982, 26
  %or1527 = or i32 %shr1525, %shl1526
  %983 = load i32, i32* %g, align 4
  %shr1528 = lshr i32 %983, 11
  %984 = load i32, i32* %g, align 4
  %shl1529 = shl i32 %984, 21
  %or1530 = or i32 %shr1528, %shl1529
  %xor1531 = xor i32 %or1527, %or1530
  %985 = load i32, i32* %g, align 4
  %shr1532 = lshr i32 %985, 25
  %986 = load i32, i32* %g, align 4
  %shl1533 = shl i32 %986, 7
  %or1534 = or i32 %shr1532, %shl1533
  %xor1535 = xor i32 %xor1531, %or1534
  %add1536 = add i32 %980, %xor1535
  %987 = load i32, i32* %a, align 4
  %988 = load i32, i32* %g, align 4
  %989 = load i32, i32* %h, align 4
  %990 = load i32, i32* %a, align 4
  %xor1537 = xor i32 %989, %990
  %and1538 = and i32 %988, %xor1537
  %xor1539 = xor i32 %987, %and1538
  %add1540 = add i32 %add1536, %xor1539
  %add1541 = add i32 %add1540, 113926993
  %991 = load i32, i32* %w12, align 4
  %shr1542 = lshr i32 %991, 17
  %992 = load i32, i32* %w12, align 4
  %shl1543 = shl i32 %992, 15
  %or1544 = or i32 %shr1542, %shl1543
  %993 = load i32, i32* %w12, align 4
  %shr1545 = lshr i32 %993, 19
  %994 = load i32, i32* %w12, align 4
  %shl1546 = shl i32 %994, 13
  %or1547 = or i32 %shr1545, %shl1546
  %xor1548 = xor i32 %or1544, %or1547
  %995 = load i32, i32* %w12, align 4
  %shr1549 = lshr i32 %995, 10
  %xor1550 = xor i32 %xor1548, %shr1549
  %996 = load i32, i32* %w7, align 4
  %add1551 = add i32 %xor1550, %996
  %997 = load i32, i32* %w15, align 4
  %shr1552 = lshr i32 %997, 7
  %998 = load i32, i32* %w15, align 4
  %shl1553 = shl i32 %998, 25
  %or1554 = or i32 %shr1552, %shl1553
  %999 = load i32, i32* %w15, align 4
  %shr1555 = lshr i32 %999, 18
  %1000 = load i32, i32* %w15, align 4
  %shl1556 = shl i32 %1000, 14
  %or1557 = or i32 %shr1555, %shl1556
  %xor1558 = xor i32 %or1554, %or1557
  %1001 = load i32, i32* %w15, align 4
  %shr1559 = lshr i32 %1001, 3
  %xor1560 = xor i32 %xor1558, %shr1559
  %add1561 = add i32 %add1551, %xor1560
  %1002 = load i32, i32* %w14, align 4
  %add1562 = add i32 %1002, %add1561
  store i32 %add1562, i32* %w14, align 4
  %add1563 = add i32 %add1541, %add1562
  store i32 %add1563, i32* %t11524, align 4
  %1003 = load i32, i32* %c, align 4
  %shr1565 = lshr i32 %1003, 2
  %1004 = load i32, i32* %c, align 4
  %shl1566 = shl i32 %1004, 30
  %or1567 = or i32 %shr1565, %shl1566
  %1005 = load i32, i32* %c, align 4
  %shr1568 = lshr i32 %1005, 13
  %1006 = load i32, i32* %c, align 4
  %shl1569 = shl i32 %1006, 19
  %or1570 = or i32 %shr1568, %shl1569
  %xor1571 = xor i32 %or1567, %or1570
  %1007 = load i32, i32* %c, align 4
  %shr1572 = lshr i32 %1007, 22
  %1008 = load i32, i32* %c, align 4
  %shl1573 = shl i32 %1008, 10
  %or1574 = or i32 %shr1572, %shl1573
  %xor1575 = xor i32 %xor1571, %or1574
  %1009 = load i32, i32* %c, align 4
  %1010 = load i32, i32* %d, align 4
  %and1576 = and i32 %1009, %1010
  %1011 = load i32, i32* %e, align 4
  %1012 = load i32, i32* %c, align 4
  %1013 = load i32, i32* %d, align 4
  %or1577 = or i32 %1012, %1013
  %and1578 = and i32 %1011, %or1577
  %or1579 = or i32 %and1576, %and1578
  %add1580 = add i32 %xor1575, %or1579
  store i32 %add1580, i32* %t21564, align 4
  %1014 = load i32, i32* %t11524, align 4
  %1015 = load i32, i32* %f, align 4
  %add1581 = add i32 %1015, %1014
  store i32 %add1581, i32* %f, align 4
  %1016 = load i32, i32* %t11524, align 4
  %1017 = load i32, i32* %t21564, align 4
  %add1582 = add i32 %1016, %1017
  store i32 %add1582, i32* %b, align 4
  br label %do.end1583

do.end1583:                                       ; preds = %do.body1523
  br label %do.body1584

do.body1584:                                      ; preds = %do.end1583
  %1018 = load i32, i32* %a, align 4
  %1019 = load i32, i32* %f, align 4
  %shr1586 = lshr i32 %1019, 6
  %1020 = load i32, i32* %f, align 4
  %shl1587 = shl i32 %1020, 26
  %or1588 = or i32 %shr1586, %shl1587
  %1021 = load i32, i32* %f, align 4
  %shr1589 = lshr i32 %1021, 11
  %1022 = load i32, i32* %f, align 4
  %shl1590 = shl i32 %1022, 21
  %or1591 = or i32 %shr1589, %shl1590
  %xor1592 = xor i32 %or1588, %or1591
  %1023 = load i32, i32* %f, align 4
  %shr1593 = lshr i32 %1023, 25
  %1024 = load i32, i32* %f, align 4
  %shl1594 = shl i32 %1024, 7
  %or1595 = or i32 %shr1593, %shl1594
  %xor1596 = xor i32 %xor1592, %or1595
  %add1597 = add i32 %1018, %xor1596
  %1025 = load i32, i32* %h, align 4
  %1026 = load i32, i32* %f, align 4
  %1027 = load i32, i32* %g, align 4
  %1028 = load i32, i32* %h, align 4
  %xor1598 = xor i32 %1027, %1028
  %and1599 = and i32 %1026, %xor1598
  %xor1600 = xor i32 %1025, %and1599
  %add1601 = add i32 %add1597, %xor1600
  %add1602 = add i32 %add1601, 338241895
  %1029 = load i32, i32* %w13, align 4
  %shr1603 = lshr i32 %1029, 17
  %1030 = load i32, i32* %w13, align 4
  %shl1604 = shl i32 %1030, 15
  %or1605 = or i32 %shr1603, %shl1604
  %1031 = load i32, i32* %w13, align 4
  %shr1606 = lshr i32 %1031, 19
  %1032 = load i32, i32* %w13, align 4
  %shl1607 = shl i32 %1032, 13
  %or1608 = or i32 %shr1606, %shl1607
  %xor1609 = xor i32 %or1605, %or1608
  %1033 = load i32, i32* %w13, align 4
  %shr1610 = lshr i32 %1033, 10
  %xor1611 = xor i32 %xor1609, %shr1610
  %1034 = load i32, i32* %w8, align 4
  %add1612 = add i32 %xor1611, %1034
  %1035 = load i32, i32* %w0, align 4
  %shr1613 = lshr i32 %1035, 7
  %1036 = load i32, i32* %w0, align 4
  %shl1614 = shl i32 %1036, 25
  %or1615 = or i32 %shr1613, %shl1614
  %1037 = load i32, i32* %w0, align 4
  %shr1616 = lshr i32 %1037, 18
  %1038 = load i32, i32* %w0, align 4
  %shl1617 = shl i32 %1038, 14
  %or1618 = or i32 %shr1616, %shl1617
  %xor1619 = xor i32 %or1615, %or1618
  %1039 = load i32, i32* %w0, align 4
  %shr1620 = lshr i32 %1039, 3
  %xor1621 = xor i32 %xor1619, %shr1620
  %add1622 = add i32 %add1612, %xor1621
  %1040 = load i32, i32* %w15, align 4
  %add1623 = add i32 %1040, %add1622
  store i32 %add1623, i32* %w15, align 4
  %add1624 = add i32 %add1602, %add1623
  store i32 %add1624, i32* %t11585, align 4
  %1041 = load i32, i32* %b, align 4
  %shr1626 = lshr i32 %1041, 2
  %1042 = load i32, i32* %b, align 4
  %shl1627 = shl i32 %1042, 30
  %or1628 = or i32 %shr1626, %shl1627
  %1043 = load i32, i32* %b, align 4
  %shr1629 = lshr i32 %1043, 13
  %1044 = load i32, i32* %b, align 4
  %shl1630 = shl i32 %1044, 19
  %or1631 = or i32 %shr1629, %shl1630
  %xor1632 = xor i32 %or1628, %or1631
  %1045 = load i32, i32* %b, align 4
  %shr1633 = lshr i32 %1045, 22
  %1046 = load i32, i32* %b, align 4
  %shl1634 = shl i32 %1046, 10
  %or1635 = or i32 %shr1633, %shl1634
  %xor1636 = xor i32 %xor1632, %or1635
  %1047 = load i32, i32* %b, align 4
  %1048 = load i32, i32* %c, align 4
  %and1637 = and i32 %1047, %1048
  %1049 = load i32, i32* %d, align 4
  %1050 = load i32, i32* %b, align 4
  %1051 = load i32, i32* %c, align 4
  %or1638 = or i32 %1050, %1051
  %and1639 = and i32 %1049, %or1638
  %or1640 = or i32 %and1637, %and1639
  %add1641 = add i32 %xor1636, %or1640
  store i32 %add1641, i32* %t21625, align 4
  %1052 = load i32, i32* %t11585, align 4
  %1053 = load i32, i32* %e, align 4
  %add1642 = add i32 %1053, %1052
  store i32 %add1642, i32* %e, align 4
  %1054 = load i32, i32* %t11585, align 4
  %1055 = load i32, i32* %t21625, align 4
  %add1643 = add i32 %1054, %1055
  store i32 %add1643, i32* %a, align 4
  br label %do.end1644

do.end1644:                                       ; preds = %do.body1584
  br label %do.body1645

do.body1645:                                      ; preds = %do.end1644
  %1056 = load i32, i32* %h, align 4
  %1057 = load i32, i32* %e, align 4
  %shr1647 = lshr i32 %1057, 6
  %1058 = load i32, i32* %e, align 4
  %shl1648 = shl i32 %1058, 26
  %or1649 = or i32 %shr1647, %shl1648
  %1059 = load i32, i32* %e, align 4
  %shr1650 = lshr i32 %1059, 11
  %1060 = load i32, i32* %e, align 4
  %shl1651 = shl i32 %1060, 21
  %or1652 = or i32 %shr1650, %shl1651
  %xor1653 = xor i32 %or1649, %or1652
  %1061 = load i32, i32* %e, align 4
  %shr1654 = lshr i32 %1061, 25
  %1062 = load i32, i32* %e, align 4
  %shl1655 = shl i32 %1062, 7
  %or1656 = or i32 %shr1654, %shl1655
  %xor1657 = xor i32 %xor1653, %or1656
  %add1658 = add i32 %1056, %xor1657
  %1063 = load i32, i32* %g, align 4
  %1064 = load i32, i32* %e, align 4
  %1065 = load i32, i32* %f, align 4
  %1066 = load i32, i32* %g, align 4
  %xor1659 = xor i32 %1065, %1066
  %and1660 = and i32 %1064, %xor1659
  %xor1661 = xor i32 %1063, %and1660
  %add1662 = add i32 %add1658, %xor1661
  %add1663 = add i32 %add1662, 666307205
  %1067 = load i32, i32* %w14, align 4
  %shr1664 = lshr i32 %1067, 17
  %1068 = load i32, i32* %w14, align 4
  %shl1665 = shl i32 %1068, 15
  %or1666 = or i32 %shr1664, %shl1665
  %1069 = load i32, i32* %w14, align 4
  %shr1667 = lshr i32 %1069, 19
  %1070 = load i32, i32* %w14, align 4
  %shl1668 = shl i32 %1070, 13
  %or1669 = or i32 %shr1667, %shl1668
  %xor1670 = xor i32 %or1666, %or1669
  %1071 = load i32, i32* %w14, align 4
  %shr1671 = lshr i32 %1071, 10
  %xor1672 = xor i32 %xor1670, %shr1671
  %1072 = load i32, i32* %w9, align 4
  %add1673 = add i32 %xor1672, %1072
  %1073 = load i32, i32* %w1, align 4
  %shr1674 = lshr i32 %1073, 7
  %1074 = load i32, i32* %w1, align 4
  %shl1675 = shl i32 %1074, 25
  %or1676 = or i32 %shr1674, %shl1675
  %1075 = load i32, i32* %w1, align 4
  %shr1677 = lshr i32 %1075, 18
  %1076 = load i32, i32* %w1, align 4
  %shl1678 = shl i32 %1076, 14
  %or1679 = or i32 %shr1677, %shl1678
  %xor1680 = xor i32 %or1676, %or1679
  %1077 = load i32, i32* %w1, align 4
  %shr1681 = lshr i32 %1077, 3
  %xor1682 = xor i32 %xor1680, %shr1681
  %add1683 = add i32 %add1673, %xor1682
  %1078 = load i32, i32* %w0, align 4
  %add1684 = add i32 %1078, %add1683
  store i32 %add1684, i32* %w0, align 4
  %add1685 = add i32 %add1663, %add1684
  store i32 %add1685, i32* %t11646, align 4
  %1079 = load i32, i32* %a, align 4
  %shr1687 = lshr i32 %1079, 2
  %1080 = load i32, i32* %a, align 4
  %shl1688 = shl i32 %1080, 30
  %or1689 = or i32 %shr1687, %shl1688
  %1081 = load i32, i32* %a, align 4
  %shr1690 = lshr i32 %1081, 13
  %1082 = load i32, i32* %a, align 4
  %shl1691 = shl i32 %1082, 19
  %or1692 = or i32 %shr1690, %shl1691
  %xor1693 = xor i32 %or1689, %or1692
  %1083 = load i32, i32* %a, align 4
  %shr1694 = lshr i32 %1083, 22
  %1084 = load i32, i32* %a, align 4
  %shl1695 = shl i32 %1084, 10
  %or1696 = or i32 %shr1694, %shl1695
  %xor1697 = xor i32 %xor1693, %or1696
  %1085 = load i32, i32* %a, align 4
  %1086 = load i32, i32* %b, align 4
  %and1698 = and i32 %1085, %1086
  %1087 = load i32, i32* %c, align 4
  %1088 = load i32, i32* %a, align 4
  %1089 = load i32, i32* %b, align 4
  %or1699 = or i32 %1088, %1089
  %and1700 = and i32 %1087, %or1699
  %or1701 = or i32 %and1698, %and1700
  %add1702 = add i32 %xor1697, %or1701
  store i32 %add1702, i32* %t21686, align 4
  %1090 = load i32, i32* %t11646, align 4
  %1091 = load i32, i32* %d, align 4
  %add1703 = add i32 %1091, %1090
  store i32 %add1703, i32* %d, align 4
  %1092 = load i32, i32* %t11646, align 4
  %1093 = load i32, i32* %t21686, align 4
  %add1704 = add i32 %1092, %1093
  store i32 %add1704, i32* %h, align 4
  br label %do.end1705

do.end1705:                                       ; preds = %do.body1645
  br label %do.body1706

do.body1706:                                      ; preds = %do.end1705
  %1094 = load i32, i32* %g, align 4
  %1095 = load i32, i32* %d, align 4
  %shr1708 = lshr i32 %1095, 6
  %1096 = load i32, i32* %d, align 4
  %shl1709 = shl i32 %1096, 26
  %or1710 = or i32 %shr1708, %shl1709
  %1097 = load i32, i32* %d, align 4
  %shr1711 = lshr i32 %1097, 11
  %1098 = load i32, i32* %d, align 4
  %shl1712 = shl i32 %1098, 21
  %or1713 = or i32 %shr1711, %shl1712
  %xor1714 = xor i32 %or1710, %or1713
  %1099 = load i32, i32* %d, align 4
  %shr1715 = lshr i32 %1099, 25
  %1100 = load i32, i32* %d, align 4
  %shl1716 = shl i32 %1100, 7
  %or1717 = or i32 %shr1715, %shl1716
  %xor1718 = xor i32 %xor1714, %or1717
  %add1719 = add i32 %1094, %xor1718
  %1101 = load i32, i32* %f, align 4
  %1102 = load i32, i32* %d, align 4
  %1103 = load i32, i32* %e, align 4
  %1104 = load i32, i32* %f, align 4
  %xor1720 = xor i32 %1103, %1104
  %and1721 = and i32 %1102, %xor1720
  %xor1722 = xor i32 %1101, %and1721
  %add1723 = add i32 %add1719, %xor1722
  %add1724 = add i32 %add1723, 773529912
  %1105 = load i32, i32* %w15, align 4
  %shr1725 = lshr i32 %1105, 17
  %1106 = load i32, i32* %w15, align 4
  %shl1726 = shl i32 %1106, 15
  %or1727 = or i32 %shr1725, %shl1726
  %1107 = load i32, i32* %w15, align 4
  %shr1728 = lshr i32 %1107, 19
  %1108 = load i32, i32* %w15, align 4
  %shl1729 = shl i32 %1108, 13
  %or1730 = or i32 %shr1728, %shl1729
  %xor1731 = xor i32 %or1727, %or1730
  %1109 = load i32, i32* %w15, align 4
  %shr1732 = lshr i32 %1109, 10
  %xor1733 = xor i32 %xor1731, %shr1732
  %1110 = load i32, i32* %w10, align 4
  %add1734 = add i32 %xor1733, %1110
  %1111 = load i32, i32* %w2, align 4
  %shr1735 = lshr i32 %1111, 7
  %1112 = load i32, i32* %w2, align 4
  %shl1736 = shl i32 %1112, 25
  %or1737 = or i32 %shr1735, %shl1736
  %1113 = load i32, i32* %w2, align 4
  %shr1738 = lshr i32 %1113, 18
  %1114 = load i32, i32* %w2, align 4
  %shl1739 = shl i32 %1114, 14
  %or1740 = or i32 %shr1738, %shl1739
  %xor1741 = xor i32 %or1737, %or1740
  %1115 = load i32, i32* %w2, align 4
  %shr1742 = lshr i32 %1115, 3
  %xor1743 = xor i32 %xor1741, %shr1742
  %add1744 = add i32 %add1734, %xor1743
  %1116 = load i32, i32* %w1, align 4
  %add1745 = add i32 %1116, %add1744
  store i32 %add1745, i32* %w1, align 4
  %add1746 = add i32 %add1724, %add1745
  store i32 %add1746, i32* %t11707, align 4
  %1117 = load i32, i32* %h, align 4
  %shr1748 = lshr i32 %1117, 2
  %1118 = load i32, i32* %h, align 4
  %shl1749 = shl i32 %1118, 30
  %or1750 = or i32 %shr1748, %shl1749
  %1119 = load i32, i32* %h, align 4
  %shr1751 = lshr i32 %1119, 13
  %1120 = load i32, i32* %h, align 4
  %shl1752 = shl i32 %1120, 19
  %or1753 = or i32 %shr1751, %shl1752
  %xor1754 = xor i32 %or1750, %or1753
  %1121 = load i32, i32* %h, align 4
  %shr1755 = lshr i32 %1121, 22
  %1122 = load i32, i32* %h, align 4
  %shl1756 = shl i32 %1122, 10
  %or1757 = or i32 %shr1755, %shl1756
  %xor1758 = xor i32 %xor1754, %or1757
  %1123 = load i32, i32* %h, align 4
  %1124 = load i32, i32* %a, align 4
  %and1759 = and i32 %1123, %1124
  %1125 = load i32, i32* %b, align 4
  %1126 = load i32, i32* %h, align 4
  %1127 = load i32, i32* %a, align 4
  %or1760 = or i32 %1126, %1127
  %and1761 = and i32 %1125, %or1760
  %or1762 = or i32 %and1759, %and1761
  %add1763 = add i32 %xor1758, %or1762
  store i32 %add1763, i32* %t21747, align 4
  %1128 = load i32, i32* %t11707, align 4
  %1129 = load i32, i32* %c, align 4
  %add1764 = add i32 %1129, %1128
  store i32 %add1764, i32* %c, align 4
  %1130 = load i32, i32* %t11707, align 4
  %1131 = load i32, i32* %t21747, align 4
  %add1765 = add i32 %1130, %1131
  store i32 %add1765, i32* %g, align 4
  br label %do.end1766

do.end1766:                                       ; preds = %do.body1706
  br label %do.body1767

do.body1767:                                      ; preds = %do.end1766
  %1132 = load i32, i32* %f, align 4
  %1133 = load i32, i32* %c, align 4
  %shr1769 = lshr i32 %1133, 6
  %1134 = load i32, i32* %c, align 4
  %shl1770 = shl i32 %1134, 26
  %or1771 = or i32 %shr1769, %shl1770
  %1135 = load i32, i32* %c, align 4
  %shr1772 = lshr i32 %1135, 11
  %1136 = load i32, i32* %c, align 4
  %shl1773 = shl i32 %1136, 21
  %or1774 = or i32 %shr1772, %shl1773
  %xor1775 = xor i32 %or1771, %or1774
  %1137 = load i32, i32* %c, align 4
  %shr1776 = lshr i32 %1137, 25
  %1138 = load i32, i32* %c, align 4
  %shl1777 = shl i32 %1138, 7
  %or1778 = or i32 %shr1776, %shl1777
  %xor1779 = xor i32 %xor1775, %or1778
  %add1780 = add i32 %1132, %xor1779
  %1139 = load i32, i32* %e, align 4
  %1140 = load i32, i32* %c, align 4
  %1141 = load i32, i32* %d, align 4
  %1142 = load i32, i32* %e, align 4
  %xor1781 = xor i32 %1141, %1142
  %and1782 = and i32 %1140, %xor1781
  %xor1783 = xor i32 %1139, %and1782
  %add1784 = add i32 %add1780, %xor1783
  %add1785 = add i32 %add1784, 1294757372
  %1143 = load i32, i32* %w0, align 4
  %shr1786 = lshr i32 %1143, 17
  %1144 = load i32, i32* %w0, align 4
  %shl1787 = shl i32 %1144, 15
  %or1788 = or i32 %shr1786, %shl1787
  %1145 = load i32, i32* %w0, align 4
  %shr1789 = lshr i32 %1145, 19
  %1146 = load i32, i32* %w0, align 4
  %shl1790 = shl i32 %1146, 13
  %or1791 = or i32 %shr1789, %shl1790
  %xor1792 = xor i32 %or1788, %or1791
  %1147 = load i32, i32* %w0, align 4
  %shr1793 = lshr i32 %1147, 10
  %xor1794 = xor i32 %xor1792, %shr1793
  %1148 = load i32, i32* %w11, align 4
  %add1795 = add i32 %xor1794, %1148
  %1149 = load i32, i32* %w3, align 4
  %shr1796 = lshr i32 %1149, 7
  %1150 = load i32, i32* %w3, align 4
  %shl1797 = shl i32 %1150, 25
  %or1798 = or i32 %shr1796, %shl1797
  %1151 = load i32, i32* %w3, align 4
  %shr1799 = lshr i32 %1151, 18
  %1152 = load i32, i32* %w3, align 4
  %shl1800 = shl i32 %1152, 14
  %or1801 = or i32 %shr1799, %shl1800
  %xor1802 = xor i32 %or1798, %or1801
  %1153 = load i32, i32* %w3, align 4
  %shr1803 = lshr i32 %1153, 3
  %xor1804 = xor i32 %xor1802, %shr1803
  %add1805 = add i32 %add1795, %xor1804
  %1154 = load i32, i32* %w2, align 4
  %add1806 = add i32 %1154, %add1805
  store i32 %add1806, i32* %w2, align 4
  %add1807 = add i32 %add1785, %add1806
  store i32 %add1807, i32* %t11768, align 4
  %1155 = load i32, i32* %g, align 4
  %shr1809 = lshr i32 %1155, 2
  %1156 = load i32, i32* %g, align 4
  %shl1810 = shl i32 %1156, 30
  %or1811 = or i32 %shr1809, %shl1810
  %1157 = load i32, i32* %g, align 4
  %shr1812 = lshr i32 %1157, 13
  %1158 = load i32, i32* %g, align 4
  %shl1813 = shl i32 %1158, 19
  %or1814 = or i32 %shr1812, %shl1813
  %xor1815 = xor i32 %or1811, %or1814
  %1159 = load i32, i32* %g, align 4
  %shr1816 = lshr i32 %1159, 22
  %1160 = load i32, i32* %g, align 4
  %shl1817 = shl i32 %1160, 10
  %or1818 = or i32 %shr1816, %shl1817
  %xor1819 = xor i32 %xor1815, %or1818
  %1161 = load i32, i32* %g, align 4
  %1162 = load i32, i32* %h, align 4
  %and1820 = and i32 %1161, %1162
  %1163 = load i32, i32* %a, align 4
  %1164 = load i32, i32* %g, align 4
  %1165 = load i32, i32* %h, align 4
  %or1821 = or i32 %1164, %1165
  %and1822 = and i32 %1163, %or1821
  %or1823 = or i32 %and1820, %and1822
  %add1824 = add i32 %xor1819, %or1823
  store i32 %add1824, i32* %t21808, align 4
  %1166 = load i32, i32* %t11768, align 4
  %1167 = load i32, i32* %b, align 4
  %add1825 = add i32 %1167, %1166
  store i32 %add1825, i32* %b, align 4
  %1168 = load i32, i32* %t11768, align 4
  %1169 = load i32, i32* %t21808, align 4
  %add1826 = add i32 %1168, %1169
  store i32 %add1826, i32* %f, align 4
  br label %do.end1827

do.end1827:                                       ; preds = %do.body1767
  br label %do.body1828

do.body1828:                                      ; preds = %do.end1827
  %1170 = load i32, i32* %e, align 4
  %1171 = load i32, i32* %b, align 4
  %shr1830 = lshr i32 %1171, 6
  %1172 = load i32, i32* %b, align 4
  %shl1831 = shl i32 %1172, 26
  %or1832 = or i32 %shr1830, %shl1831
  %1173 = load i32, i32* %b, align 4
  %shr1833 = lshr i32 %1173, 11
  %1174 = load i32, i32* %b, align 4
  %shl1834 = shl i32 %1174, 21
  %or1835 = or i32 %shr1833, %shl1834
  %xor1836 = xor i32 %or1832, %or1835
  %1175 = load i32, i32* %b, align 4
  %shr1837 = lshr i32 %1175, 25
  %1176 = load i32, i32* %b, align 4
  %shl1838 = shl i32 %1176, 7
  %or1839 = or i32 %shr1837, %shl1838
  %xor1840 = xor i32 %xor1836, %or1839
  %add1841 = add i32 %1170, %xor1840
  %1177 = load i32, i32* %d, align 4
  %1178 = load i32, i32* %b, align 4
  %1179 = load i32, i32* %c, align 4
  %1180 = load i32, i32* %d, align 4
  %xor1842 = xor i32 %1179, %1180
  %and1843 = and i32 %1178, %xor1842
  %xor1844 = xor i32 %1177, %and1843
  %add1845 = add i32 %add1841, %xor1844
  %add1846 = add i32 %add1845, 1396182291
  %1181 = load i32, i32* %w1, align 4
  %shr1847 = lshr i32 %1181, 17
  %1182 = load i32, i32* %w1, align 4
  %shl1848 = shl i32 %1182, 15
  %or1849 = or i32 %shr1847, %shl1848
  %1183 = load i32, i32* %w1, align 4
  %shr1850 = lshr i32 %1183, 19
  %1184 = load i32, i32* %w1, align 4
  %shl1851 = shl i32 %1184, 13
  %or1852 = or i32 %shr1850, %shl1851
  %xor1853 = xor i32 %or1849, %or1852
  %1185 = load i32, i32* %w1, align 4
  %shr1854 = lshr i32 %1185, 10
  %xor1855 = xor i32 %xor1853, %shr1854
  %1186 = load i32, i32* %w12, align 4
  %add1856 = add i32 %xor1855, %1186
  %1187 = load i32, i32* %w4, align 4
  %shr1857 = lshr i32 %1187, 7
  %1188 = load i32, i32* %w4, align 4
  %shl1858 = shl i32 %1188, 25
  %or1859 = or i32 %shr1857, %shl1858
  %1189 = load i32, i32* %w4, align 4
  %shr1860 = lshr i32 %1189, 18
  %1190 = load i32, i32* %w4, align 4
  %shl1861 = shl i32 %1190, 14
  %or1862 = or i32 %shr1860, %shl1861
  %xor1863 = xor i32 %or1859, %or1862
  %1191 = load i32, i32* %w4, align 4
  %shr1864 = lshr i32 %1191, 3
  %xor1865 = xor i32 %xor1863, %shr1864
  %add1866 = add i32 %add1856, %xor1865
  %1192 = load i32, i32* %w3, align 4
  %add1867 = add i32 %1192, %add1866
  store i32 %add1867, i32* %w3, align 4
  %add1868 = add i32 %add1846, %add1867
  store i32 %add1868, i32* %t11829, align 4
  %1193 = load i32, i32* %f, align 4
  %shr1870 = lshr i32 %1193, 2
  %1194 = load i32, i32* %f, align 4
  %shl1871 = shl i32 %1194, 30
  %or1872 = or i32 %shr1870, %shl1871
  %1195 = load i32, i32* %f, align 4
  %shr1873 = lshr i32 %1195, 13
  %1196 = load i32, i32* %f, align 4
  %shl1874 = shl i32 %1196, 19
  %or1875 = or i32 %shr1873, %shl1874
  %xor1876 = xor i32 %or1872, %or1875
  %1197 = load i32, i32* %f, align 4
  %shr1877 = lshr i32 %1197, 22
  %1198 = load i32, i32* %f, align 4
  %shl1878 = shl i32 %1198, 10
  %or1879 = or i32 %shr1877, %shl1878
  %xor1880 = xor i32 %xor1876, %or1879
  %1199 = load i32, i32* %f, align 4
  %1200 = load i32, i32* %g, align 4
  %and1881 = and i32 %1199, %1200
  %1201 = load i32, i32* %h, align 4
  %1202 = load i32, i32* %f, align 4
  %1203 = load i32, i32* %g, align 4
  %or1882 = or i32 %1202, %1203
  %and1883 = and i32 %1201, %or1882
  %or1884 = or i32 %and1881, %and1883
  %add1885 = add i32 %xor1880, %or1884
  store i32 %add1885, i32* %t21869, align 4
  %1204 = load i32, i32* %t11829, align 4
  %1205 = load i32, i32* %a, align 4
  %add1886 = add i32 %1205, %1204
  store i32 %add1886, i32* %a, align 4
  %1206 = load i32, i32* %t11829, align 4
  %1207 = load i32, i32* %t21869, align 4
  %add1887 = add i32 %1206, %1207
  store i32 %add1887, i32* %e, align 4
  br label %do.end1888

do.end1888:                                       ; preds = %do.body1828
  br label %do.body1889

do.body1889:                                      ; preds = %do.end1888
  %1208 = load i32, i32* %d, align 4
  %1209 = load i32, i32* %a, align 4
  %shr1891 = lshr i32 %1209, 6
  %1210 = load i32, i32* %a, align 4
  %shl1892 = shl i32 %1210, 26
  %or1893 = or i32 %shr1891, %shl1892
  %1211 = load i32, i32* %a, align 4
  %shr1894 = lshr i32 %1211, 11
  %1212 = load i32, i32* %a, align 4
  %shl1895 = shl i32 %1212, 21
  %or1896 = or i32 %shr1894, %shl1895
  %xor1897 = xor i32 %or1893, %or1896
  %1213 = load i32, i32* %a, align 4
  %shr1898 = lshr i32 %1213, 25
  %1214 = load i32, i32* %a, align 4
  %shl1899 = shl i32 %1214, 7
  %or1900 = or i32 %shr1898, %shl1899
  %xor1901 = xor i32 %xor1897, %or1900
  %add1902 = add i32 %1208, %xor1901
  %1215 = load i32, i32* %c, align 4
  %1216 = load i32, i32* %a, align 4
  %1217 = load i32, i32* %b, align 4
  %1218 = load i32, i32* %c, align 4
  %xor1903 = xor i32 %1217, %1218
  %and1904 = and i32 %1216, %xor1903
  %xor1905 = xor i32 %1215, %and1904
  %add1906 = add i32 %add1902, %xor1905
  %add1907 = add i32 %add1906, 1695183700
  %1219 = load i32, i32* %w2, align 4
  %shr1908 = lshr i32 %1219, 17
  %1220 = load i32, i32* %w2, align 4
  %shl1909 = shl i32 %1220, 15
  %or1910 = or i32 %shr1908, %shl1909
  %1221 = load i32, i32* %w2, align 4
  %shr1911 = lshr i32 %1221, 19
  %1222 = load i32, i32* %w2, align 4
  %shl1912 = shl i32 %1222, 13
  %or1913 = or i32 %shr1911, %shl1912
  %xor1914 = xor i32 %or1910, %or1913
  %1223 = load i32, i32* %w2, align 4
  %shr1915 = lshr i32 %1223, 10
  %xor1916 = xor i32 %xor1914, %shr1915
  %1224 = load i32, i32* %w13, align 4
  %add1917 = add i32 %xor1916, %1224
  %1225 = load i32, i32* %w5, align 4
  %shr1918 = lshr i32 %1225, 7
  %1226 = load i32, i32* %w5, align 4
  %shl1919 = shl i32 %1226, 25
  %or1920 = or i32 %shr1918, %shl1919
  %1227 = load i32, i32* %w5, align 4
  %shr1921 = lshr i32 %1227, 18
  %1228 = load i32, i32* %w5, align 4
  %shl1922 = shl i32 %1228, 14
  %or1923 = or i32 %shr1921, %shl1922
  %xor1924 = xor i32 %or1920, %or1923
  %1229 = load i32, i32* %w5, align 4
  %shr1925 = lshr i32 %1229, 3
  %xor1926 = xor i32 %xor1924, %shr1925
  %add1927 = add i32 %add1917, %xor1926
  %1230 = load i32, i32* %w4, align 4
  %add1928 = add i32 %1230, %add1927
  store i32 %add1928, i32* %w4, align 4
  %add1929 = add i32 %add1907, %add1928
  store i32 %add1929, i32* %t11890, align 4
  %1231 = load i32, i32* %e, align 4
  %shr1931 = lshr i32 %1231, 2
  %1232 = load i32, i32* %e, align 4
  %shl1932 = shl i32 %1232, 30
  %or1933 = or i32 %shr1931, %shl1932
  %1233 = load i32, i32* %e, align 4
  %shr1934 = lshr i32 %1233, 13
  %1234 = load i32, i32* %e, align 4
  %shl1935 = shl i32 %1234, 19
  %or1936 = or i32 %shr1934, %shl1935
  %xor1937 = xor i32 %or1933, %or1936
  %1235 = load i32, i32* %e, align 4
  %shr1938 = lshr i32 %1235, 22
  %1236 = load i32, i32* %e, align 4
  %shl1939 = shl i32 %1236, 10
  %or1940 = or i32 %shr1938, %shl1939
  %xor1941 = xor i32 %xor1937, %or1940
  %1237 = load i32, i32* %e, align 4
  %1238 = load i32, i32* %f, align 4
  %and1942 = and i32 %1237, %1238
  %1239 = load i32, i32* %g, align 4
  %1240 = load i32, i32* %e, align 4
  %1241 = load i32, i32* %f, align 4
  %or1943 = or i32 %1240, %1241
  %and1944 = and i32 %1239, %or1943
  %or1945 = or i32 %and1942, %and1944
  %add1946 = add i32 %xor1941, %or1945
  store i32 %add1946, i32* %t21930, align 4
  %1242 = load i32, i32* %t11890, align 4
  %1243 = load i32, i32* %h, align 4
  %add1947 = add i32 %1243, %1242
  store i32 %add1947, i32* %h, align 4
  %1244 = load i32, i32* %t11890, align 4
  %1245 = load i32, i32* %t21930, align 4
  %add1948 = add i32 %1244, %1245
  store i32 %add1948, i32* %d, align 4
  br label %do.end1949

do.end1949:                                       ; preds = %do.body1889
  br label %do.body1950

do.body1950:                                      ; preds = %do.end1949
  %1246 = load i32, i32* %c, align 4
  %1247 = load i32, i32* %h, align 4
  %shr1952 = lshr i32 %1247, 6
  %1248 = load i32, i32* %h, align 4
  %shl1953 = shl i32 %1248, 26
  %or1954 = or i32 %shr1952, %shl1953
  %1249 = load i32, i32* %h, align 4
  %shr1955 = lshr i32 %1249, 11
  %1250 = load i32, i32* %h, align 4
  %shl1956 = shl i32 %1250, 21
  %or1957 = or i32 %shr1955, %shl1956
  %xor1958 = xor i32 %or1954, %or1957
  %1251 = load i32, i32* %h, align 4
  %shr1959 = lshr i32 %1251, 25
  %1252 = load i32, i32* %h, align 4
  %shl1960 = shl i32 %1252, 7
  %or1961 = or i32 %shr1959, %shl1960
  %xor1962 = xor i32 %xor1958, %or1961
  %add1963 = add i32 %1246, %xor1962
  %1253 = load i32, i32* %b, align 4
  %1254 = load i32, i32* %h, align 4
  %1255 = load i32, i32* %a, align 4
  %1256 = load i32, i32* %b, align 4
  %xor1964 = xor i32 %1255, %1256
  %and1965 = and i32 %1254, %xor1964
  %xor1966 = xor i32 %1253, %and1965
  %add1967 = add i32 %add1963, %xor1966
  %add1968 = add i32 %add1967, 1986661051
  %1257 = load i32, i32* %w3, align 4
  %shr1969 = lshr i32 %1257, 17
  %1258 = load i32, i32* %w3, align 4
  %shl1970 = shl i32 %1258, 15
  %or1971 = or i32 %shr1969, %shl1970
  %1259 = load i32, i32* %w3, align 4
  %shr1972 = lshr i32 %1259, 19
  %1260 = load i32, i32* %w3, align 4
  %shl1973 = shl i32 %1260, 13
  %or1974 = or i32 %shr1972, %shl1973
  %xor1975 = xor i32 %or1971, %or1974
  %1261 = load i32, i32* %w3, align 4
  %shr1976 = lshr i32 %1261, 10
  %xor1977 = xor i32 %xor1975, %shr1976
  %1262 = load i32, i32* %w14, align 4
  %add1978 = add i32 %xor1977, %1262
  %1263 = load i32, i32* %w6, align 4
  %shr1979 = lshr i32 %1263, 7
  %1264 = load i32, i32* %w6, align 4
  %shl1980 = shl i32 %1264, 25
  %or1981 = or i32 %shr1979, %shl1980
  %1265 = load i32, i32* %w6, align 4
  %shr1982 = lshr i32 %1265, 18
  %1266 = load i32, i32* %w6, align 4
  %shl1983 = shl i32 %1266, 14
  %or1984 = or i32 %shr1982, %shl1983
  %xor1985 = xor i32 %or1981, %or1984
  %1267 = load i32, i32* %w6, align 4
  %shr1986 = lshr i32 %1267, 3
  %xor1987 = xor i32 %xor1985, %shr1986
  %add1988 = add i32 %add1978, %xor1987
  %1268 = load i32, i32* %w5, align 4
  %add1989 = add i32 %1268, %add1988
  store i32 %add1989, i32* %w5, align 4
  %add1990 = add i32 %add1968, %add1989
  store i32 %add1990, i32* %t11951, align 4
  %1269 = load i32, i32* %d, align 4
  %shr1992 = lshr i32 %1269, 2
  %1270 = load i32, i32* %d, align 4
  %shl1993 = shl i32 %1270, 30
  %or1994 = or i32 %shr1992, %shl1993
  %1271 = load i32, i32* %d, align 4
  %shr1995 = lshr i32 %1271, 13
  %1272 = load i32, i32* %d, align 4
  %shl1996 = shl i32 %1272, 19
  %or1997 = or i32 %shr1995, %shl1996
  %xor1998 = xor i32 %or1994, %or1997
  %1273 = load i32, i32* %d, align 4
  %shr1999 = lshr i32 %1273, 22
  %1274 = load i32, i32* %d, align 4
  %shl2000 = shl i32 %1274, 10
  %or2001 = or i32 %shr1999, %shl2000
  %xor2002 = xor i32 %xor1998, %or2001
  %1275 = load i32, i32* %d, align 4
  %1276 = load i32, i32* %e, align 4
  %and2003 = and i32 %1275, %1276
  %1277 = load i32, i32* %f, align 4
  %1278 = load i32, i32* %d, align 4
  %1279 = load i32, i32* %e, align 4
  %or2004 = or i32 %1278, %1279
  %and2005 = and i32 %1277, %or2004
  %or2006 = or i32 %and2003, %and2005
  %add2007 = add i32 %xor2002, %or2006
  store i32 %add2007, i32* %t21991, align 4
  %1280 = load i32, i32* %t11951, align 4
  %1281 = load i32, i32* %g, align 4
  %add2008 = add i32 %1281, %1280
  store i32 %add2008, i32* %g, align 4
  %1282 = load i32, i32* %t11951, align 4
  %1283 = load i32, i32* %t21991, align 4
  %add2009 = add i32 %1282, %1283
  store i32 %add2009, i32* %c, align 4
  br label %do.end2010

do.end2010:                                       ; preds = %do.body1950
  br label %do.body2011

do.body2011:                                      ; preds = %do.end2010
  %1284 = load i32, i32* %b, align 4
  %1285 = load i32, i32* %g, align 4
  %shr2013 = lshr i32 %1285, 6
  %1286 = load i32, i32* %g, align 4
  %shl2014 = shl i32 %1286, 26
  %or2015 = or i32 %shr2013, %shl2014
  %1287 = load i32, i32* %g, align 4
  %shr2016 = lshr i32 %1287, 11
  %1288 = load i32, i32* %g, align 4
  %shl2017 = shl i32 %1288, 21
  %or2018 = or i32 %shr2016, %shl2017
  %xor2019 = xor i32 %or2015, %or2018
  %1289 = load i32, i32* %g, align 4
  %shr2020 = lshr i32 %1289, 25
  %1290 = load i32, i32* %g, align 4
  %shl2021 = shl i32 %1290, 7
  %or2022 = or i32 %shr2020, %shl2021
  %xor2023 = xor i32 %xor2019, %or2022
  %add2024 = add i32 %1284, %xor2023
  %1291 = load i32, i32* %a, align 4
  %1292 = load i32, i32* %g, align 4
  %1293 = load i32, i32* %h, align 4
  %1294 = load i32, i32* %a, align 4
  %xor2025 = xor i32 %1293, %1294
  %and2026 = and i32 %1292, %xor2025
  %xor2027 = xor i32 %1291, %and2026
  %add2028 = add i32 %add2024, %xor2027
  %add2029 = add i32 %add2028, -2117940946
  %1295 = load i32, i32* %w4, align 4
  %shr2030 = lshr i32 %1295, 17
  %1296 = load i32, i32* %w4, align 4
  %shl2031 = shl i32 %1296, 15
  %or2032 = or i32 %shr2030, %shl2031
  %1297 = load i32, i32* %w4, align 4
  %shr2033 = lshr i32 %1297, 19
  %1298 = load i32, i32* %w4, align 4
  %shl2034 = shl i32 %1298, 13
  %or2035 = or i32 %shr2033, %shl2034
  %xor2036 = xor i32 %or2032, %or2035
  %1299 = load i32, i32* %w4, align 4
  %shr2037 = lshr i32 %1299, 10
  %xor2038 = xor i32 %xor2036, %shr2037
  %1300 = load i32, i32* %w15, align 4
  %add2039 = add i32 %xor2038, %1300
  %1301 = load i32, i32* %w7, align 4
  %shr2040 = lshr i32 %1301, 7
  %1302 = load i32, i32* %w7, align 4
  %shl2041 = shl i32 %1302, 25
  %or2042 = or i32 %shr2040, %shl2041
  %1303 = load i32, i32* %w7, align 4
  %shr2043 = lshr i32 %1303, 18
  %1304 = load i32, i32* %w7, align 4
  %shl2044 = shl i32 %1304, 14
  %or2045 = or i32 %shr2043, %shl2044
  %xor2046 = xor i32 %or2042, %or2045
  %1305 = load i32, i32* %w7, align 4
  %shr2047 = lshr i32 %1305, 3
  %xor2048 = xor i32 %xor2046, %shr2047
  %add2049 = add i32 %add2039, %xor2048
  %1306 = load i32, i32* %w6, align 4
  %add2050 = add i32 %1306, %add2049
  store i32 %add2050, i32* %w6, align 4
  %add2051 = add i32 %add2029, %add2050
  store i32 %add2051, i32* %t12012, align 4
  %1307 = load i32, i32* %c, align 4
  %shr2053 = lshr i32 %1307, 2
  %1308 = load i32, i32* %c, align 4
  %shl2054 = shl i32 %1308, 30
  %or2055 = or i32 %shr2053, %shl2054
  %1309 = load i32, i32* %c, align 4
  %shr2056 = lshr i32 %1309, 13
  %1310 = load i32, i32* %c, align 4
  %shl2057 = shl i32 %1310, 19
  %or2058 = or i32 %shr2056, %shl2057
  %xor2059 = xor i32 %or2055, %or2058
  %1311 = load i32, i32* %c, align 4
  %shr2060 = lshr i32 %1311, 22
  %1312 = load i32, i32* %c, align 4
  %shl2061 = shl i32 %1312, 10
  %or2062 = or i32 %shr2060, %shl2061
  %xor2063 = xor i32 %xor2059, %or2062
  %1313 = load i32, i32* %c, align 4
  %1314 = load i32, i32* %d, align 4
  %and2064 = and i32 %1313, %1314
  %1315 = load i32, i32* %e, align 4
  %1316 = load i32, i32* %c, align 4
  %1317 = load i32, i32* %d, align 4
  %or2065 = or i32 %1316, %1317
  %and2066 = and i32 %1315, %or2065
  %or2067 = or i32 %and2064, %and2066
  %add2068 = add i32 %xor2063, %or2067
  store i32 %add2068, i32* %t22052, align 4
  %1318 = load i32, i32* %t12012, align 4
  %1319 = load i32, i32* %f, align 4
  %add2069 = add i32 %1319, %1318
  store i32 %add2069, i32* %f, align 4
  %1320 = load i32, i32* %t12012, align 4
  %1321 = load i32, i32* %t22052, align 4
  %add2070 = add i32 %1320, %1321
  store i32 %add2070, i32* %b, align 4
  br label %do.end2071

do.end2071:                                       ; preds = %do.body2011
  br label %do.body2072

do.body2072:                                      ; preds = %do.end2071
  %1322 = load i32, i32* %a, align 4
  %1323 = load i32, i32* %f, align 4
  %shr2074 = lshr i32 %1323, 6
  %1324 = load i32, i32* %f, align 4
  %shl2075 = shl i32 %1324, 26
  %or2076 = or i32 %shr2074, %shl2075
  %1325 = load i32, i32* %f, align 4
  %shr2077 = lshr i32 %1325, 11
  %1326 = load i32, i32* %f, align 4
  %shl2078 = shl i32 %1326, 21
  %or2079 = or i32 %shr2077, %shl2078
  %xor2080 = xor i32 %or2076, %or2079
  %1327 = load i32, i32* %f, align 4
  %shr2081 = lshr i32 %1327, 25
  %1328 = load i32, i32* %f, align 4
  %shl2082 = shl i32 %1328, 7
  %or2083 = or i32 %shr2081, %shl2082
  %xor2084 = xor i32 %xor2080, %or2083
  %add2085 = add i32 %1322, %xor2084
  %1329 = load i32, i32* %h, align 4
  %1330 = load i32, i32* %f, align 4
  %1331 = load i32, i32* %g, align 4
  %1332 = load i32, i32* %h, align 4
  %xor2086 = xor i32 %1331, %1332
  %and2087 = and i32 %1330, %xor2086
  %xor2088 = xor i32 %1329, %and2087
  %add2089 = add i32 %add2085, %xor2088
  %add2090 = add i32 %add2089, -1838011259
  %1333 = load i32, i32* %w5, align 4
  %shr2091 = lshr i32 %1333, 17
  %1334 = load i32, i32* %w5, align 4
  %shl2092 = shl i32 %1334, 15
  %or2093 = or i32 %shr2091, %shl2092
  %1335 = load i32, i32* %w5, align 4
  %shr2094 = lshr i32 %1335, 19
  %1336 = load i32, i32* %w5, align 4
  %shl2095 = shl i32 %1336, 13
  %or2096 = or i32 %shr2094, %shl2095
  %xor2097 = xor i32 %or2093, %or2096
  %1337 = load i32, i32* %w5, align 4
  %shr2098 = lshr i32 %1337, 10
  %xor2099 = xor i32 %xor2097, %shr2098
  %1338 = load i32, i32* %w0, align 4
  %add2100 = add i32 %xor2099, %1338
  %1339 = load i32, i32* %w8, align 4
  %shr2101 = lshr i32 %1339, 7
  %1340 = load i32, i32* %w8, align 4
  %shl2102 = shl i32 %1340, 25
  %or2103 = or i32 %shr2101, %shl2102
  %1341 = load i32, i32* %w8, align 4
  %shr2104 = lshr i32 %1341, 18
  %1342 = load i32, i32* %w8, align 4
  %shl2105 = shl i32 %1342, 14
  %or2106 = or i32 %shr2104, %shl2105
  %xor2107 = xor i32 %or2103, %or2106
  %1343 = load i32, i32* %w8, align 4
  %shr2108 = lshr i32 %1343, 3
  %xor2109 = xor i32 %xor2107, %shr2108
  %add2110 = add i32 %add2100, %xor2109
  %1344 = load i32, i32* %w7, align 4
  %add2111 = add i32 %1344, %add2110
  store i32 %add2111, i32* %w7, align 4
  %add2112 = add i32 %add2090, %add2111
  store i32 %add2112, i32* %t12073, align 4
  %1345 = load i32, i32* %b, align 4
  %shr2114 = lshr i32 %1345, 2
  %1346 = load i32, i32* %b, align 4
  %shl2115 = shl i32 %1346, 30
  %or2116 = or i32 %shr2114, %shl2115
  %1347 = load i32, i32* %b, align 4
  %shr2117 = lshr i32 %1347, 13
  %1348 = load i32, i32* %b, align 4
  %shl2118 = shl i32 %1348, 19
  %or2119 = or i32 %shr2117, %shl2118
  %xor2120 = xor i32 %or2116, %or2119
  %1349 = load i32, i32* %b, align 4
  %shr2121 = lshr i32 %1349, 22
  %1350 = load i32, i32* %b, align 4
  %shl2122 = shl i32 %1350, 10
  %or2123 = or i32 %shr2121, %shl2122
  %xor2124 = xor i32 %xor2120, %or2123
  %1351 = load i32, i32* %b, align 4
  %1352 = load i32, i32* %c, align 4
  %and2125 = and i32 %1351, %1352
  %1353 = load i32, i32* %d, align 4
  %1354 = load i32, i32* %b, align 4
  %1355 = load i32, i32* %c, align 4
  %or2126 = or i32 %1354, %1355
  %and2127 = and i32 %1353, %or2126
  %or2128 = or i32 %and2125, %and2127
  %add2129 = add i32 %xor2124, %or2128
  store i32 %add2129, i32* %t22113, align 4
  %1356 = load i32, i32* %t12073, align 4
  %1357 = load i32, i32* %e, align 4
  %add2130 = add i32 %1357, %1356
  store i32 %add2130, i32* %e, align 4
  %1358 = load i32, i32* %t12073, align 4
  %1359 = load i32, i32* %t22113, align 4
  %add2131 = add i32 %1358, %1359
  store i32 %add2131, i32* %a, align 4
  br label %do.end2132

do.end2132:                                       ; preds = %do.body2072
  br label %do.body2133

do.body2133:                                      ; preds = %do.end2132
  %1360 = load i32, i32* %h, align 4
  %1361 = load i32, i32* %e, align 4
  %shr2135 = lshr i32 %1361, 6
  %1362 = load i32, i32* %e, align 4
  %shl2136 = shl i32 %1362, 26
  %or2137 = or i32 %shr2135, %shl2136
  %1363 = load i32, i32* %e, align 4
  %shr2138 = lshr i32 %1363, 11
  %1364 = load i32, i32* %e, align 4
  %shl2139 = shl i32 %1364, 21
  %or2140 = or i32 %shr2138, %shl2139
  %xor2141 = xor i32 %or2137, %or2140
  %1365 = load i32, i32* %e, align 4
  %shr2142 = lshr i32 %1365, 25
  %1366 = load i32, i32* %e, align 4
  %shl2143 = shl i32 %1366, 7
  %or2144 = or i32 %shr2142, %shl2143
  %xor2145 = xor i32 %xor2141, %or2144
  %add2146 = add i32 %1360, %xor2145
  %1367 = load i32, i32* %g, align 4
  %1368 = load i32, i32* %e, align 4
  %1369 = load i32, i32* %f, align 4
  %1370 = load i32, i32* %g, align 4
  %xor2147 = xor i32 %1369, %1370
  %and2148 = and i32 %1368, %xor2147
  %xor2149 = xor i32 %1367, %and2148
  %add2150 = add i32 %add2146, %xor2149
  %add2151 = add i32 %add2150, -1564481375
  %1371 = load i32, i32* %w6, align 4
  %shr2152 = lshr i32 %1371, 17
  %1372 = load i32, i32* %w6, align 4
  %shl2153 = shl i32 %1372, 15
  %or2154 = or i32 %shr2152, %shl2153
  %1373 = load i32, i32* %w6, align 4
  %shr2155 = lshr i32 %1373, 19
  %1374 = load i32, i32* %w6, align 4
  %shl2156 = shl i32 %1374, 13
  %or2157 = or i32 %shr2155, %shl2156
  %xor2158 = xor i32 %or2154, %or2157
  %1375 = load i32, i32* %w6, align 4
  %shr2159 = lshr i32 %1375, 10
  %xor2160 = xor i32 %xor2158, %shr2159
  %1376 = load i32, i32* %w1, align 4
  %add2161 = add i32 %xor2160, %1376
  %1377 = load i32, i32* %w9, align 4
  %shr2162 = lshr i32 %1377, 7
  %1378 = load i32, i32* %w9, align 4
  %shl2163 = shl i32 %1378, 25
  %or2164 = or i32 %shr2162, %shl2163
  %1379 = load i32, i32* %w9, align 4
  %shr2165 = lshr i32 %1379, 18
  %1380 = load i32, i32* %w9, align 4
  %shl2166 = shl i32 %1380, 14
  %or2167 = or i32 %shr2165, %shl2166
  %xor2168 = xor i32 %or2164, %or2167
  %1381 = load i32, i32* %w9, align 4
  %shr2169 = lshr i32 %1381, 3
  %xor2170 = xor i32 %xor2168, %shr2169
  %add2171 = add i32 %add2161, %xor2170
  %1382 = load i32, i32* %w8, align 4
  %add2172 = add i32 %1382, %add2171
  store i32 %add2172, i32* %w8, align 4
  %add2173 = add i32 %add2151, %add2172
  store i32 %add2173, i32* %t12134, align 4
  %1383 = load i32, i32* %a, align 4
  %shr2175 = lshr i32 %1383, 2
  %1384 = load i32, i32* %a, align 4
  %shl2176 = shl i32 %1384, 30
  %or2177 = or i32 %shr2175, %shl2176
  %1385 = load i32, i32* %a, align 4
  %shr2178 = lshr i32 %1385, 13
  %1386 = load i32, i32* %a, align 4
  %shl2179 = shl i32 %1386, 19
  %or2180 = or i32 %shr2178, %shl2179
  %xor2181 = xor i32 %or2177, %or2180
  %1387 = load i32, i32* %a, align 4
  %shr2182 = lshr i32 %1387, 22
  %1388 = load i32, i32* %a, align 4
  %shl2183 = shl i32 %1388, 10
  %or2184 = or i32 %shr2182, %shl2183
  %xor2185 = xor i32 %xor2181, %or2184
  %1389 = load i32, i32* %a, align 4
  %1390 = load i32, i32* %b, align 4
  %and2186 = and i32 %1389, %1390
  %1391 = load i32, i32* %c, align 4
  %1392 = load i32, i32* %a, align 4
  %1393 = load i32, i32* %b, align 4
  %or2187 = or i32 %1392, %1393
  %and2188 = and i32 %1391, %or2187
  %or2189 = or i32 %and2186, %and2188
  %add2190 = add i32 %xor2185, %or2189
  store i32 %add2190, i32* %t22174, align 4
  %1394 = load i32, i32* %t12134, align 4
  %1395 = load i32, i32* %d, align 4
  %add2191 = add i32 %1395, %1394
  store i32 %add2191, i32* %d, align 4
  %1396 = load i32, i32* %t12134, align 4
  %1397 = load i32, i32* %t22174, align 4
  %add2192 = add i32 %1396, %1397
  store i32 %add2192, i32* %h, align 4
  br label %do.end2193

do.end2193:                                       ; preds = %do.body2133
  br label %do.body2194

do.body2194:                                      ; preds = %do.end2193
  %1398 = load i32, i32* %g, align 4
  %1399 = load i32, i32* %d, align 4
  %shr2196 = lshr i32 %1399, 6
  %1400 = load i32, i32* %d, align 4
  %shl2197 = shl i32 %1400, 26
  %or2198 = or i32 %shr2196, %shl2197
  %1401 = load i32, i32* %d, align 4
  %shr2199 = lshr i32 %1401, 11
  %1402 = load i32, i32* %d, align 4
  %shl2200 = shl i32 %1402, 21
  %or2201 = or i32 %shr2199, %shl2200
  %xor2202 = xor i32 %or2198, %or2201
  %1403 = load i32, i32* %d, align 4
  %shr2203 = lshr i32 %1403, 25
  %1404 = load i32, i32* %d, align 4
  %shl2204 = shl i32 %1404, 7
  %or2205 = or i32 %shr2203, %shl2204
  %xor2206 = xor i32 %xor2202, %or2205
  %add2207 = add i32 %1398, %xor2206
  %1405 = load i32, i32* %f, align 4
  %1406 = load i32, i32* %d, align 4
  %1407 = load i32, i32* %e, align 4
  %1408 = load i32, i32* %f, align 4
  %xor2208 = xor i32 %1407, %1408
  %and2209 = and i32 %1406, %xor2208
  %xor2210 = xor i32 %1405, %and2209
  %add2211 = add i32 %add2207, %xor2210
  %add2212 = add i32 %add2211, -1474664885
  %1409 = load i32, i32* %w7, align 4
  %shr2213 = lshr i32 %1409, 17
  %1410 = load i32, i32* %w7, align 4
  %shl2214 = shl i32 %1410, 15
  %or2215 = or i32 %shr2213, %shl2214
  %1411 = load i32, i32* %w7, align 4
  %shr2216 = lshr i32 %1411, 19
  %1412 = load i32, i32* %w7, align 4
  %shl2217 = shl i32 %1412, 13
  %or2218 = or i32 %shr2216, %shl2217
  %xor2219 = xor i32 %or2215, %or2218
  %1413 = load i32, i32* %w7, align 4
  %shr2220 = lshr i32 %1413, 10
  %xor2221 = xor i32 %xor2219, %shr2220
  %1414 = load i32, i32* %w2, align 4
  %add2222 = add i32 %xor2221, %1414
  %1415 = load i32, i32* %w10, align 4
  %shr2223 = lshr i32 %1415, 7
  %1416 = load i32, i32* %w10, align 4
  %shl2224 = shl i32 %1416, 25
  %or2225 = or i32 %shr2223, %shl2224
  %1417 = load i32, i32* %w10, align 4
  %shr2226 = lshr i32 %1417, 18
  %1418 = load i32, i32* %w10, align 4
  %shl2227 = shl i32 %1418, 14
  %or2228 = or i32 %shr2226, %shl2227
  %xor2229 = xor i32 %or2225, %or2228
  %1419 = load i32, i32* %w10, align 4
  %shr2230 = lshr i32 %1419, 3
  %xor2231 = xor i32 %xor2229, %shr2230
  %add2232 = add i32 %add2222, %xor2231
  %1420 = load i32, i32* %w9, align 4
  %add2233 = add i32 %1420, %add2232
  store i32 %add2233, i32* %w9, align 4
  %add2234 = add i32 %add2212, %add2233
  store i32 %add2234, i32* %t12195, align 4
  %1421 = load i32, i32* %h, align 4
  %shr2236 = lshr i32 %1421, 2
  %1422 = load i32, i32* %h, align 4
  %shl2237 = shl i32 %1422, 30
  %or2238 = or i32 %shr2236, %shl2237
  %1423 = load i32, i32* %h, align 4
  %shr2239 = lshr i32 %1423, 13
  %1424 = load i32, i32* %h, align 4
  %shl2240 = shl i32 %1424, 19
  %or2241 = or i32 %shr2239, %shl2240
  %xor2242 = xor i32 %or2238, %or2241
  %1425 = load i32, i32* %h, align 4
  %shr2243 = lshr i32 %1425, 22
  %1426 = load i32, i32* %h, align 4
  %shl2244 = shl i32 %1426, 10
  %or2245 = or i32 %shr2243, %shl2244
  %xor2246 = xor i32 %xor2242, %or2245
  %1427 = load i32, i32* %h, align 4
  %1428 = load i32, i32* %a, align 4
  %and2247 = and i32 %1427, %1428
  %1429 = load i32, i32* %b, align 4
  %1430 = load i32, i32* %h, align 4
  %1431 = load i32, i32* %a, align 4
  %or2248 = or i32 %1430, %1431
  %and2249 = and i32 %1429, %or2248
  %or2250 = or i32 %and2247, %and2249
  %add2251 = add i32 %xor2246, %or2250
  store i32 %add2251, i32* %t22235, align 4
  %1432 = load i32, i32* %t12195, align 4
  %1433 = load i32, i32* %c, align 4
  %add2252 = add i32 %1433, %1432
  store i32 %add2252, i32* %c, align 4
  %1434 = load i32, i32* %t12195, align 4
  %1435 = load i32, i32* %t22235, align 4
  %add2253 = add i32 %1434, %1435
  store i32 %add2253, i32* %g, align 4
  br label %do.end2254

do.end2254:                                       ; preds = %do.body2194
  br label %do.body2255

do.body2255:                                      ; preds = %do.end2254
  %1436 = load i32, i32* %f, align 4
  %1437 = load i32, i32* %c, align 4
  %shr2257 = lshr i32 %1437, 6
  %1438 = load i32, i32* %c, align 4
  %shl2258 = shl i32 %1438, 26
  %or2259 = or i32 %shr2257, %shl2258
  %1439 = load i32, i32* %c, align 4
  %shr2260 = lshr i32 %1439, 11
  %1440 = load i32, i32* %c, align 4
  %shl2261 = shl i32 %1440, 21
  %or2262 = or i32 %shr2260, %shl2261
  %xor2263 = xor i32 %or2259, %or2262
  %1441 = load i32, i32* %c, align 4
  %shr2264 = lshr i32 %1441, 25
  %1442 = load i32, i32* %c, align 4
  %shl2265 = shl i32 %1442, 7
  %or2266 = or i32 %shr2264, %shl2265
  %xor2267 = xor i32 %xor2263, %or2266
  %add2268 = add i32 %1436, %xor2267
  %1443 = load i32, i32* %e, align 4
  %1444 = load i32, i32* %c, align 4
  %1445 = load i32, i32* %d, align 4
  %1446 = load i32, i32* %e, align 4
  %xor2269 = xor i32 %1445, %1446
  %and2270 = and i32 %1444, %xor2269
  %xor2271 = xor i32 %1443, %and2270
  %add2272 = add i32 %add2268, %xor2271
  %add2273 = add i32 %add2272, -1035236496
  %1447 = load i32, i32* %w8, align 4
  %shr2274 = lshr i32 %1447, 17
  %1448 = load i32, i32* %w8, align 4
  %shl2275 = shl i32 %1448, 15
  %or2276 = or i32 %shr2274, %shl2275
  %1449 = load i32, i32* %w8, align 4
  %shr2277 = lshr i32 %1449, 19
  %1450 = load i32, i32* %w8, align 4
  %shl2278 = shl i32 %1450, 13
  %or2279 = or i32 %shr2277, %shl2278
  %xor2280 = xor i32 %or2276, %or2279
  %1451 = load i32, i32* %w8, align 4
  %shr2281 = lshr i32 %1451, 10
  %xor2282 = xor i32 %xor2280, %shr2281
  %1452 = load i32, i32* %w3, align 4
  %add2283 = add i32 %xor2282, %1452
  %1453 = load i32, i32* %w11, align 4
  %shr2284 = lshr i32 %1453, 7
  %1454 = load i32, i32* %w11, align 4
  %shl2285 = shl i32 %1454, 25
  %or2286 = or i32 %shr2284, %shl2285
  %1455 = load i32, i32* %w11, align 4
  %shr2287 = lshr i32 %1455, 18
  %1456 = load i32, i32* %w11, align 4
  %shl2288 = shl i32 %1456, 14
  %or2289 = or i32 %shr2287, %shl2288
  %xor2290 = xor i32 %or2286, %or2289
  %1457 = load i32, i32* %w11, align 4
  %shr2291 = lshr i32 %1457, 3
  %xor2292 = xor i32 %xor2290, %shr2291
  %add2293 = add i32 %add2283, %xor2292
  %1458 = load i32, i32* %w10, align 4
  %add2294 = add i32 %1458, %add2293
  store i32 %add2294, i32* %w10, align 4
  %add2295 = add i32 %add2273, %add2294
  store i32 %add2295, i32* %t12256, align 4
  %1459 = load i32, i32* %g, align 4
  %shr2297 = lshr i32 %1459, 2
  %1460 = load i32, i32* %g, align 4
  %shl2298 = shl i32 %1460, 30
  %or2299 = or i32 %shr2297, %shl2298
  %1461 = load i32, i32* %g, align 4
  %shr2300 = lshr i32 %1461, 13
  %1462 = load i32, i32* %g, align 4
  %shl2301 = shl i32 %1462, 19
  %or2302 = or i32 %shr2300, %shl2301
  %xor2303 = xor i32 %or2299, %or2302
  %1463 = load i32, i32* %g, align 4
  %shr2304 = lshr i32 %1463, 22
  %1464 = load i32, i32* %g, align 4
  %shl2305 = shl i32 %1464, 10
  %or2306 = or i32 %shr2304, %shl2305
  %xor2307 = xor i32 %xor2303, %or2306
  %1465 = load i32, i32* %g, align 4
  %1466 = load i32, i32* %h, align 4
  %and2308 = and i32 %1465, %1466
  %1467 = load i32, i32* %a, align 4
  %1468 = load i32, i32* %g, align 4
  %1469 = load i32, i32* %h, align 4
  %or2309 = or i32 %1468, %1469
  %and2310 = and i32 %1467, %or2309
  %or2311 = or i32 %and2308, %and2310
  %add2312 = add i32 %xor2307, %or2311
  store i32 %add2312, i32* %t22296, align 4
  %1470 = load i32, i32* %t12256, align 4
  %1471 = load i32, i32* %b, align 4
  %add2313 = add i32 %1471, %1470
  store i32 %add2313, i32* %b, align 4
  %1472 = load i32, i32* %t12256, align 4
  %1473 = load i32, i32* %t22296, align 4
  %add2314 = add i32 %1472, %1473
  store i32 %add2314, i32* %f, align 4
  br label %do.end2315

do.end2315:                                       ; preds = %do.body2255
  br label %do.body2316

do.body2316:                                      ; preds = %do.end2315
  %1474 = load i32, i32* %e, align 4
  %1475 = load i32, i32* %b, align 4
  %shr2318 = lshr i32 %1475, 6
  %1476 = load i32, i32* %b, align 4
  %shl2319 = shl i32 %1476, 26
  %or2320 = or i32 %shr2318, %shl2319
  %1477 = load i32, i32* %b, align 4
  %shr2321 = lshr i32 %1477, 11
  %1478 = load i32, i32* %b, align 4
  %shl2322 = shl i32 %1478, 21
  %or2323 = or i32 %shr2321, %shl2322
  %xor2324 = xor i32 %or2320, %or2323
  %1479 = load i32, i32* %b, align 4
  %shr2325 = lshr i32 %1479, 25
  %1480 = load i32, i32* %b, align 4
  %shl2326 = shl i32 %1480, 7
  %or2327 = or i32 %shr2325, %shl2326
  %xor2328 = xor i32 %xor2324, %or2327
  %add2329 = add i32 %1474, %xor2328
  %1481 = load i32, i32* %d, align 4
  %1482 = load i32, i32* %b, align 4
  %1483 = load i32, i32* %c, align 4
  %1484 = load i32, i32* %d, align 4
  %xor2330 = xor i32 %1483, %1484
  %and2331 = and i32 %1482, %xor2330
  %xor2332 = xor i32 %1481, %and2331
  %add2333 = add i32 %add2329, %xor2332
  %add2334 = add i32 %add2333, -949202525
  %1485 = load i32, i32* %w9, align 4
  %shr2335 = lshr i32 %1485, 17
  %1486 = load i32, i32* %w9, align 4
  %shl2336 = shl i32 %1486, 15
  %or2337 = or i32 %shr2335, %shl2336
  %1487 = load i32, i32* %w9, align 4
  %shr2338 = lshr i32 %1487, 19
  %1488 = load i32, i32* %w9, align 4
  %shl2339 = shl i32 %1488, 13
  %or2340 = or i32 %shr2338, %shl2339
  %xor2341 = xor i32 %or2337, %or2340
  %1489 = load i32, i32* %w9, align 4
  %shr2342 = lshr i32 %1489, 10
  %xor2343 = xor i32 %xor2341, %shr2342
  %1490 = load i32, i32* %w4, align 4
  %add2344 = add i32 %xor2343, %1490
  %1491 = load i32, i32* %w12, align 4
  %shr2345 = lshr i32 %1491, 7
  %1492 = load i32, i32* %w12, align 4
  %shl2346 = shl i32 %1492, 25
  %or2347 = or i32 %shr2345, %shl2346
  %1493 = load i32, i32* %w12, align 4
  %shr2348 = lshr i32 %1493, 18
  %1494 = load i32, i32* %w12, align 4
  %shl2349 = shl i32 %1494, 14
  %or2350 = or i32 %shr2348, %shl2349
  %xor2351 = xor i32 %or2347, %or2350
  %1495 = load i32, i32* %w12, align 4
  %shr2352 = lshr i32 %1495, 3
  %xor2353 = xor i32 %xor2351, %shr2352
  %add2354 = add i32 %add2344, %xor2353
  %1496 = load i32, i32* %w11, align 4
  %add2355 = add i32 %1496, %add2354
  store i32 %add2355, i32* %w11, align 4
  %add2356 = add i32 %add2334, %add2355
  store i32 %add2356, i32* %t12317, align 4
  %1497 = load i32, i32* %f, align 4
  %shr2358 = lshr i32 %1497, 2
  %1498 = load i32, i32* %f, align 4
  %shl2359 = shl i32 %1498, 30
  %or2360 = or i32 %shr2358, %shl2359
  %1499 = load i32, i32* %f, align 4
  %shr2361 = lshr i32 %1499, 13
  %1500 = load i32, i32* %f, align 4
  %shl2362 = shl i32 %1500, 19
  %or2363 = or i32 %shr2361, %shl2362
  %xor2364 = xor i32 %or2360, %or2363
  %1501 = load i32, i32* %f, align 4
  %shr2365 = lshr i32 %1501, 22
  %1502 = load i32, i32* %f, align 4
  %shl2366 = shl i32 %1502, 10
  %or2367 = or i32 %shr2365, %shl2366
  %xor2368 = xor i32 %xor2364, %or2367
  %1503 = load i32, i32* %f, align 4
  %1504 = load i32, i32* %g, align 4
  %and2369 = and i32 %1503, %1504
  %1505 = load i32, i32* %h, align 4
  %1506 = load i32, i32* %f, align 4
  %1507 = load i32, i32* %g, align 4
  %or2370 = or i32 %1506, %1507
  %and2371 = and i32 %1505, %or2370
  %or2372 = or i32 %and2369, %and2371
  %add2373 = add i32 %xor2368, %or2372
  store i32 %add2373, i32* %t22357, align 4
  %1508 = load i32, i32* %t12317, align 4
  %1509 = load i32, i32* %a, align 4
  %add2374 = add i32 %1509, %1508
  store i32 %add2374, i32* %a, align 4
  %1510 = load i32, i32* %t12317, align 4
  %1511 = load i32, i32* %t22357, align 4
  %add2375 = add i32 %1510, %1511
  store i32 %add2375, i32* %e, align 4
  br label %do.end2376

do.end2376:                                       ; preds = %do.body2316
  br label %do.body2377

do.body2377:                                      ; preds = %do.end2376
  %1512 = load i32, i32* %d, align 4
  %1513 = load i32, i32* %a, align 4
  %shr2379 = lshr i32 %1513, 6
  %1514 = load i32, i32* %a, align 4
  %shl2380 = shl i32 %1514, 26
  %or2381 = or i32 %shr2379, %shl2380
  %1515 = load i32, i32* %a, align 4
  %shr2382 = lshr i32 %1515, 11
  %1516 = load i32, i32* %a, align 4
  %shl2383 = shl i32 %1516, 21
  %or2384 = or i32 %shr2382, %shl2383
  %xor2385 = xor i32 %or2381, %or2384
  %1517 = load i32, i32* %a, align 4
  %shr2386 = lshr i32 %1517, 25
  %1518 = load i32, i32* %a, align 4
  %shl2387 = shl i32 %1518, 7
  %or2388 = or i32 %shr2386, %shl2387
  %xor2389 = xor i32 %xor2385, %or2388
  %add2390 = add i32 %1512, %xor2389
  %1519 = load i32, i32* %c, align 4
  %1520 = load i32, i32* %a, align 4
  %1521 = load i32, i32* %b, align 4
  %1522 = load i32, i32* %c, align 4
  %xor2391 = xor i32 %1521, %1522
  %and2392 = and i32 %1520, %xor2391
  %xor2393 = xor i32 %1519, %and2392
  %add2394 = add i32 %add2390, %xor2393
  %add2395 = add i32 %add2394, -778901479
  %1523 = load i32, i32* %w10, align 4
  %shr2396 = lshr i32 %1523, 17
  %1524 = load i32, i32* %w10, align 4
  %shl2397 = shl i32 %1524, 15
  %or2398 = or i32 %shr2396, %shl2397
  %1525 = load i32, i32* %w10, align 4
  %shr2399 = lshr i32 %1525, 19
  %1526 = load i32, i32* %w10, align 4
  %shl2400 = shl i32 %1526, 13
  %or2401 = or i32 %shr2399, %shl2400
  %xor2402 = xor i32 %or2398, %or2401
  %1527 = load i32, i32* %w10, align 4
  %shr2403 = lshr i32 %1527, 10
  %xor2404 = xor i32 %xor2402, %shr2403
  %1528 = load i32, i32* %w5, align 4
  %add2405 = add i32 %xor2404, %1528
  %1529 = load i32, i32* %w13, align 4
  %shr2406 = lshr i32 %1529, 7
  %1530 = load i32, i32* %w13, align 4
  %shl2407 = shl i32 %1530, 25
  %or2408 = or i32 %shr2406, %shl2407
  %1531 = load i32, i32* %w13, align 4
  %shr2409 = lshr i32 %1531, 18
  %1532 = load i32, i32* %w13, align 4
  %shl2410 = shl i32 %1532, 14
  %or2411 = or i32 %shr2409, %shl2410
  %xor2412 = xor i32 %or2408, %or2411
  %1533 = load i32, i32* %w13, align 4
  %shr2413 = lshr i32 %1533, 3
  %xor2414 = xor i32 %xor2412, %shr2413
  %add2415 = add i32 %add2405, %xor2414
  %1534 = load i32, i32* %w12, align 4
  %add2416 = add i32 %1534, %add2415
  store i32 %add2416, i32* %w12, align 4
  %add2417 = add i32 %add2395, %add2416
  store i32 %add2417, i32* %t12378, align 4
  %1535 = load i32, i32* %e, align 4
  %shr2419 = lshr i32 %1535, 2
  %1536 = load i32, i32* %e, align 4
  %shl2420 = shl i32 %1536, 30
  %or2421 = or i32 %shr2419, %shl2420
  %1537 = load i32, i32* %e, align 4
  %shr2422 = lshr i32 %1537, 13
  %1538 = load i32, i32* %e, align 4
  %shl2423 = shl i32 %1538, 19
  %or2424 = or i32 %shr2422, %shl2423
  %xor2425 = xor i32 %or2421, %or2424
  %1539 = load i32, i32* %e, align 4
  %shr2426 = lshr i32 %1539, 22
  %1540 = load i32, i32* %e, align 4
  %shl2427 = shl i32 %1540, 10
  %or2428 = or i32 %shr2426, %shl2427
  %xor2429 = xor i32 %xor2425, %or2428
  %1541 = load i32, i32* %e, align 4
  %1542 = load i32, i32* %f, align 4
  %and2430 = and i32 %1541, %1542
  %1543 = load i32, i32* %g, align 4
  %1544 = load i32, i32* %e, align 4
  %1545 = load i32, i32* %f, align 4
  %or2431 = or i32 %1544, %1545
  %and2432 = and i32 %1543, %or2431
  %or2433 = or i32 %and2430, %and2432
  %add2434 = add i32 %xor2429, %or2433
  store i32 %add2434, i32* %t22418, align 4
  %1546 = load i32, i32* %t12378, align 4
  %1547 = load i32, i32* %h, align 4
  %add2435 = add i32 %1547, %1546
  store i32 %add2435, i32* %h, align 4
  %1548 = load i32, i32* %t12378, align 4
  %1549 = load i32, i32* %t22418, align 4
  %add2436 = add i32 %1548, %1549
  store i32 %add2436, i32* %d, align 4
  br label %do.end2437

do.end2437:                                       ; preds = %do.body2377
  br label %do.body2438

do.body2438:                                      ; preds = %do.end2437
  %1550 = load i32, i32* %c, align 4
  %1551 = load i32, i32* %h, align 4
  %shr2440 = lshr i32 %1551, 6
  %1552 = load i32, i32* %h, align 4
  %shl2441 = shl i32 %1552, 26
  %or2442 = or i32 %shr2440, %shl2441
  %1553 = load i32, i32* %h, align 4
  %shr2443 = lshr i32 %1553, 11
  %1554 = load i32, i32* %h, align 4
  %shl2444 = shl i32 %1554, 21
  %or2445 = or i32 %shr2443, %shl2444
  %xor2446 = xor i32 %or2442, %or2445
  %1555 = load i32, i32* %h, align 4
  %shr2447 = lshr i32 %1555, 25
  %1556 = load i32, i32* %h, align 4
  %shl2448 = shl i32 %1556, 7
  %or2449 = or i32 %shr2447, %shl2448
  %xor2450 = xor i32 %xor2446, %or2449
  %add2451 = add i32 %1550, %xor2450
  %1557 = load i32, i32* %b, align 4
  %1558 = load i32, i32* %h, align 4
  %1559 = load i32, i32* %a, align 4
  %1560 = load i32, i32* %b, align 4
  %xor2452 = xor i32 %1559, %1560
  %and2453 = and i32 %1558, %xor2452
  %xor2454 = xor i32 %1557, %and2453
  %add2455 = add i32 %add2451, %xor2454
  %add2456 = add i32 %add2455, -694614492
  %1561 = load i32, i32* %w11, align 4
  %shr2457 = lshr i32 %1561, 17
  %1562 = load i32, i32* %w11, align 4
  %shl2458 = shl i32 %1562, 15
  %or2459 = or i32 %shr2457, %shl2458
  %1563 = load i32, i32* %w11, align 4
  %shr2460 = lshr i32 %1563, 19
  %1564 = load i32, i32* %w11, align 4
  %shl2461 = shl i32 %1564, 13
  %or2462 = or i32 %shr2460, %shl2461
  %xor2463 = xor i32 %or2459, %or2462
  %1565 = load i32, i32* %w11, align 4
  %shr2464 = lshr i32 %1565, 10
  %xor2465 = xor i32 %xor2463, %shr2464
  %1566 = load i32, i32* %w6, align 4
  %add2466 = add i32 %xor2465, %1566
  %1567 = load i32, i32* %w14, align 4
  %shr2467 = lshr i32 %1567, 7
  %1568 = load i32, i32* %w14, align 4
  %shl2468 = shl i32 %1568, 25
  %or2469 = or i32 %shr2467, %shl2468
  %1569 = load i32, i32* %w14, align 4
  %shr2470 = lshr i32 %1569, 18
  %1570 = load i32, i32* %w14, align 4
  %shl2471 = shl i32 %1570, 14
  %or2472 = or i32 %shr2470, %shl2471
  %xor2473 = xor i32 %or2469, %or2472
  %1571 = load i32, i32* %w14, align 4
  %shr2474 = lshr i32 %1571, 3
  %xor2475 = xor i32 %xor2473, %shr2474
  %add2476 = add i32 %add2466, %xor2475
  %1572 = load i32, i32* %w13, align 4
  %add2477 = add i32 %1572, %add2476
  store i32 %add2477, i32* %w13, align 4
  %add2478 = add i32 %add2456, %add2477
  store i32 %add2478, i32* %t12439, align 4
  %1573 = load i32, i32* %d, align 4
  %shr2480 = lshr i32 %1573, 2
  %1574 = load i32, i32* %d, align 4
  %shl2481 = shl i32 %1574, 30
  %or2482 = or i32 %shr2480, %shl2481
  %1575 = load i32, i32* %d, align 4
  %shr2483 = lshr i32 %1575, 13
  %1576 = load i32, i32* %d, align 4
  %shl2484 = shl i32 %1576, 19
  %or2485 = or i32 %shr2483, %shl2484
  %xor2486 = xor i32 %or2482, %or2485
  %1577 = load i32, i32* %d, align 4
  %shr2487 = lshr i32 %1577, 22
  %1578 = load i32, i32* %d, align 4
  %shl2488 = shl i32 %1578, 10
  %or2489 = or i32 %shr2487, %shl2488
  %xor2490 = xor i32 %xor2486, %or2489
  %1579 = load i32, i32* %d, align 4
  %1580 = load i32, i32* %e, align 4
  %and2491 = and i32 %1579, %1580
  %1581 = load i32, i32* %f, align 4
  %1582 = load i32, i32* %d, align 4
  %1583 = load i32, i32* %e, align 4
  %or2492 = or i32 %1582, %1583
  %and2493 = and i32 %1581, %or2492
  %or2494 = or i32 %and2491, %and2493
  %add2495 = add i32 %xor2490, %or2494
  store i32 %add2495, i32* %t22479, align 4
  %1584 = load i32, i32* %t12439, align 4
  %1585 = load i32, i32* %g, align 4
  %add2496 = add i32 %1585, %1584
  store i32 %add2496, i32* %g, align 4
  %1586 = load i32, i32* %t12439, align 4
  %1587 = load i32, i32* %t22479, align 4
  %add2497 = add i32 %1586, %1587
  store i32 %add2497, i32* %c, align 4
  br label %do.end2498

do.end2498:                                       ; preds = %do.body2438
  br label %do.body2499

do.body2499:                                      ; preds = %do.end2498
  %1588 = load i32, i32* %b, align 4
  %1589 = load i32, i32* %g, align 4
  %shr2501 = lshr i32 %1589, 6
  %1590 = load i32, i32* %g, align 4
  %shl2502 = shl i32 %1590, 26
  %or2503 = or i32 %shr2501, %shl2502
  %1591 = load i32, i32* %g, align 4
  %shr2504 = lshr i32 %1591, 11
  %1592 = load i32, i32* %g, align 4
  %shl2505 = shl i32 %1592, 21
  %or2506 = or i32 %shr2504, %shl2505
  %xor2507 = xor i32 %or2503, %or2506
  %1593 = load i32, i32* %g, align 4
  %shr2508 = lshr i32 %1593, 25
  %1594 = load i32, i32* %g, align 4
  %shl2509 = shl i32 %1594, 7
  %or2510 = or i32 %shr2508, %shl2509
  %xor2511 = xor i32 %xor2507, %or2510
  %add2512 = add i32 %1588, %xor2511
  %1595 = load i32, i32* %a, align 4
  %1596 = load i32, i32* %g, align 4
  %1597 = load i32, i32* %h, align 4
  %1598 = load i32, i32* %a, align 4
  %xor2513 = xor i32 %1597, %1598
  %and2514 = and i32 %1596, %xor2513
  %xor2515 = xor i32 %1595, %and2514
  %add2516 = add i32 %add2512, %xor2515
  %add2517 = add i32 %add2516, -200395387
  %1599 = load i32, i32* %w12, align 4
  %shr2518 = lshr i32 %1599, 17
  %1600 = load i32, i32* %w12, align 4
  %shl2519 = shl i32 %1600, 15
  %or2520 = or i32 %shr2518, %shl2519
  %1601 = load i32, i32* %w12, align 4
  %shr2521 = lshr i32 %1601, 19
  %1602 = load i32, i32* %w12, align 4
  %shl2522 = shl i32 %1602, 13
  %or2523 = or i32 %shr2521, %shl2522
  %xor2524 = xor i32 %or2520, %or2523
  %1603 = load i32, i32* %w12, align 4
  %shr2525 = lshr i32 %1603, 10
  %xor2526 = xor i32 %xor2524, %shr2525
  %1604 = load i32, i32* %w7, align 4
  %add2527 = add i32 %xor2526, %1604
  %1605 = load i32, i32* %w15, align 4
  %shr2528 = lshr i32 %1605, 7
  %1606 = load i32, i32* %w15, align 4
  %shl2529 = shl i32 %1606, 25
  %or2530 = or i32 %shr2528, %shl2529
  %1607 = load i32, i32* %w15, align 4
  %shr2531 = lshr i32 %1607, 18
  %1608 = load i32, i32* %w15, align 4
  %shl2532 = shl i32 %1608, 14
  %or2533 = or i32 %shr2531, %shl2532
  %xor2534 = xor i32 %or2530, %or2533
  %1609 = load i32, i32* %w15, align 4
  %shr2535 = lshr i32 %1609, 3
  %xor2536 = xor i32 %xor2534, %shr2535
  %add2537 = add i32 %add2527, %xor2536
  %1610 = load i32, i32* %w14, align 4
  %add2538 = add i32 %1610, %add2537
  store i32 %add2538, i32* %w14, align 4
  %add2539 = add i32 %add2517, %add2538
  store i32 %add2539, i32* %t12500, align 4
  %1611 = load i32, i32* %c, align 4
  %shr2541 = lshr i32 %1611, 2
  %1612 = load i32, i32* %c, align 4
  %shl2542 = shl i32 %1612, 30
  %or2543 = or i32 %shr2541, %shl2542
  %1613 = load i32, i32* %c, align 4
  %shr2544 = lshr i32 %1613, 13
  %1614 = load i32, i32* %c, align 4
  %shl2545 = shl i32 %1614, 19
  %or2546 = or i32 %shr2544, %shl2545
  %xor2547 = xor i32 %or2543, %or2546
  %1615 = load i32, i32* %c, align 4
  %shr2548 = lshr i32 %1615, 22
  %1616 = load i32, i32* %c, align 4
  %shl2549 = shl i32 %1616, 10
  %or2550 = or i32 %shr2548, %shl2549
  %xor2551 = xor i32 %xor2547, %or2550
  %1617 = load i32, i32* %c, align 4
  %1618 = load i32, i32* %d, align 4
  %and2552 = and i32 %1617, %1618
  %1619 = load i32, i32* %e, align 4
  %1620 = load i32, i32* %c, align 4
  %1621 = load i32, i32* %d, align 4
  %or2553 = or i32 %1620, %1621
  %and2554 = and i32 %1619, %or2553
  %or2555 = or i32 %and2552, %and2554
  %add2556 = add i32 %xor2551, %or2555
  store i32 %add2556, i32* %t22540, align 4
  %1622 = load i32, i32* %t12500, align 4
  %1623 = load i32, i32* %f, align 4
  %add2557 = add i32 %1623, %1622
  store i32 %add2557, i32* %f, align 4
  %1624 = load i32, i32* %t12500, align 4
  %1625 = load i32, i32* %t22540, align 4
  %add2558 = add i32 %1624, %1625
  store i32 %add2558, i32* %b, align 4
  br label %do.end2559

do.end2559:                                       ; preds = %do.body2499
  br label %do.body2560

do.body2560:                                      ; preds = %do.end2559
  %1626 = load i32, i32* %a, align 4
  %1627 = load i32, i32* %f, align 4
  %shr2562 = lshr i32 %1627, 6
  %1628 = load i32, i32* %f, align 4
  %shl2563 = shl i32 %1628, 26
  %or2564 = or i32 %shr2562, %shl2563
  %1629 = load i32, i32* %f, align 4
  %shr2565 = lshr i32 %1629, 11
  %1630 = load i32, i32* %f, align 4
  %shl2566 = shl i32 %1630, 21
  %or2567 = or i32 %shr2565, %shl2566
  %xor2568 = xor i32 %or2564, %or2567
  %1631 = load i32, i32* %f, align 4
  %shr2569 = lshr i32 %1631, 25
  %1632 = load i32, i32* %f, align 4
  %shl2570 = shl i32 %1632, 7
  %or2571 = or i32 %shr2569, %shl2570
  %xor2572 = xor i32 %xor2568, %or2571
  %add2573 = add i32 %1626, %xor2572
  %1633 = load i32, i32* %h, align 4
  %1634 = load i32, i32* %f, align 4
  %1635 = load i32, i32* %g, align 4
  %1636 = load i32, i32* %h, align 4
  %xor2574 = xor i32 %1635, %1636
  %and2575 = and i32 %1634, %xor2574
  %xor2576 = xor i32 %1633, %and2575
  %add2577 = add i32 %add2573, %xor2576
  %add2578 = add i32 %add2577, 275423344
  %1637 = load i32, i32* %w13, align 4
  %shr2579 = lshr i32 %1637, 17
  %1638 = load i32, i32* %w13, align 4
  %shl2580 = shl i32 %1638, 15
  %or2581 = or i32 %shr2579, %shl2580
  %1639 = load i32, i32* %w13, align 4
  %shr2582 = lshr i32 %1639, 19
  %1640 = load i32, i32* %w13, align 4
  %shl2583 = shl i32 %1640, 13
  %or2584 = or i32 %shr2582, %shl2583
  %xor2585 = xor i32 %or2581, %or2584
  %1641 = load i32, i32* %w13, align 4
  %shr2586 = lshr i32 %1641, 10
  %xor2587 = xor i32 %xor2585, %shr2586
  %1642 = load i32, i32* %w8, align 4
  %add2588 = add i32 %xor2587, %1642
  %1643 = load i32, i32* %w0, align 4
  %shr2589 = lshr i32 %1643, 7
  %1644 = load i32, i32* %w0, align 4
  %shl2590 = shl i32 %1644, 25
  %or2591 = or i32 %shr2589, %shl2590
  %1645 = load i32, i32* %w0, align 4
  %shr2592 = lshr i32 %1645, 18
  %1646 = load i32, i32* %w0, align 4
  %shl2593 = shl i32 %1646, 14
  %or2594 = or i32 %shr2592, %shl2593
  %xor2595 = xor i32 %or2591, %or2594
  %1647 = load i32, i32* %w0, align 4
  %shr2596 = lshr i32 %1647, 3
  %xor2597 = xor i32 %xor2595, %shr2596
  %add2598 = add i32 %add2588, %xor2597
  %1648 = load i32, i32* %w15, align 4
  %add2599 = add i32 %1648, %add2598
  store i32 %add2599, i32* %w15, align 4
  %add2600 = add i32 %add2578, %add2599
  store i32 %add2600, i32* %t12561, align 4
  %1649 = load i32, i32* %b, align 4
  %shr2602 = lshr i32 %1649, 2
  %1650 = load i32, i32* %b, align 4
  %shl2603 = shl i32 %1650, 30
  %or2604 = or i32 %shr2602, %shl2603
  %1651 = load i32, i32* %b, align 4
  %shr2605 = lshr i32 %1651, 13
  %1652 = load i32, i32* %b, align 4
  %shl2606 = shl i32 %1652, 19
  %or2607 = or i32 %shr2605, %shl2606
  %xor2608 = xor i32 %or2604, %or2607
  %1653 = load i32, i32* %b, align 4
  %shr2609 = lshr i32 %1653, 22
  %1654 = load i32, i32* %b, align 4
  %shl2610 = shl i32 %1654, 10
  %or2611 = or i32 %shr2609, %shl2610
  %xor2612 = xor i32 %xor2608, %or2611
  %1655 = load i32, i32* %b, align 4
  %1656 = load i32, i32* %c, align 4
  %and2613 = and i32 %1655, %1656
  %1657 = load i32, i32* %d, align 4
  %1658 = load i32, i32* %b, align 4
  %1659 = load i32, i32* %c, align 4
  %or2614 = or i32 %1658, %1659
  %and2615 = and i32 %1657, %or2614
  %or2616 = or i32 %and2613, %and2615
  %add2617 = add i32 %xor2612, %or2616
  store i32 %add2617, i32* %t22601, align 4
  %1660 = load i32, i32* %t12561, align 4
  %1661 = load i32, i32* %e, align 4
  %add2618 = add i32 %1661, %1660
  store i32 %add2618, i32* %e, align 4
  %1662 = load i32, i32* %t12561, align 4
  %1663 = load i32, i32* %t22601, align 4
  %add2619 = add i32 %1662, %1663
  store i32 %add2619, i32* %a, align 4
  br label %do.end2620

do.end2620:                                       ; preds = %do.body2560
  br label %do.body2621

do.body2621:                                      ; preds = %do.end2620
  %1664 = load i32, i32* %h, align 4
  %1665 = load i32, i32* %e, align 4
  %shr2623 = lshr i32 %1665, 6
  %1666 = load i32, i32* %e, align 4
  %shl2624 = shl i32 %1666, 26
  %or2625 = or i32 %shr2623, %shl2624
  %1667 = load i32, i32* %e, align 4
  %shr2626 = lshr i32 %1667, 11
  %1668 = load i32, i32* %e, align 4
  %shl2627 = shl i32 %1668, 21
  %or2628 = or i32 %shr2626, %shl2627
  %xor2629 = xor i32 %or2625, %or2628
  %1669 = load i32, i32* %e, align 4
  %shr2630 = lshr i32 %1669, 25
  %1670 = load i32, i32* %e, align 4
  %shl2631 = shl i32 %1670, 7
  %or2632 = or i32 %shr2630, %shl2631
  %xor2633 = xor i32 %xor2629, %or2632
  %add2634 = add i32 %1664, %xor2633
  %1671 = load i32, i32* %g, align 4
  %1672 = load i32, i32* %e, align 4
  %1673 = load i32, i32* %f, align 4
  %1674 = load i32, i32* %g, align 4
  %xor2635 = xor i32 %1673, %1674
  %and2636 = and i32 %1672, %xor2635
  %xor2637 = xor i32 %1671, %and2636
  %add2638 = add i32 %add2634, %xor2637
  %add2639 = add i32 %add2638, 430227734
  %1675 = load i32, i32* %w14, align 4
  %shr2640 = lshr i32 %1675, 17
  %1676 = load i32, i32* %w14, align 4
  %shl2641 = shl i32 %1676, 15
  %or2642 = or i32 %shr2640, %shl2641
  %1677 = load i32, i32* %w14, align 4
  %shr2643 = lshr i32 %1677, 19
  %1678 = load i32, i32* %w14, align 4
  %shl2644 = shl i32 %1678, 13
  %or2645 = or i32 %shr2643, %shl2644
  %xor2646 = xor i32 %or2642, %or2645
  %1679 = load i32, i32* %w14, align 4
  %shr2647 = lshr i32 %1679, 10
  %xor2648 = xor i32 %xor2646, %shr2647
  %1680 = load i32, i32* %w9, align 4
  %add2649 = add i32 %xor2648, %1680
  %1681 = load i32, i32* %w1, align 4
  %shr2650 = lshr i32 %1681, 7
  %1682 = load i32, i32* %w1, align 4
  %shl2651 = shl i32 %1682, 25
  %or2652 = or i32 %shr2650, %shl2651
  %1683 = load i32, i32* %w1, align 4
  %shr2653 = lshr i32 %1683, 18
  %1684 = load i32, i32* %w1, align 4
  %shl2654 = shl i32 %1684, 14
  %or2655 = or i32 %shr2653, %shl2654
  %xor2656 = xor i32 %or2652, %or2655
  %1685 = load i32, i32* %w1, align 4
  %shr2657 = lshr i32 %1685, 3
  %xor2658 = xor i32 %xor2656, %shr2657
  %add2659 = add i32 %add2649, %xor2658
  %1686 = load i32, i32* %w0, align 4
  %add2660 = add i32 %1686, %add2659
  store i32 %add2660, i32* %w0, align 4
  %add2661 = add i32 %add2639, %add2660
  store i32 %add2661, i32* %t12622, align 4
  %1687 = load i32, i32* %a, align 4
  %shr2663 = lshr i32 %1687, 2
  %1688 = load i32, i32* %a, align 4
  %shl2664 = shl i32 %1688, 30
  %or2665 = or i32 %shr2663, %shl2664
  %1689 = load i32, i32* %a, align 4
  %shr2666 = lshr i32 %1689, 13
  %1690 = load i32, i32* %a, align 4
  %shl2667 = shl i32 %1690, 19
  %or2668 = or i32 %shr2666, %shl2667
  %xor2669 = xor i32 %or2665, %or2668
  %1691 = load i32, i32* %a, align 4
  %shr2670 = lshr i32 %1691, 22
  %1692 = load i32, i32* %a, align 4
  %shl2671 = shl i32 %1692, 10
  %or2672 = or i32 %shr2670, %shl2671
  %xor2673 = xor i32 %xor2669, %or2672
  %1693 = load i32, i32* %a, align 4
  %1694 = load i32, i32* %b, align 4
  %and2674 = and i32 %1693, %1694
  %1695 = load i32, i32* %c, align 4
  %1696 = load i32, i32* %a, align 4
  %1697 = load i32, i32* %b, align 4
  %or2675 = or i32 %1696, %1697
  %and2676 = and i32 %1695, %or2675
  %or2677 = or i32 %and2674, %and2676
  %add2678 = add i32 %xor2673, %or2677
  store i32 %add2678, i32* %t22662, align 4
  %1698 = load i32, i32* %t12622, align 4
  %1699 = load i32, i32* %d, align 4
  %add2679 = add i32 %1699, %1698
  store i32 %add2679, i32* %d, align 4
  %1700 = load i32, i32* %t12622, align 4
  %1701 = load i32, i32* %t22662, align 4
  %add2680 = add i32 %1700, %1701
  store i32 %add2680, i32* %h, align 4
  br label %do.end2681

do.end2681:                                       ; preds = %do.body2621
  br label %do.body2682

do.body2682:                                      ; preds = %do.end2681
  %1702 = load i32, i32* %g, align 4
  %1703 = load i32, i32* %d, align 4
  %shr2684 = lshr i32 %1703, 6
  %1704 = load i32, i32* %d, align 4
  %shl2685 = shl i32 %1704, 26
  %or2686 = or i32 %shr2684, %shl2685
  %1705 = load i32, i32* %d, align 4
  %shr2687 = lshr i32 %1705, 11
  %1706 = load i32, i32* %d, align 4
  %shl2688 = shl i32 %1706, 21
  %or2689 = or i32 %shr2687, %shl2688
  %xor2690 = xor i32 %or2686, %or2689
  %1707 = load i32, i32* %d, align 4
  %shr2691 = lshr i32 %1707, 25
  %1708 = load i32, i32* %d, align 4
  %shl2692 = shl i32 %1708, 7
  %or2693 = or i32 %shr2691, %shl2692
  %xor2694 = xor i32 %xor2690, %or2693
  %add2695 = add i32 %1702, %xor2694
  %1709 = load i32, i32* %f, align 4
  %1710 = load i32, i32* %d, align 4
  %1711 = load i32, i32* %e, align 4
  %1712 = load i32, i32* %f, align 4
  %xor2696 = xor i32 %1711, %1712
  %and2697 = and i32 %1710, %xor2696
  %xor2698 = xor i32 %1709, %and2697
  %add2699 = add i32 %add2695, %xor2698
  %add2700 = add i32 %add2699, 506948616
  %1713 = load i32, i32* %w15, align 4
  %shr2701 = lshr i32 %1713, 17
  %1714 = load i32, i32* %w15, align 4
  %shl2702 = shl i32 %1714, 15
  %or2703 = or i32 %shr2701, %shl2702
  %1715 = load i32, i32* %w15, align 4
  %shr2704 = lshr i32 %1715, 19
  %1716 = load i32, i32* %w15, align 4
  %shl2705 = shl i32 %1716, 13
  %or2706 = or i32 %shr2704, %shl2705
  %xor2707 = xor i32 %or2703, %or2706
  %1717 = load i32, i32* %w15, align 4
  %shr2708 = lshr i32 %1717, 10
  %xor2709 = xor i32 %xor2707, %shr2708
  %1718 = load i32, i32* %w10, align 4
  %add2710 = add i32 %xor2709, %1718
  %1719 = load i32, i32* %w2, align 4
  %shr2711 = lshr i32 %1719, 7
  %1720 = load i32, i32* %w2, align 4
  %shl2712 = shl i32 %1720, 25
  %or2713 = or i32 %shr2711, %shl2712
  %1721 = load i32, i32* %w2, align 4
  %shr2714 = lshr i32 %1721, 18
  %1722 = load i32, i32* %w2, align 4
  %shl2715 = shl i32 %1722, 14
  %or2716 = or i32 %shr2714, %shl2715
  %xor2717 = xor i32 %or2713, %or2716
  %1723 = load i32, i32* %w2, align 4
  %shr2718 = lshr i32 %1723, 3
  %xor2719 = xor i32 %xor2717, %shr2718
  %add2720 = add i32 %add2710, %xor2719
  %1724 = load i32, i32* %w1, align 4
  %add2721 = add i32 %1724, %add2720
  store i32 %add2721, i32* %w1, align 4
  %add2722 = add i32 %add2700, %add2721
  store i32 %add2722, i32* %t12683, align 4
  %1725 = load i32, i32* %h, align 4
  %shr2724 = lshr i32 %1725, 2
  %1726 = load i32, i32* %h, align 4
  %shl2725 = shl i32 %1726, 30
  %or2726 = or i32 %shr2724, %shl2725
  %1727 = load i32, i32* %h, align 4
  %shr2727 = lshr i32 %1727, 13
  %1728 = load i32, i32* %h, align 4
  %shl2728 = shl i32 %1728, 19
  %or2729 = or i32 %shr2727, %shl2728
  %xor2730 = xor i32 %or2726, %or2729
  %1729 = load i32, i32* %h, align 4
  %shr2731 = lshr i32 %1729, 22
  %1730 = load i32, i32* %h, align 4
  %shl2732 = shl i32 %1730, 10
  %or2733 = or i32 %shr2731, %shl2732
  %xor2734 = xor i32 %xor2730, %or2733
  %1731 = load i32, i32* %h, align 4
  %1732 = load i32, i32* %a, align 4
  %and2735 = and i32 %1731, %1732
  %1733 = load i32, i32* %b, align 4
  %1734 = load i32, i32* %h, align 4
  %1735 = load i32, i32* %a, align 4
  %or2736 = or i32 %1734, %1735
  %and2737 = and i32 %1733, %or2736
  %or2738 = or i32 %and2735, %and2737
  %add2739 = add i32 %xor2734, %or2738
  store i32 %add2739, i32* %t22723, align 4
  %1736 = load i32, i32* %t12683, align 4
  %1737 = load i32, i32* %c, align 4
  %add2740 = add i32 %1737, %1736
  store i32 %add2740, i32* %c, align 4
  %1738 = load i32, i32* %t12683, align 4
  %1739 = load i32, i32* %t22723, align 4
  %add2741 = add i32 %1738, %1739
  store i32 %add2741, i32* %g, align 4
  br label %do.end2742

do.end2742:                                       ; preds = %do.body2682
  br label %do.body2743

do.body2743:                                      ; preds = %do.end2742
  %1740 = load i32, i32* %f, align 4
  %1741 = load i32, i32* %c, align 4
  %shr2745 = lshr i32 %1741, 6
  %1742 = load i32, i32* %c, align 4
  %shl2746 = shl i32 %1742, 26
  %or2747 = or i32 %shr2745, %shl2746
  %1743 = load i32, i32* %c, align 4
  %shr2748 = lshr i32 %1743, 11
  %1744 = load i32, i32* %c, align 4
  %shl2749 = shl i32 %1744, 21
  %or2750 = or i32 %shr2748, %shl2749
  %xor2751 = xor i32 %or2747, %or2750
  %1745 = load i32, i32* %c, align 4
  %shr2752 = lshr i32 %1745, 25
  %1746 = load i32, i32* %c, align 4
  %shl2753 = shl i32 %1746, 7
  %or2754 = or i32 %shr2752, %shl2753
  %xor2755 = xor i32 %xor2751, %or2754
  %add2756 = add i32 %1740, %xor2755
  %1747 = load i32, i32* %e, align 4
  %1748 = load i32, i32* %c, align 4
  %1749 = load i32, i32* %d, align 4
  %1750 = load i32, i32* %e, align 4
  %xor2757 = xor i32 %1749, %1750
  %and2758 = and i32 %1748, %xor2757
  %xor2759 = xor i32 %1747, %and2758
  %add2760 = add i32 %add2756, %xor2759
  %add2761 = add i32 %add2760, 659060556
  %1751 = load i32, i32* %w0, align 4
  %shr2762 = lshr i32 %1751, 17
  %1752 = load i32, i32* %w0, align 4
  %shl2763 = shl i32 %1752, 15
  %or2764 = or i32 %shr2762, %shl2763
  %1753 = load i32, i32* %w0, align 4
  %shr2765 = lshr i32 %1753, 19
  %1754 = load i32, i32* %w0, align 4
  %shl2766 = shl i32 %1754, 13
  %or2767 = or i32 %shr2765, %shl2766
  %xor2768 = xor i32 %or2764, %or2767
  %1755 = load i32, i32* %w0, align 4
  %shr2769 = lshr i32 %1755, 10
  %xor2770 = xor i32 %xor2768, %shr2769
  %1756 = load i32, i32* %w11, align 4
  %add2771 = add i32 %xor2770, %1756
  %1757 = load i32, i32* %w3, align 4
  %shr2772 = lshr i32 %1757, 7
  %1758 = load i32, i32* %w3, align 4
  %shl2773 = shl i32 %1758, 25
  %or2774 = or i32 %shr2772, %shl2773
  %1759 = load i32, i32* %w3, align 4
  %shr2775 = lshr i32 %1759, 18
  %1760 = load i32, i32* %w3, align 4
  %shl2776 = shl i32 %1760, 14
  %or2777 = or i32 %shr2775, %shl2776
  %xor2778 = xor i32 %or2774, %or2777
  %1761 = load i32, i32* %w3, align 4
  %shr2779 = lshr i32 %1761, 3
  %xor2780 = xor i32 %xor2778, %shr2779
  %add2781 = add i32 %add2771, %xor2780
  %1762 = load i32, i32* %w2, align 4
  %add2782 = add i32 %1762, %add2781
  store i32 %add2782, i32* %w2, align 4
  %add2783 = add i32 %add2761, %add2782
  store i32 %add2783, i32* %t12744, align 4
  %1763 = load i32, i32* %g, align 4
  %shr2785 = lshr i32 %1763, 2
  %1764 = load i32, i32* %g, align 4
  %shl2786 = shl i32 %1764, 30
  %or2787 = or i32 %shr2785, %shl2786
  %1765 = load i32, i32* %g, align 4
  %shr2788 = lshr i32 %1765, 13
  %1766 = load i32, i32* %g, align 4
  %shl2789 = shl i32 %1766, 19
  %or2790 = or i32 %shr2788, %shl2789
  %xor2791 = xor i32 %or2787, %or2790
  %1767 = load i32, i32* %g, align 4
  %shr2792 = lshr i32 %1767, 22
  %1768 = load i32, i32* %g, align 4
  %shl2793 = shl i32 %1768, 10
  %or2794 = or i32 %shr2792, %shl2793
  %xor2795 = xor i32 %xor2791, %or2794
  %1769 = load i32, i32* %g, align 4
  %1770 = load i32, i32* %h, align 4
  %and2796 = and i32 %1769, %1770
  %1771 = load i32, i32* %a, align 4
  %1772 = load i32, i32* %g, align 4
  %1773 = load i32, i32* %h, align 4
  %or2797 = or i32 %1772, %1773
  %and2798 = and i32 %1771, %or2797
  %or2799 = or i32 %and2796, %and2798
  %add2800 = add i32 %xor2795, %or2799
  store i32 %add2800, i32* %t22784, align 4
  %1774 = load i32, i32* %t12744, align 4
  %1775 = load i32, i32* %b, align 4
  %add2801 = add i32 %1775, %1774
  store i32 %add2801, i32* %b, align 4
  %1776 = load i32, i32* %t12744, align 4
  %1777 = load i32, i32* %t22784, align 4
  %add2802 = add i32 %1776, %1777
  store i32 %add2802, i32* %f, align 4
  br label %do.end2803

do.end2803:                                       ; preds = %do.body2743
  br label %do.body2804

do.body2804:                                      ; preds = %do.end2803
  %1778 = load i32, i32* %e, align 4
  %1779 = load i32, i32* %b, align 4
  %shr2806 = lshr i32 %1779, 6
  %1780 = load i32, i32* %b, align 4
  %shl2807 = shl i32 %1780, 26
  %or2808 = or i32 %shr2806, %shl2807
  %1781 = load i32, i32* %b, align 4
  %shr2809 = lshr i32 %1781, 11
  %1782 = load i32, i32* %b, align 4
  %shl2810 = shl i32 %1782, 21
  %or2811 = or i32 %shr2809, %shl2810
  %xor2812 = xor i32 %or2808, %or2811
  %1783 = load i32, i32* %b, align 4
  %shr2813 = lshr i32 %1783, 25
  %1784 = load i32, i32* %b, align 4
  %shl2814 = shl i32 %1784, 7
  %or2815 = or i32 %shr2813, %shl2814
  %xor2816 = xor i32 %xor2812, %or2815
  %add2817 = add i32 %1778, %xor2816
  %1785 = load i32, i32* %d, align 4
  %1786 = load i32, i32* %b, align 4
  %1787 = load i32, i32* %c, align 4
  %1788 = load i32, i32* %d, align 4
  %xor2818 = xor i32 %1787, %1788
  %and2819 = and i32 %1786, %xor2818
  %xor2820 = xor i32 %1785, %and2819
  %add2821 = add i32 %add2817, %xor2820
  %add2822 = add i32 %add2821, 883997877
  %1789 = load i32, i32* %w1, align 4
  %shr2823 = lshr i32 %1789, 17
  %1790 = load i32, i32* %w1, align 4
  %shl2824 = shl i32 %1790, 15
  %or2825 = or i32 %shr2823, %shl2824
  %1791 = load i32, i32* %w1, align 4
  %shr2826 = lshr i32 %1791, 19
  %1792 = load i32, i32* %w1, align 4
  %shl2827 = shl i32 %1792, 13
  %or2828 = or i32 %shr2826, %shl2827
  %xor2829 = xor i32 %or2825, %or2828
  %1793 = load i32, i32* %w1, align 4
  %shr2830 = lshr i32 %1793, 10
  %xor2831 = xor i32 %xor2829, %shr2830
  %1794 = load i32, i32* %w12, align 4
  %add2832 = add i32 %xor2831, %1794
  %1795 = load i32, i32* %w4, align 4
  %shr2833 = lshr i32 %1795, 7
  %1796 = load i32, i32* %w4, align 4
  %shl2834 = shl i32 %1796, 25
  %or2835 = or i32 %shr2833, %shl2834
  %1797 = load i32, i32* %w4, align 4
  %shr2836 = lshr i32 %1797, 18
  %1798 = load i32, i32* %w4, align 4
  %shl2837 = shl i32 %1798, 14
  %or2838 = or i32 %shr2836, %shl2837
  %xor2839 = xor i32 %or2835, %or2838
  %1799 = load i32, i32* %w4, align 4
  %shr2840 = lshr i32 %1799, 3
  %xor2841 = xor i32 %xor2839, %shr2840
  %add2842 = add i32 %add2832, %xor2841
  %1800 = load i32, i32* %w3, align 4
  %add2843 = add i32 %1800, %add2842
  store i32 %add2843, i32* %w3, align 4
  %add2844 = add i32 %add2822, %add2843
  store i32 %add2844, i32* %t12805, align 4
  %1801 = load i32, i32* %f, align 4
  %shr2846 = lshr i32 %1801, 2
  %1802 = load i32, i32* %f, align 4
  %shl2847 = shl i32 %1802, 30
  %or2848 = or i32 %shr2846, %shl2847
  %1803 = load i32, i32* %f, align 4
  %shr2849 = lshr i32 %1803, 13
  %1804 = load i32, i32* %f, align 4
  %shl2850 = shl i32 %1804, 19
  %or2851 = or i32 %shr2849, %shl2850
  %xor2852 = xor i32 %or2848, %or2851
  %1805 = load i32, i32* %f, align 4
  %shr2853 = lshr i32 %1805, 22
  %1806 = load i32, i32* %f, align 4
  %shl2854 = shl i32 %1806, 10
  %or2855 = or i32 %shr2853, %shl2854
  %xor2856 = xor i32 %xor2852, %or2855
  %1807 = load i32, i32* %f, align 4
  %1808 = load i32, i32* %g, align 4
  %and2857 = and i32 %1807, %1808
  %1809 = load i32, i32* %h, align 4
  %1810 = load i32, i32* %f, align 4
  %1811 = load i32, i32* %g, align 4
  %or2858 = or i32 %1810, %1811
  %and2859 = and i32 %1809, %or2858
  %or2860 = or i32 %and2857, %and2859
  %add2861 = add i32 %xor2856, %or2860
  store i32 %add2861, i32* %t22845, align 4
  %1812 = load i32, i32* %t12805, align 4
  %1813 = load i32, i32* %a, align 4
  %add2862 = add i32 %1813, %1812
  store i32 %add2862, i32* %a, align 4
  %1814 = load i32, i32* %t12805, align 4
  %1815 = load i32, i32* %t22845, align 4
  %add2863 = add i32 %1814, %1815
  store i32 %add2863, i32* %e, align 4
  br label %do.end2864

do.end2864:                                       ; preds = %do.body2804
  br label %do.body2865

do.body2865:                                      ; preds = %do.end2864
  %1816 = load i32, i32* %d, align 4
  %1817 = load i32, i32* %a, align 4
  %shr2867 = lshr i32 %1817, 6
  %1818 = load i32, i32* %a, align 4
  %shl2868 = shl i32 %1818, 26
  %or2869 = or i32 %shr2867, %shl2868
  %1819 = load i32, i32* %a, align 4
  %shr2870 = lshr i32 %1819, 11
  %1820 = load i32, i32* %a, align 4
  %shl2871 = shl i32 %1820, 21
  %or2872 = or i32 %shr2870, %shl2871
  %xor2873 = xor i32 %or2869, %or2872
  %1821 = load i32, i32* %a, align 4
  %shr2874 = lshr i32 %1821, 25
  %1822 = load i32, i32* %a, align 4
  %shl2875 = shl i32 %1822, 7
  %or2876 = or i32 %shr2874, %shl2875
  %xor2877 = xor i32 %xor2873, %or2876
  %add2878 = add i32 %1816, %xor2877
  %1823 = load i32, i32* %c, align 4
  %1824 = load i32, i32* %a, align 4
  %1825 = load i32, i32* %b, align 4
  %1826 = load i32, i32* %c, align 4
  %xor2879 = xor i32 %1825, %1826
  %and2880 = and i32 %1824, %xor2879
  %xor2881 = xor i32 %1823, %and2880
  %add2882 = add i32 %add2878, %xor2881
  %add2883 = add i32 %add2882, 958139571
  %1827 = load i32, i32* %w2, align 4
  %shr2884 = lshr i32 %1827, 17
  %1828 = load i32, i32* %w2, align 4
  %shl2885 = shl i32 %1828, 15
  %or2886 = or i32 %shr2884, %shl2885
  %1829 = load i32, i32* %w2, align 4
  %shr2887 = lshr i32 %1829, 19
  %1830 = load i32, i32* %w2, align 4
  %shl2888 = shl i32 %1830, 13
  %or2889 = or i32 %shr2887, %shl2888
  %xor2890 = xor i32 %or2886, %or2889
  %1831 = load i32, i32* %w2, align 4
  %shr2891 = lshr i32 %1831, 10
  %xor2892 = xor i32 %xor2890, %shr2891
  %1832 = load i32, i32* %w13, align 4
  %add2893 = add i32 %xor2892, %1832
  %1833 = load i32, i32* %w5, align 4
  %shr2894 = lshr i32 %1833, 7
  %1834 = load i32, i32* %w5, align 4
  %shl2895 = shl i32 %1834, 25
  %or2896 = or i32 %shr2894, %shl2895
  %1835 = load i32, i32* %w5, align 4
  %shr2897 = lshr i32 %1835, 18
  %1836 = load i32, i32* %w5, align 4
  %shl2898 = shl i32 %1836, 14
  %or2899 = or i32 %shr2897, %shl2898
  %xor2900 = xor i32 %or2896, %or2899
  %1837 = load i32, i32* %w5, align 4
  %shr2901 = lshr i32 %1837, 3
  %xor2902 = xor i32 %xor2900, %shr2901
  %add2903 = add i32 %add2893, %xor2902
  %1838 = load i32, i32* %w4, align 4
  %add2904 = add i32 %1838, %add2903
  store i32 %add2904, i32* %w4, align 4
  %add2905 = add i32 %add2883, %add2904
  store i32 %add2905, i32* %t12866, align 4
  %1839 = load i32, i32* %e, align 4
  %shr2907 = lshr i32 %1839, 2
  %1840 = load i32, i32* %e, align 4
  %shl2908 = shl i32 %1840, 30
  %or2909 = or i32 %shr2907, %shl2908
  %1841 = load i32, i32* %e, align 4
  %shr2910 = lshr i32 %1841, 13
  %1842 = load i32, i32* %e, align 4
  %shl2911 = shl i32 %1842, 19
  %or2912 = or i32 %shr2910, %shl2911
  %xor2913 = xor i32 %or2909, %or2912
  %1843 = load i32, i32* %e, align 4
  %shr2914 = lshr i32 %1843, 22
  %1844 = load i32, i32* %e, align 4
  %shl2915 = shl i32 %1844, 10
  %or2916 = or i32 %shr2914, %shl2915
  %xor2917 = xor i32 %xor2913, %or2916
  %1845 = load i32, i32* %e, align 4
  %1846 = load i32, i32* %f, align 4
  %and2918 = and i32 %1845, %1846
  %1847 = load i32, i32* %g, align 4
  %1848 = load i32, i32* %e, align 4
  %1849 = load i32, i32* %f, align 4
  %or2919 = or i32 %1848, %1849
  %and2920 = and i32 %1847, %or2919
  %or2921 = or i32 %and2918, %and2920
  %add2922 = add i32 %xor2917, %or2921
  store i32 %add2922, i32* %t22906, align 4
  %1850 = load i32, i32* %t12866, align 4
  %1851 = load i32, i32* %h, align 4
  %add2923 = add i32 %1851, %1850
  store i32 %add2923, i32* %h, align 4
  %1852 = load i32, i32* %t12866, align 4
  %1853 = load i32, i32* %t22906, align 4
  %add2924 = add i32 %1852, %1853
  store i32 %add2924, i32* %d, align 4
  br label %do.end2925

do.end2925:                                       ; preds = %do.body2865
  br label %do.body2926

do.body2926:                                      ; preds = %do.end2925
  %1854 = load i32, i32* %c, align 4
  %1855 = load i32, i32* %h, align 4
  %shr2928 = lshr i32 %1855, 6
  %1856 = load i32, i32* %h, align 4
  %shl2929 = shl i32 %1856, 26
  %or2930 = or i32 %shr2928, %shl2929
  %1857 = load i32, i32* %h, align 4
  %shr2931 = lshr i32 %1857, 11
  %1858 = load i32, i32* %h, align 4
  %shl2932 = shl i32 %1858, 21
  %or2933 = or i32 %shr2931, %shl2932
  %xor2934 = xor i32 %or2930, %or2933
  %1859 = load i32, i32* %h, align 4
  %shr2935 = lshr i32 %1859, 25
  %1860 = load i32, i32* %h, align 4
  %shl2936 = shl i32 %1860, 7
  %or2937 = or i32 %shr2935, %shl2936
  %xor2938 = xor i32 %xor2934, %or2937
  %add2939 = add i32 %1854, %xor2938
  %1861 = load i32, i32* %b, align 4
  %1862 = load i32, i32* %h, align 4
  %1863 = load i32, i32* %a, align 4
  %1864 = load i32, i32* %b, align 4
  %xor2940 = xor i32 %1863, %1864
  %and2941 = and i32 %1862, %xor2940
  %xor2942 = xor i32 %1861, %and2941
  %add2943 = add i32 %add2939, %xor2942
  %add2944 = add i32 %add2943, 1322822218
  %1865 = load i32, i32* %w3, align 4
  %shr2945 = lshr i32 %1865, 17
  %1866 = load i32, i32* %w3, align 4
  %shl2946 = shl i32 %1866, 15
  %or2947 = or i32 %shr2945, %shl2946
  %1867 = load i32, i32* %w3, align 4
  %shr2948 = lshr i32 %1867, 19
  %1868 = load i32, i32* %w3, align 4
  %shl2949 = shl i32 %1868, 13
  %or2950 = or i32 %shr2948, %shl2949
  %xor2951 = xor i32 %or2947, %or2950
  %1869 = load i32, i32* %w3, align 4
  %shr2952 = lshr i32 %1869, 10
  %xor2953 = xor i32 %xor2951, %shr2952
  %1870 = load i32, i32* %w14, align 4
  %add2954 = add i32 %xor2953, %1870
  %1871 = load i32, i32* %w6, align 4
  %shr2955 = lshr i32 %1871, 7
  %1872 = load i32, i32* %w6, align 4
  %shl2956 = shl i32 %1872, 25
  %or2957 = or i32 %shr2955, %shl2956
  %1873 = load i32, i32* %w6, align 4
  %shr2958 = lshr i32 %1873, 18
  %1874 = load i32, i32* %w6, align 4
  %shl2959 = shl i32 %1874, 14
  %or2960 = or i32 %shr2958, %shl2959
  %xor2961 = xor i32 %or2957, %or2960
  %1875 = load i32, i32* %w6, align 4
  %shr2962 = lshr i32 %1875, 3
  %xor2963 = xor i32 %xor2961, %shr2962
  %add2964 = add i32 %add2954, %xor2963
  %1876 = load i32, i32* %w5, align 4
  %add2965 = add i32 %1876, %add2964
  store i32 %add2965, i32* %w5, align 4
  %add2966 = add i32 %add2944, %add2965
  store i32 %add2966, i32* %t12927, align 4
  %1877 = load i32, i32* %d, align 4
  %shr2968 = lshr i32 %1877, 2
  %1878 = load i32, i32* %d, align 4
  %shl2969 = shl i32 %1878, 30
  %or2970 = or i32 %shr2968, %shl2969
  %1879 = load i32, i32* %d, align 4
  %shr2971 = lshr i32 %1879, 13
  %1880 = load i32, i32* %d, align 4
  %shl2972 = shl i32 %1880, 19
  %or2973 = or i32 %shr2971, %shl2972
  %xor2974 = xor i32 %or2970, %or2973
  %1881 = load i32, i32* %d, align 4
  %shr2975 = lshr i32 %1881, 22
  %1882 = load i32, i32* %d, align 4
  %shl2976 = shl i32 %1882, 10
  %or2977 = or i32 %shr2975, %shl2976
  %xor2978 = xor i32 %xor2974, %or2977
  %1883 = load i32, i32* %d, align 4
  %1884 = load i32, i32* %e, align 4
  %and2979 = and i32 %1883, %1884
  %1885 = load i32, i32* %f, align 4
  %1886 = load i32, i32* %d, align 4
  %1887 = load i32, i32* %e, align 4
  %or2980 = or i32 %1886, %1887
  %and2981 = and i32 %1885, %or2980
  %or2982 = or i32 %and2979, %and2981
  %add2983 = add i32 %xor2978, %or2982
  store i32 %add2983, i32* %t22967, align 4
  %1888 = load i32, i32* %t12927, align 4
  %1889 = load i32, i32* %g, align 4
  %add2984 = add i32 %1889, %1888
  store i32 %add2984, i32* %g, align 4
  %1890 = load i32, i32* %t12927, align 4
  %1891 = load i32, i32* %t22967, align 4
  %add2985 = add i32 %1890, %1891
  store i32 %add2985, i32* %c, align 4
  br label %do.end2986

do.end2986:                                       ; preds = %do.body2926
  br label %do.body2987

do.body2987:                                      ; preds = %do.end2986
  %1892 = load i32, i32* %b, align 4
  %1893 = load i32, i32* %g, align 4
  %shr2989 = lshr i32 %1893, 6
  %1894 = load i32, i32* %g, align 4
  %shl2990 = shl i32 %1894, 26
  %or2991 = or i32 %shr2989, %shl2990
  %1895 = load i32, i32* %g, align 4
  %shr2992 = lshr i32 %1895, 11
  %1896 = load i32, i32* %g, align 4
  %shl2993 = shl i32 %1896, 21
  %or2994 = or i32 %shr2992, %shl2993
  %xor2995 = xor i32 %or2991, %or2994
  %1897 = load i32, i32* %g, align 4
  %shr2996 = lshr i32 %1897, 25
  %1898 = load i32, i32* %g, align 4
  %shl2997 = shl i32 %1898, 7
  %or2998 = or i32 %shr2996, %shl2997
  %xor2999 = xor i32 %xor2995, %or2998
  %add3000 = add i32 %1892, %xor2999
  %1899 = load i32, i32* %a, align 4
  %1900 = load i32, i32* %g, align 4
  %1901 = load i32, i32* %h, align 4
  %1902 = load i32, i32* %a, align 4
  %xor3001 = xor i32 %1901, %1902
  %and3002 = and i32 %1900, %xor3001
  %xor3003 = xor i32 %1899, %and3002
  %add3004 = add i32 %add3000, %xor3003
  %add3005 = add i32 %add3004, 1537002063
  %1903 = load i32, i32* %w4, align 4
  %shr3006 = lshr i32 %1903, 17
  %1904 = load i32, i32* %w4, align 4
  %shl3007 = shl i32 %1904, 15
  %or3008 = or i32 %shr3006, %shl3007
  %1905 = load i32, i32* %w4, align 4
  %shr3009 = lshr i32 %1905, 19
  %1906 = load i32, i32* %w4, align 4
  %shl3010 = shl i32 %1906, 13
  %or3011 = or i32 %shr3009, %shl3010
  %xor3012 = xor i32 %or3008, %or3011
  %1907 = load i32, i32* %w4, align 4
  %shr3013 = lshr i32 %1907, 10
  %xor3014 = xor i32 %xor3012, %shr3013
  %1908 = load i32, i32* %w15, align 4
  %add3015 = add i32 %xor3014, %1908
  %1909 = load i32, i32* %w7, align 4
  %shr3016 = lshr i32 %1909, 7
  %1910 = load i32, i32* %w7, align 4
  %shl3017 = shl i32 %1910, 25
  %or3018 = or i32 %shr3016, %shl3017
  %1911 = load i32, i32* %w7, align 4
  %shr3019 = lshr i32 %1911, 18
  %1912 = load i32, i32* %w7, align 4
  %shl3020 = shl i32 %1912, 14
  %or3021 = or i32 %shr3019, %shl3020
  %xor3022 = xor i32 %or3018, %or3021
  %1913 = load i32, i32* %w7, align 4
  %shr3023 = lshr i32 %1913, 3
  %xor3024 = xor i32 %xor3022, %shr3023
  %add3025 = add i32 %add3015, %xor3024
  %1914 = load i32, i32* %w6, align 4
  %add3026 = add i32 %1914, %add3025
  store i32 %add3026, i32* %w6, align 4
  %add3027 = add i32 %add3005, %add3026
  store i32 %add3027, i32* %t12988, align 4
  %1915 = load i32, i32* %c, align 4
  %shr3029 = lshr i32 %1915, 2
  %1916 = load i32, i32* %c, align 4
  %shl3030 = shl i32 %1916, 30
  %or3031 = or i32 %shr3029, %shl3030
  %1917 = load i32, i32* %c, align 4
  %shr3032 = lshr i32 %1917, 13
  %1918 = load i32, i32* %c, align 4
  %shl3033 = shl i32 %1918, 19
  %or3034 = or i32 %shr3032, %shl3033
  %xor3035 = xor i32 %or3031, %or3034
  %1919 = load i32, i32* %c, align 4
  %shr3036 = lshr i32 %1919, 22
  %1920 = load i32, i32* %c, align 4
  %shl3037 = shl i32 %1920, 10
  %or3038 = or i32 %shr3036, %shl3037
  %xor3039 = xor i32 %xor3035, %or3038
  %1921 = load i32, i32* %c, align 4
  %1922 = load i32, i32* %d, align 4
  %and3040 = and i32 %1921, %1922
  %1923 = load i32, i32* %e, align 4
  %1924 = load i32, i32* %c, align 4
  %1925 = load i32, i32* %d, align 4
  %or3041 = or i32 %1924, %1925
  %and3042 = and i32 %1923, %or3041
  %or3043 = or i32 %and3040, %and3042
  %add3044 = add i32 %xor3039, %or3043
  store i32 %add3044, i32* %t23028, align 4
  %1926 = load i32, i32* %t12988, align 4
  %1927 = load i32, i32* %f, align 4
  %add3045 = add i32 %1927, %1926
  store i32 %add3045, i32* %f, align 4
  %1928 = load i32, i32* %t12988, align 4
  %1929 = load i32, i32* %t23028, align 4
  %add3046 = add i32 %1928, %1929
  store i32 %add3046, i32* %b, align 4
  br label %do.end3047

do.end3047:                                       ; preds = %do.body2987
  br label %do.body3048

do.body3048:                                      ; preds = %do.end3047
  %1930 = load i32, i32* %a, align 4
  %1931 = load i32, i32* %f, align 4
  %shr3050 = lshr i32 %1931, 6
  %1932 = load i32, i32* %f, align 4
  %shl3051 = shl i32 %1932, 26
  %or3052 = or i32 %shr3050, %shl3051
  %1933 = load i32, i32* %f, align 4
  %shr3053 = lshr i32 %1933, 11
  %1934 = load i32, i32* %f, align 4
  %shl3054 = shl i32 %1934, 21
  %or3055 = or i32 %shr3053, %shl3054
  %xor3056 = xor i32 %or3052, %or3055
  %1935 = load i32, i32* %f, align 4
  %shr3057 = lshr i32 %1935, 25
  %1936 = load i32, i32* %f, align 4
  %shl3058 = shl i32 %1936, 7
  %or3059 = or i32 %shr3057, %shl3058
  %xor3060 = xor i32 %xor3056, %or3059
  %add3061 = add i32 %1930, %xor3060
  %1937 = load i32, i32* %h, align 4
  %1938 = load i32, i32* %f, align 4
  %1939 = load i32, i32* %g, align 4
  %1940 = load i32, i32* %h, align 4
  %xor3062 = xor i32 %1939, %1940
  %and3063 = and i32 %1938, %xor3062
  %xor3064 = xor i32 %1937, %and3063
  %add3065 = add i32 %add3061, %xor3064
  %add3066 = add i32 %add3065, 1747873779
  %1941 = load i32, i32* %w5, align 4
  %shr3067 = lshr i32 %1941, 17
  %1942 = load i32, i32* %w5, align 4
  %shl3068 = shl i32 %1942, 15
  %or3069 = or i32 %shr3067, %shl3068
  %1943 = load i32, i32* %w5, align 4
  %shr3070 = lshr i32 %1943, 19
  %1944 = load i32, i32* %w5, align 4
  %shl3071 = shl i32 %1944, 13
  %or3072 = or i32 %shr3070, %shl3071
  %xor3073 = xor i32 %or3069, %or3072
  %1945 = load i32, i32* %w5, align 4
  %shr3074 = lshr i32 %1945, 10
  %xor3075 = xor i32 %xor3073, %shr3074
  %1946 = load i32, i32* %w0, align 4
  %add3076 = add i32 %xor3075, %1946
  %1947 = load i32, i32* %w8, align 4
  %shr3077 = lshr i32 %1947, 7
  %1948 = load i32, i32* %w8, align 4
  %shl3078 = shl i32 %1948, 25
  %or3079 = or i32 %shr3077, %shl3078
  %1949 = load i32, i32* %w8, align 4
  %shr3080 = lshr i32 %1949, 18
  %1950 = load i32, i32* %w8, align 4
  %shl3081 = shl i32 %1950, 14
  %or3082 = or i32 %shr3080, %shl3081
  %xor3083 = xor i32 %or3079, %or3082
  %1951 = load i32, i32* %w8, align 4
  %shr3084 = lshr i32 %1951, 3
  %xor3085 = xor i32 %xor3083, %shr3084
  %add3086 = add i32 %add3076, %xor3085
  %1952 = load i32, i32* %w7, align 4
  %add3087 = add i32 %1952, %add3086
  store i32 %add3087, i32* %w7, align 4
  %add3088 = add i32 %add3066, %add3087
  store i32 %add3088, i32* %t13049, align 4
  %1953 = load i32, i32* %b, align 4
  %shr3090 = lshr i32 %1953, 2
  %1954 = load i32, i32* %b, align 4
  %shl3091 = shl i32 %1954, 30
  %or3092 = or i32 %shr3090, %shl3091
  %1955 = load i32, i32* %b, align 4
  %shr3093 = lshr i32 %1955, 13
  %1956 = load i32, i32* %b, align 4
  %shl3094 = shl i32 %1956, 19
  %or3095 = or i32 %shr3093, %shl3094
  %xor3096 = xor i32 %or3092, %or3095
  %1957 = load i32, i32* %b, align 4
  %shr3097 = lshr i32 %1957, 22
  %1958 = load i32, i32* %b, align 4
  %shl3098 = shl i32 %1958, 10
  %or3099 = or i32 %shr3097, %shl3098
  %xor3100 = xor i32 %xor3096, %or3099
  %1959 = load i32, i32* %b, align 4
  %1960 = load i32, i32* %c, align 4
  %and3101 = and i32 %1959, %1960
  %1961 = load i32, i32* %d, align 4
  %1962 = load i32, i32* %b, align 4
  %1963 = load i32, i32* %c, align 4
  %or3102 = or i32 %1962, %1963
  %and3103 = and i32 %1961, %or3102
  %or3104 = or i32 %and3101, %and3103
  %add3105 = add i32 %xor3100, %or3104
  store i32 %add3105, i32* %t23089, align 4
  %1964 = load i32, i32* %t13049, align 4
  %1965 = load i32, i32* %e, align 4
  %add3106 = add i32 %1965, %1964
  store i32 %add3106, i32* %e, align 4
  %1966 = load i32, i32* %t13049, align 4
  %1967 = load i32, i32* %t23089, align 4
  %add3107 = add i32 %1966, %1967
  store i32 %add3107, i32* %a, align 4
  br label %do.end3108

do.end3108:                                       ; preds = %do.body3048
  br label %do.body3109

do.body3109:                                      ; preds = %do.end3108
  %1968 = load i32, i32* %h, align 4
  %1969 = load i32, i32* %e, align 4
  %shr3111 = lshr i32 %1969, 6
  %1970 = load i32, i32* %e, align 4
  %shl3112 = shl i32 %1970, 26
  %or3113 = or i32 %shr3111, %shl3112
  %1971 = load i32, i32* %e, align 4
  %shr3114 = lshr i32 %1971, 11
  %1972 = load i32, i32* %e, align 4
  %shl3115 = shl i32 %1972, 21
  %or3116 = or i32 %shr3114, %shl3115
  %xor3117 = xor i32 %or3113, %or3116
  %1973 = load i32, i32* %e, align 4
  %shr3118 = lshr i32 %1973, 25
  %1974 = load i32, i32* %e, align 4
  %shl3119 = shl i32 %1974, 7
  %or3120 = or i32 %shr3118, %shl3119
  %xor3121 = xor i32 %xor3117, %or3120
  %add3122 = add i32 %1968, %xor3121
  %1975 = load i32, i32* %g, align 4
  %1976 = load i32, i32* %e, align 4
  %1977 = load i32, i32* %f, align 4
  %1978 = load i32, i32* %g, align 4
  %xor3123 = xor i32 %1977, %1978
  %and3124 = and i32 %1976, %xor3123
  %xor3125 = xor i32 %1975, %and3124
  %add3126 = add i32 %add3122, %xor3125
  %add3127 = add i32 %add3126, 1955562222
  %1979 = load i32, i32* %w6, align 4
  %shr3128 = lshr i32 %1979, 17
  %1980 = load i32, i32* %w6, align 4
  %shl3129 = shl i32 %1980, 15
  %or3130 = or i32 %shr3128, %shl3129
  %1981 = load i32, i32* %w6, align 4
  %shr3131 = lshr i32 %1981, 19
  %1982 = load i32, i32* %w6, align 4
  %shl3132 = shl i32 %1982, 13
  %or3133 = or i32 %shr3131, %shl3132
  %xor3134 = xor i32 %or3130, %or3133
  %1983 = load i32, i32* %w6, align 4
  %shr3135 = lshr i32 %1983, 10
  %xor3136 = xor i32 %xor3134, %shr3135
  %1984 = load i32, i32* %w1, align 4
  %add3137 = add i32 %xor3136, %1984
  %1985 = load i32, i32* %w9, align 4
  %shr3138 = lshr i32 %1985, 7
  %1986 = load i32, i32* %w9, align 4
  %shl3139 = shl i32 %1986, 25
  %or3140 = or i32 %shr3138, %shl3139
  %1987 = load i32, i32* %w9, align 4
  %shr3141 = lshr i32 %1987, 18
  %1988 = load i32, i32* %w9, align 4
  %shl3142 = shl i32 %1988, 14
  %or3143 = or i32 %shr3141, %shl3142
  %xor3144 = xor i32 %or3140, %or3143
  %1989 = load i32, i32* %w9, align 4
  %shr3145 = lshr i32 %1989, 3
  %xor3146 = xor i32 %xor3144, %shr3145
  %add3147 = add i32 %add3137, %xor3146
  %1990 = load i32, i32* %w8, align 4
  %add3148 = add i32 %1990, %add3147
  store i32 %add3148, i32* %w8, align 4
  %add3149 = add i32 %add3127, %add3148
  store i32 %add3149, i32* %t13110, align 4
  %1991 = load i32, i32* %a, align 4
  %shr3151 = lshr i32 %1991, 2
  %1992 = load i32, i32* %a, align 4
  %shl3152 = shl i32 %1992, 30
  %or3153 = or i32 %shr3151, %shl3152
  %1993 = load i32, i32* %a, align 4
  %shr3154 = lshr i32 %1993, 13
  %1994 = load i32, i32* %a, align 4
  %shl3155 = shl i32 %1994, 19
  %or3156 = or i32 %shr3154, %shl3155
  %xor3157 = xor i32 %or3153, %or3156
  %1995 = load i32, i32* %a, align 4
  %shr3158 = lshr i32 %1995, 22
  %1996 = load i32, i32* %a, align 4
  %shl3159 = shl i32 %1996, 10
  %or3160 = or i32 %shr3158, %shl3159
  %xor3161 = xor i32 %xor3157, %or3160
  %1997 = load i32, i32* %a, align 4
  %1998 = load i32, i32* %b, align 4
  %and3162 = and i32 %1997, %1998
  %1999 = load i32, i32* %c, align 4
  %2000 = load i32, i32* %a, align 4
  %2001 = load i32, i32* %b, align 4
  %or3163 = or i32 %2000, %2001
  %and3164 = and i32 %1999, %or3163
  %or3165 = or i32 %and3162, %and3164
  %add3166 = add i32 %xor3161, %or3165
  store i32 %add3166, i32* %t23150, align 4
  %2002 = load i32, i32* %t13110, align 4
  %2003 = load i32, i32* %d, align 4
  %add3167 = add i32 %2003, %2002
  store i32 %add3167, i32* %d, align 4
  %2004 = load i32, i32* %t13110, align 4
  %2005 = load i32, i32* %t23150, align 4
  %add3168 = add i32 %2004, %2005
  store i32 %add3168, i32* %h, align 4
  br label %do.end3169

do.end3169:                                       ; preds = %do.body3109
  br label %do.body3170

do.body3170:                                      ; preds = %do.end3169
  %2006 = load i32, i32* %g, align 4
  %2007 = load i32, i32* %d, align 4
  %shr3172 = lshr i32 %2007, 6
  %2008 = load i32, i32* %d, align 4
  %shl3173 = shl i32 %2008, 26
  %or3174 = or i32 %shr3172, %shl3173
  %2009 = load i32, i32* %d, align 4
  %shr3175 = lshr i32 %2009, 11
  %2010 = load i32, i32* %d, align 4
  %shl3176 = shl i32 %2010, 21
  %or3177 = or i32 %shr3175, %shl3176
  %xor3178 = xor i32 %or3174, %or3177
  %2011 = load i32, i32* %d, align 4
  %shr3179 = lshr i32 %2011, 25
  %2012 = load i32, i32* %d, align 4
  %shl3180 = shl i32 %2012, 7
  %or3181 = or i32 %shr3179, %shl3180
  %xor3182 = xor i32 %xor3178, %or3181
  %add3183 = add i32 %2006, %xor3182
  %2013 = load i32, i32* %f, align 4
  %2014 = load i32, i32* %d, align 4
  %2015 = load i32, i32* %e, align 4
  %2016 = load i32, i32* %f, align 4
  %xor3184 = xor i32 %2015, %2016
  %and3185 = and i32 %2014, %xor3184
  %xor3186 = xor i32 %2013, %and3185
  %add3187 = add i32 %add3183, %xor3186
  %add3188 = add i32 %add3187, 2024104815
  %2017 = load i32, i32* %w7, align 4
  %shr3189 = lshr i32 %2017, 17
  %2018 = load i32, i32* %w7, align 4
  %shl3190 = shl i32 %2018, 15
  %or3191 = or i32 %shr3189, %shl3190
  %2019 = load i32, i32* %w7, align 4
  %shr3192 = lshr i32 %2019, 19
  %2020 = load i32, i32* %w7, align 4
  %shl3193 = shl i32 %2020, 13
  %or3194 = or i32 %shr3192, %shl3193
  %xor3195 = xor i32 %or3191, %or3194
  %2021 = load i32, i32* %w7, align 4
  %shr3196 = lshr i32 %2021, 10
  %xor3197 = xor i32 %xor3195, %shr3196
  %2022 = load i32, i32* %w2, align 4
  %add3198 = add i32 %xor3197, %2022
  %2023 = load i32, i32* %w10, align 4
  %shr3199 = lshr i32 %2023, 7
  %2024 = load i32, i32* %w10, align 4
  %shl3200 = shl i32 %2024, 25
  %or3201 = or i32 %shr3199, %shl3200
  %2025 = load i32, i32* %w10, align 4
  %shr3202 = lshr i32 %2025, 18
  %2026 = load i32, i32* %w10, align 4
  %shl3203 = shl i32 %2026, 14
  %or3204 = or i32 %shr3202, %shl3203
  %xor3205 = xor i32 %or3201, %or3204
  %2027 = load i32, i32* %w10, align 4
  %shr3206 = lshr i32 %2027, 3
  %xor3207 = xor i32 %xor3205, %shr3206
  %add3208 = add i32 %add3198, %xor3207
  %2028 = load i32, i32* %w9, align 4
  %add3209 = add i32 %2028, %add3208
  store i32 %add3209, i32* %w9, align 4
  %add3210 = add i32 %add3188, %add3209
  store i32 %add3210, i32* %t13171, align 4
  %2029 = load i32, i32* %h, align 4
  %shr3212 = lshr i32 %2029, 2
  %2030 = load i32, i32* %h, align 4
  %shl3213 = shl i32 %2030, 30
  %or3214 = or i32 %shr3212, %shl3213
  %2031 = load i32, i32* %h, align 4
  %shr3215 = lshr i32 %2031, 13
  %2032 = load i32, i32* %h, align 4
  %shl3216 = shl i32 %2032, 19
  %or3217 = or i32 %shr3215, %shl3216
  %xor3218 = xor i32 %or3214, %or3217
  %2033 = load i32, i32* %h, align 4
  %shr3219 = lshr i32 %2033, 22
  %2034 = load i32, i32* %h, align 4
  %shl3220 = shl i32 %2034, 10
  %or3221 = or i32 %shr3219, %shl3220
  %xor3222 = xor i32 %xor3218, %or3221
  %2035 = load i32, i32* %h, align 4
  %2036 = load i32, i32* %a, align 4
  %and3223 = and i32 %2035, %2036
  %2037 = load i32, i32* %b, align 4
  %2038 = load i32, i32* %h, align 4
  %2039 = load i32, i32* %a, align 4
  %or3224 = or i32 %2038, %2039
  %and3225 = and i32 %2037, %or3224
  %or3226 = or i32 %and3223, %and3225
  %add3227 = add i32 %xor3222, %or3226
  store i32 %add3227, i32* %t23211, align 4
  %2040 = load i32, i32* %t13171, align 4
  %2041 = load i32, i32* %c, align 4
  %add3228 = add i32 %2041, %2040
  store i32 %add3228, i32* %c, align 4
  %2042 = load i32, i32* %t13171, align 4
  %2043 = load i32, i32* %t23211, align 4
  %add3229 = add i32 %2042, %2043
  store i32 %add3229, i32* %g, align 4
  br label %do.end3230

do.end3230:                                       ; preds = %do.body3170
  br label %do.body3231

do.body3231:                                      ; preds = %do.end3230
  %2044 = load i32, i32* %f, align 4
  %2045 = load i32, i32* %c, align 4
  %shr3233 = lshr i32 %2045, 6
  %2046 = load i32, i32* %c, align 4
  %shl3234 = shl i32 %2046, 26
  %or3235 = or i32 %shr3233, %shl3234
  %2047 = load i32, i32* %c, align 4
  %shr3236 = lshr i32 %2047, 11
  %2048 = load i32, i32* %c, align 4
  %shl3237 = shl i32 %2048, 21
  %or3238 = or i32 %shr3236, %shl3237
  %xor3239 = xor i32 %or3235, %or3238
  %2049 = load i32, i32* %c, align 4
  %shr3240 = lshr i32 %2049, 25
  %2050 = load i32, i32* %c, align 4
  %shl3241 = shl i32 %2050, 7
  %or3242 = or i32 %shr3240, %shl3241
  %xor3243 = xor i32 %xor3239, %or3242
  %add3244 = add i32 %2044, %xor3243
  %2051 = load i32, i32* %e, align 4
  %2052 = load i32, i32* %c, align 4
  %2053 = load i32, i32* %d, align 4
  %2054 = load i32, i32* %e, align 4
  %xor3245 = xor i32 %2053, %2054
  %and3246 = and i32 %2052, %xor3245
  %xor3247 = xor i32 %2051, %and3246
  %add3248 = add i32 %add3244, %xor3247
  %add3249 = add i32 %add3248, -2067236844
  %2055 = load i32, i32* %w8, align 4
  %shr3250 = lshr i32 %2055, 17
  %2056 = load i32, i32* %w8, align 4
  %shl3251 = shl i32 %2056, 15
  %or3252 = or i32 %shr3250, %shl3251
  %2057 = load i32, i32* %w8, align 4
  %shr3253 = lshr i32 %2057, 19
  %2058 = load i32, i32* %w8, align 4
  %shl3254 = shl i32 %2058, 13
  %or3255 = or i32 %shr3253, %shl3254
  %xor3256 = xor i32 %or3252, %or3255
  %2059 = load i32, i32* %w8, align 4
  %shr3257 = lshr i32 %2059, 10
  %xor3258 = xor i32 %xor3256, %shr3257
  %2060 = load i32, i32* %w3, align 4
  %add3259 = add i32 %xor3258, %2060
  %2061 = load i32, i32* %w11, align 4
  %shr3260 = lshr i32 %2061, 7
  %2062 = load i32, i32* %w11, align 4
  %shl3261 = shl i32 %2062, 25
  %or3262 = or i32 %shr3260, %shl3261
  %2063 = load i32, i32* %w11, align 4
  %shr3263 = lshr i32 %2063, 18
  %2064 = load i32, i32* %w11, align 4
  %shl3264 = shl i32 %2064, 14
  %or3265 = or i32 %shr3263, %shl3264
  %xor3266 = xor i32 %or3262, %or3265
  %2065 = load i32, i32* %w11, align 4
  %shr3267 = lshr i32 %2065, 3
  %xor3268 = xor i32 %xor3266, %shr3267
  %add3269 = add i32 %add3259, %xor3268
  %2066 = load i32, i32* %w10, align 4
  %add3270 = add i32 %2066, %add3269
  store i32 %add3270, i32* %w10, align 4
  %add3271 = add i32 %add3249, %add3270
  store i32 %add3271, i32* %t13232, align 4
  %2067 = load i32, i32* %g, align 4
  %shr3273 = lshr i32 %2067, 2
  %2068 = load i32, i32* %g, align 4
  %shl3274 = shl i32 %2068, 30
  %or3275 = or i32 %shr3273, %shl3274
  %2069 = load i32, i32* %g, align 4
  %shr3276 = lshr i32 %2069, 13
  %2070 = load i32, i32* %g, align 4
  %shl3277 = shl i32 %2070, 19
  %or3278 = or i32 %shr3276, %shl3277
  %xor3279 = xor i32 %or3275, %or3278
  %2071 = load i32, i32* %g, align 4
  %shr3280 = lshr i32 %2071, 22
  %2072 = load i32, i32* %g, align 4
  %shl3281 = shl i32 %2072, 10
  %or3282 = or i32 %shr3280, %shl3281
  %xor3283 = xor i32 %xor3279, %or3282
  %2073 = load i32, i32* %g, align 4
  %2074 = load i32, i32* %h, align 4
  %and3284 = and i32 %2073, %2074
  %2075 = load i32, i32* %a, align 4
  %2076 = load i32, i32* %g, align 4
  %2077 = load i32, i32* %h, align 4
  %or3285 = or i32 %2076, %2077
  %and3286 = and i32 %2075, %or3285
  %or3287 = or i32 %and3284, %and3286
  %add3288 = add i32 %xor3283, %or3287
  store i32 %add3288, i32* %t23272, align 4
  %2078 = load i32, i32* %t13232, align 4
  %2079 = load i32, i32* %b, align 4
  %add3289 = add i32 %2079, %2078
  store i32 %add3289, i32* %b, align 4
  %2080 = load i32, i32* %t13232, align 4
  %2081 = load i32, i32* %t23272, align 4
  %add3290 = add i32 %2080, %2081
  store i32 %add3290, i32* %f, align 4
  br label %do.end3291

do.end3291:                                       ; preds = %do.body3231
  br label %do.body3292

do.body3292:                                      ; preds = %do.end3291
  %2082 = load i32, i32* %e, align 4
  %2083 = load i32, i32* %b, align 4
  %shr3294 = lshr i32 %2083, 6
  %2084 = load i32, i32* %b, align 4
  %shl3295 = shl i32 %2084, 26
  %or3296 = or i32 %shr3294, %shl3295
  %2085 = load i32, i32* %b, align 4
  %shr3297 = lshr i32 %2085, 11
  %2086 = load i32, i32* %b, align 4
  %shl3298 = shl i32 %2086, 21
  %or3299 = or i32 %shr3297, %shl3298
  %xor3300 = xor i32 %or3296, %or3299
  %2087 = load i32, i32* %b, align 4
  %shr3301 = lshr i32 %2087, 25
  %2088 = load i32, i32* %b, align 4
  %shl3302 = shl i32 %2088, 7
  %or3303 = or i32 %shr3301, %shl3302
  %xor3304 = xor i32 %xor3300, %or3303
  %add3305 = add i32 %2082, %xor3304
  %2089 = load i32, i32* %d, align 4
  %2090 = load i32, i32* %b, align 4
  %2091 = load i32, i32* %c, align 4
  %2092 = load i32, i32* %d, align 4
  %xor3306 = xor i32 %2091, %2092
  %and3307 = and i32 %2090, %xor3306
  %xor3308 = xor i32 %2089, %and3307
  %add3309 = add i32 %add3305, %xor3308
  %add3310 = add i32 %add3309, -1933114872
  %2093 = load i32, i32* %w9, align 4
  %shr3311 = lshr i32 %2093, 17
  %2094 = load i32, i32* %w9, align 4
  %shl3312 = shl i32 %2094, 15
  %or3313 = or i32 %shr3311, %shl3312
  %2095 = load i32, i32* %w9, align 4
  %shr3314 = lshr i32 %2095, 19
  %2096 = load i32, i32* %w9, align 4
  %shl3315 = shl i32 %2096, 13
  %or3316 = or i32 %shr3314, %shl3315
  %xor3317 = xor i32 %or3313, %or3316
  %2097 = load i32, i32* %w9, align 4
  %shr3318 = lshr i32 %2097, 10
  %xor3319 = xor i32 %xor3317, %shr3318
  %2098 = load i32, i32* %w4, align 4
  %add3320 = add i32 %xor3319, %2098
  %2099 = load i32, i32* %w12, align 4
  %shr3321 = lshr i32 %2099, 7
  %2100 = load i32, i32* %w12, align 4
  %shl3322 = shl i32 %2100, 25
  %or3323 = or i32 %shr3321, %shl3322
  %2101 = load i32, i32* %w12, align 4
  %shr3324 = lshr i32 %2101, 18
  %2102 = load i32, i32* %w12, align 4
  %shl3325 = shl i32 %2102, 14
  %or3326 = or i32 %shr3324, %shl3325
  %xor3327 = xor i32 %or3323, %or3326
  %2103 = load i32, i32* %w12, align 4
  %shr3328 = lshr i32 %2103, 3
  %xor3329 = xor i32 %xor3327, %shr3328
  %add3330 = add i32 %add3320, %xor3329
  %2104 = load i32, i32* %w11, align 4
  %add3331 = add i32 %2104, %add3330
  store i32 %add3331, i32* %w11, align 4
  %add3332 = add i32 %add3310, %add3331
  store i32 %add3332, i32* %t13293, align 4
  %2105 = load i32, i32* %f, align 4
  %shr3334 = lshr i32 %2105, 2
  %2106 = load i32, i32* %f, align 4
  %shl3335 = shl i32 %2106, 30
  %or3336 = or i32 %shr3334, %shl3335
  %2107 = load i32, i32* %f, align 4
  %shr3337 = lshr i32 %2107, 13
  %2108 = load i32, i32* %f, align 4
  %shl3338 = shl i32 %2108, 19
  %or3339 = or i32 %shr3337, %shl3338
  %xor3340 = xor i32 %or3336, %or3339
  %2109 = load i32, i32* %f, align 4
  %shr3341 = lshr i32 %2109, 22
  %2110 = load i32, i32* %f, align 4
  %shl3342 = shl i32 %2110, 10
  %or3343 = or i32 %shr3341, %shl3342
  %xor3344 = xor i32 %xor3340, %or3343
  %2111 = load i32, i32* %f, align 4
  %2112 = load i32, i32* %g, align 4
  %and3345 = and i32 %2111, %2112
  %2113 = load i32, i32* %h, align 4
  %2114 = load i32, i32* %f, align 4
  %2115 = load i32, i32* %g, align 4
  %or3346 = or i32 %2114, %2115
  %and3347 = and i32 %2113, %or3346
  %or3348 = or i32 %and3345, %and3347
  %add3349 = add i32 %xor3344, %or3348
  store i32 %add3349, i32* %t23333, align 4
  %2116 = load i32, i32* %t13293, align 4
  %2117 = load i32, i32* %a, align 4
  %add3350 = add i32 %2117, %2116
  store i32 %add3350, i32* %a, align 4
  %2118 = load i32, i32* %t13293, align 4
  %2119 = load i32, i32* %t23333, align 4
  %add3351 = add i32 %2118, %2119
  store i32 %add3351, i32* %e, align 4
  br label %do.end3352

do.end3352:                                       ; preds = %do.body3292
  br label %do.body3353

do.body3353:                                      ; preds = %do.end3352
  %2120 = load i32, i32* %d, align 4
  %2121 = load i32, i32* %a, align 4
  %shr3355 = lshr i32 %2121, 6
  %2122 = load i32, i32* %a, align 4
  %shl3356 = shl i32 %2122, 26
  %or3357 = or i32 %shr3355, %shl3356
  %2123 = load i32, i32* %a, align 4
  %shr3358 = lshr i32 %2123, 11
  %2124 = load i32, i32* %a, align 4
  %shl3359 = shl i32 %2124, 21
  %or3360 = or i32 %shr3358, %shl3359
  %xor3361 = xor i32 %or3357, %or3360
  %2125 = load i32, i32* %a, align 4
  %shr3362 = lshr i32 %2125, 25
  %2126 = load i32, i32* %a, align 4
  %shl3363 = shl i32 %2126, 7
  %or3364 = or i32 %shr3362, %shl3363
  %xor3365 = xor i32 %xor3361, %or3364
  %add3366 = add i32 %2120, %xor3365
  %2127 = load i32, i32* %c, align 4
  %2128 = load i32, i32* %a, align 4
  %2129 = load i32, i32* %b, align 4
  %2130 = load i32, i32* %c, align 4
  %xor3367 = xor i32 %2129, %2130
  %and3368 = and i32 %2128, %xor3367
  %xor3369 = xor i32 %2127, %and3368
  %add3370 = add i32 %add3366, %xor3369
  %add3371 = add i32 %add3370, -1866530822
  %2131 = load i32, i32* %w10, align 4
  %shr3372 = lshr i32 %2131, 17
  %2132 = load i32, i32* %w10, align 4
  %shl3373 = shl i32 %2132, 15
  %or3374 = or i32 %shr3372, %shl3373
  %2133 = load i32, i32* %w10, align 4
  %shr3375 = lshr i32 %2133, 19
  %2134 = load i32, i32* %w10, align 4
  %shl3376 = shl i32 %2134, 13
  %or3377 = or i32 %shr3375, %shl3376
  %xor3378 = xor i32 %or3374, %or3377
  %2135 = load i32, i32* %w10, align 4
  %shr3379 = lshr i32 %2135, 10
  %xor3380 = xor i32 %xor3378, %shr3379
  %2136 = load i32, i32* %w5, align 4
  %add3381 = add i32 %xor3380, %2136
  %2137 = load i32, i32* %w13, align 4
  %shr3382 = lshr i32 %2137, 7
  %2138 = load i32, i32* %w13, align 4
  %shl3383 = shl i32 %2138, 25
  %or3384 = or i32 %shr3382, %shl3383
  %2139 = load i32, i32* %w13, align 4
  %shr3385 = lshr i32 %2139, 18
  %2140 = load i32, i32* %w13, align 4
  %shl3386 = shl i32 %2140, 14
  %or3387 = or i32 %shr3385, %shl3386
  %xor3388 = xor i32 %or3384, %or3387
  %2141 = load i32, i32* %w13, align 4
  %shr3389 = lshr i32 %2141, 3
  %xor3390 = xor i32 %xor3388, %shr3389
  %add3391 = add i32 %add3381, %xor3390
  %2142 = load i32, i32* %w12, align 4
  %add3392 = add i32 %2142, %add3391
  store i32 %add3392, i32* %w12, align 4
  %add3393 = add i32 %add3371, %add3392
  store i32 %add3393, i32* %t13354, align 4
  %2143 = load i32, i32* %e, align 4
  %shr3395 = lshr i32 %2143, 2
  %2144 = load i32, i32* %e, align 4
  %shl3396 = shl i32 %2144, 30
  %or3397 = or i32 %shr3395, %shl3396
  %2145 = load i32, i32* %e, align 4
  %shr3398 = lshr i32 %2145, 13
  %2146 = load i32, i32* %e, align 4
  %shl3399 = shl i32 %2146, 19
  %or3400 = or i32 %shr3398, %shl3399
  %xor3401 = xor i32 %or3397, %or3400
  %2147 = load i32, i32* %e, align 4
  %shr3402 = lshr i32 %2147, 22
  %2148 = load i32, i32* %e, align 4
  %shl3403 = shl i32 %2148, 10
  %or3404 = or i32 %shr3402, %shl3403
  %xor3405 = xor i32 %xor3401, %or3404
  %2149 = load i32, i32* %e, align 4
  %2150 = load i32, i32* %f, align 4
  %and3406 = and i32 %2149, %2150
  %2151 = load i32, i32* %g, align 4
  %2152 = load i32, i32* %e, align 4
  %2153 = load i32, i32* %f, align 4
  %or3407 = or i32 %2152, %2153
  %and3408 = and i32 %2151, %or3407
  %or3409 = or i32 %and3406, %and3408
  %add3410 = add i32 %xor3405, %or3409
  store i32 %add3410, i32* %t23394, align 4
  %2154 = load i32, i32* %t13354, align 4
  %2155 = load i32, i32* %h, align 4
  %add3411 = add i32 %2155, %2154
  store i32 %add3411, i32* %h, align 4
  %2156 = load i32, i32* %t13354, align 4
  %2157 = load i32, i32* %t23394, align 4
  %add3412 = add i32 %2156, %2157
  store i32 %add3412, i32* %d, align 4
  br label %do.end3413

do.end3413:                                       ; preds = %do.body3353
  br label %do.body3414

do.body3414:                                      ; preds = %do.end3413
  %2158 = load i32, i32* %c, align 4
  %2159 = load i32, i32* %h, align 4
  %shr3416 = lshr i32 %2159, 6
  %2160 = load i32, i32* %h, align 4
  %shl3417 = shl i32 %2160, 26
  %or3418 = or i32 %shr3416, %shl3417
  %2161 = load i32, i32* %h, align 4
  %shr3419 = lshr i32 %2161, 11
  %2162 = load i32, i32* %h, align 4
  %shl3420 = shl i32 %2162, 21
  %or3421 = or i32 %shr3419, %shl3420
  %xor3422 = xor i32 %or3418, %or3421
  %2163 = load i32, i32* %h, align 4
  %shr3423 = lshr i32 %2163, 25
  %2164 = load i32, i32* %h, align 4
  %shl3424 = shl i32 %2164, 7
  %or3425 = or i32 %shr3423, %shl3424
  %xor3426 = xor i32 %xor3422, %or3425
  %add3427 = add i32 %2158, %xor3426
  %2165 = load i32, i32* %b, align 4
  %2166 = load i32, i32* %h, align 4
  %2167 = load i32, i32* %a, align 4
  %2168 = load i32, i32* %b, align 4
  %xor3428 = xor i32 %2167, %2168
  %and3429 = and i32 %2166, %xor3428
  %xor3430 = xor i32 %2165, %and3429
  %add3431 = add i32 %add3427, %xor3430
  %add3432 = add i32 %add3431, -1538233109
  %2169 = load i32, i32* %w11, align 4
  %shr3433 = lshr i32 %2169, 17
  %2170 = load i32, i32* %w11, align 4
  %shl3434 = shl i32 %2170, 15
  %or3435 = or i32 %shr3433, %shl3434
  %2171 = load i32, i32* %w11, align 4
  %shr3436 = lshr i32 %2171, 19
  %2172 = load i32, i32* %w11, align 4
  %shl3437 = shl i32 %2172, 13
  %or3438 = or i32 %shr3436, %shl3437
  %xor3439 = xor i32 %or3435, %or3438
  %2173 = load i32, i32* %w11, align 4
  %shr3440 = lshr i32 %2173, 10
  %xor3441 = xor i32 %xor3439, %shr3440
  %2174 = load i32, i32* %w6, align 4
  %add3442 = add i32 %xor3441, %2174
  %2175 = load i32, i32* %w14, align 4
  %shr3443 = lshr i32 %2175, 7
  %2176 = load i32, i32* %w14, align 4
  %shl3444 = shl i32 %2176, 25
  %or3445 = or i32 %shr3443, %shl3444
  %2177 = load i32, i32* %w14, align 4
  %shr3446 = lshr i32 %2177, 18
  %2178 = load i32, i32* %w14, align 4
  %shl3447 = shl i32 %2178, 14
  %or3448 = or i32 %shr3446, %shl3447
  %xor3449 = xor i32 %or3445, %or3448
  %2179 = load i32, i32* %w14, align 4
  %shr3450 = lshr i32 %2179, 3
  %xor3451 = xor i32 %xor3449, %shr3450
  %add3452 = add i32 %add3442, %xor3451
  %2180 = load i32, i32* %w13, align 4
  %add3453 = add i32 %2180, %add3452
  store i32 %add3453, i32* %w13, align 4
  %add3454 = add i32 %add3432, %add3453
  store i32 %add3454, i32* %t13415, align 4
  %2181 = load i32, i32* %d, align 4
  %shr3456 = lshr i32 %2181, 2
  %2182 = load i32, i32* %d, align 4
  %shl3457 = shl i32 %2182, 30
  %or3458 = or i32 %shr3456, %shl3457
  %2183 = load i32, i32* %d, align 4
  %shr3459 = lshr i32 %2183, 13
  %2184 = load i32, i32* %d, align 4
  %shl3460 = shl i32 %2184, 19
  %or3461 = or i32 %shr3459, %shl3460
  %xor3462 = xor i32 %or3458, %or3461
  %2185 = load i32, i32* %d, align 4
  %shr3463 = lshr i32 %2185, 22
  %2186 = load i32, i32* %d, align 4
  %shl3464 = shl i32 %2186, 10
  %or3465 = or i32 %shr3463, %shl3464
  %xor3466 = xor i32 %xor3462, %or3465
  %2187 = load i32, i32* %d, align 4
  %2188 = load i32, i32* %e, align 4
  %and3467 = and i32 %2187, %2188
  %2189 = load i32, i32* %f, align 4
  %2190 = load i32, i32* %d, align 4
  %2191 = load i32, i32* %e, align 4
  %or3468 = or i32 %2190, %2191
  %and3469 = and i32 %2189, %or3468
  %or3470 = or i32 %and3467, %and3469
  %add3471 = add i32 %xor3466, %or3470
  store i32 %add3471, i32* %t23455, align 4
  %2192 = load i32, i32* %t13415, align 4
  %2193 = load i32, i32* %g, align 4
  %add3472 = add i32 %2193, %2192
  store i32 %add3472, i32* %g, align 4
  %2194 = load i32, i32* %t13415, align 4
  %2195 = load i32, i32* %t23455, align 4
  %add3473 = add i32 %2194, %2195
  store i32 %add3473, i32* %c, align 4
  br label %do.end3474

do.end3474:                                       ; preds = %do.body3414
  br label %do.body3475

do.body3475:                                      ; preds = %do.end3474
  %2196 = load i32, i32* %b, align 4
  %2197 = load i32, i32* %g, align 4
  %shr3477 = lshr i32 %2197, 6
  %2198 = load i32, i32* %g, align 4
  %shl3478 = shl i32 %2198, 26
  %or3479 = or i32 %shr3477, %shl3478
  %2199 = load i32, i32* %g, align 4
  %shr3480 = lshr i32 %2199, 11
  %2200 = load i32, i32* %g, align 4
  %shl3481 = shl i32 %2200, 21
  %or3482 = or i32 %shr3480, %shl3481
  %xor3483 = xor i32 %or3479, %or3482
  %2201 = load i32, i32* %g, align 4
  %shr3484 = lshr i32 %2201, 25
  %2202 = load i32, i32* %g, align 4
  %shl3485 = shl i32 %2202, 7
  %or3486 = or i32 %shr3484, %shl3485
  %xor3487 = xor i32 %xor3483, %or3486
  %add3488 = add i32 %2196, %xor3487
  %2203 = load i32, i32* %a, align 4
  %2204 = load i32, i32* %g, align 4
  %2205 = load i32, i32* %h, align 4
  %2206 = load i32, i32* %a, align 4
  %xor3489 = xor i32 %2205, %2206
  %and3490 = and i32 %2204, %xor3489
  %xor3491 = xor i32 %2203, %and3490
  %add3492 = add i32 %add3488, %xor3491
  %add3493 = add i32 %add3492, -1090935817
  %2207 = load i32, i32* %w14, align 4
  %2208 = load i32, i32* %w12, align 4
  %shr3494 = lshr i32 %2208, 17
  %2209 = load i32, i32* %w12, align 4
  %shl3495 = shl i32 %2209, 15
  %or3496 = or i32 %shr3494, %shl3495
  %2210 = load i32, i32* %w12, align 4
  %shr3497 = lshr i32 %2210, 19
  %2211 = load i32, i32* %w12, align 4
  %shl3498 = shl i32 %2211, 13
  %or3499 = or i32 %shr3497, %shl3498
  %xor3500 = xor i32 %or3496, %or3499
  %2212 = load i32, i32* %w12, align 4
  %shr3501 = lshr i32 %2212, 10
  %xor3502 = xor i32 %xor3500, %shr3501
  %add3503 = add i32 %2207, %xor3502
  %2213 = load i32, i32* %w7, align 4
  %add3504 = add i32 %add3503, %2213
  %2214 = load i32, i32* %w15, align 4
  %shr3505 = lshr i32 %2214, 7
  %2215 = load i32, i32* %w15, align 4
  %shl3506 = shl i32 %2215, 25
  %or3507 = or i32 %shr3505, %shl3506
  %2216 = load i32, i32* %w15, align 4
  %shr3508 = lshr i32 %2216, 18
  %2217 = load i32, i32* %w15, align 4
  %shl3509 = shl i32 %2217, 14
  %or3510 = or i32 %shr3508, %shl3509
  %xor3511 = xor i32 %or3507, %or3510
  %2218 = load i32, i32* %w15, align 4
  %shr3512 = lshr i32 %2218, 3
  %xor3513 = xor i32 %xor3511, %shr3512
  %add3514 = add i32 %add3504, %xor3513
  %add3515 = add i32 %add3493, %add3514
  store i32 %add3515, i32* %t13476, align 4
  %2219 = load i32, i32* %c, align 4
  %shr3517 = lshr i32 %2219, 2
  %2220 = load i32, i32* %c, align 4
  %shl3518 = shl i32 %2220, 30
  %or3519 = or i32 %shr3517, %shl3518
  %2221 = load i32, i32* %c, align 4
  %shr3520 = lshr i32 %2221, 13
  %2222 = load i32, i32* %c, align 4
  %shl3521 = shl i32 %2222, 19
  %or3522 = or i32 %shr3520, %shl3521
  %xor3523 = xor i32 %or3519, %or3522
  %2223 = load i32, i32* %c, align 4
  %shr3524 = lshr i32 %2223, 22
  %2224 = load i32, i32* %c, align 4
  %shl3525 = shl i32 %2224, 10
  %or3526 = or i32 %shr3524, %shl3525
  %xor3527 = xor i32 %xor3523, %or3526
  %2225 = load i32, i32* %c, align 4
  %2226 = load i32, i32* %d, align 4
  %and3528 = and i32 %2225, %2226
  %2227 = load i32, i32* %e, align 4
  %2228 = load i32, i32* %c, align 4
  %2229 = load i32, i32* %d, align 4
  %or3529 = or i32 %2228, %2229
  %and3530 = and i32 %2227, %or3529
  %or3531 = or i32 %and3528, %and3530
  %add3532 = add i32 %xor3527, %or3531
  store i32 %add3532, i32* %t23516, align 4
  %2230 = load i32, i32* %t13476, align 4
  %2231 = load i32, i32* %f, align 4
  %add3533 = add i32 %2231, %2230
  store i32 %add3533, i32* %f, align 4
  %2232 = load i32, i32* %t13476, align 4
  %2233 = load i32, i32* %t23516, align 4
  %add3534 = add i32 %2232, %2233
  store i32 %add3534, i32* %b, align 4
  br label %do.end3535

do.end3535:                                       ; preds = %do.body3475
  br label %do.body3536

do.body3536:                                      ; preds = %do.end3535
  %2234 = load i32, i32* %a, align 4
  %2235 = load i32, i32* %f, align 4
  %shr3538 = lshr i32 %2235, 6
  %2236 = load i32, i32* %f, align 4
  %shl3539 = shl i32 %2236, 26
  %or3540 = or i32 %shr3538, %shl3539
  %2237 = load i32, i32* %f, align 4
  %shr3541 = lshr i32 %2237, 11
  %2238 = load i32, i32* %f, align 4
  %shl3542 = shl i32 %2238, 21
  %or3543 = or i32 %shr3541, %shl3542
  %xor3544 = xor i32 %or3540, %or3543
  %2239 = load i32, i32* %f, align 4
  %shr3545 = lshr i32 %2239, 25
  %2240 = load i32, i32* %f, align 4
  %shl3546 = shl i32 %2240, 7
  %or3547 = or i32 %shr3545, %shl3546
  %xor3548 = xor i32 %xor3544, %or3547
  %add3549 = add i32 %2234, %xor3548
  %2241 = load i32, i32* %h, align 4
  %2242 = load i32, i32* %f, align 4
  %2243 = load i32, i32* %g, align 4
  %2244 = load i32, i32* %h, align 4
  %xor3550 = xor i32 %2243, %2244
  %and3551 = and i32 %2242, %xor3550
  %xor3552 = xor i32 %2241, %and3551
  %add3553 = add i32 %add3549, %xor3552
  %add3554 = add i32 %add3553, -965641998
  %2245 = load i32, i32* %w15, align 4
  %2246 = load i32, i32* %w13, align 4
  %shr3555 = lshr i32 %2246, 17
  %2247 = load i32, i32* %w13, align 4
  %shl3556 = shl i32 %2247, 15
  %or3557 = or i32 %shr3555, %shl3556
  %2248 = load i32, i32* %w13, align 4
  %shr3558 = lshr i32 %2248, 19
  %2249 = load i32, i32* %w13, align 4
  %shl3559 = shl i32 %2249, 13
  %or3560 = or i32 %shr3558, %shl3559
  %xor3561 = xor i32 %or3557, %or3560
  %2250 = load i32, i32* %w13, align 4
  %shr3562 = lshr i32 %2250, 10
  %xor3563 = xor i32 %xor3561, %shr3562
  %add3564 = add i32 %2245, %xor3563
  %2251 = load i32, i32* %w8, align 4
  %add3565 = add i32 %add3564, %2251
  %2252 = load i32, i32* %w0, align 4
  %shr3566 = lshr i32 %2252, 7
  %2253 = load i32, i32* %w0, align 4
  %shl3567 = shl i32 %2253, 25
  %or3568 = or i32 %shr3566, %shl3567
  %2254 = load i32, i32* %w0, align 4
  %shr3569 = lshr i32 %2254, 18
  %2255 = load i32, i32* %w0, align 4
  %shl3570 = shl i32 %2255, 14
  %or3571 = or i32 %shr3569, %shl3570
  %xor3572 = xor i32 %or3568, %or3571
  %2256 = load i32, i32* %w0, align 4
  %shr3573 = lshr i32 %2256, 3
  %xor3574 = xor i32 %xor3572, %shr3573
  %add3575 = add i32 %add3565, %xor3574
  %add3576 = add i32 %add3554, %add3575
  store i32 %add3576, i32* %t13537, align 4
  %2257 = load i32, i32* %b, align 4
  %shr3578 = lshr i32 %2257, 2
  %2258 = load i32, i32* %b, align 4
  %shl3579 = shl i32 %2258, 30
  %or3580 = or i32 %shr3578, %shl3579
  %2259 = load i32, i32* %b, align 4
  %shr3581 = lshr i32 %2259, 13
  %2260 = load i32, i32* %b, align 4
  %shl3582 = shl i32 %2260, 19
  %or3583 = or i32 %shr3581, %shl3582
  %xor3584 = xor i32 %or3580, %or3583
  %2261 = load i32, i32* %b, align 4
  %shr3585 = lshr i32 %2261, 22
  %2262 = load i32, i32* %b, align 4
  %shl3586 = shl i32 %2262, 10
  %or3587 = or i32 %shr3585, %shl3586
  %xor3588 = xor i32 %xor3584, %or3587
  %2263 = load i32, i32* %b, align 4
  %2264 = load i32, i32* %c, align 4
  %and3589 = and i32 %2263, %2264
  %2265 = load i32, i32* %d, align 4
  %2266 = load i32, i32* %b, align 4
  %2267 = load i32, i32* %c, align 4
  %or3590 = or i32 %2266, %2267
  %and3591 = and i32 %2265, %or3590
  %or3592 = or i32 %and3589, %and3591
  %add3593 = add i32 %xor3588, %or3592
  store i32 %add3593, i32* %t23577, align 4
  %2268 = load i32, i32* %t13537, align 4
  %2269 = load i32, i32* %e, align 4
  %add3594 = add i32 %2269, %2268
  store i32 %add3594, i32* %e, align 4
  %2270 = load i32, i32* %t13537, align 4
  %2271 = load i32, i32* %t23577, align 4
  %add3595 = add i32 %2270, %2271
  store i32 %add3595, i32* %a, align 4
  br label %do.end3596

do.end3596:                                       ; preds = %do.body3536
  %2272 = load i32, i32* %a, align 4
  %2273 = load i32*, i32** %s.addr, align 8
  %arrayidx3597 = getelementptr inbounds i32, i32* %2273, i64 0
  %2274 = load i32, i32* %arrayidx3597, align 4
  %add3598 = add i32 %2274, %2272
  store i32 %add3598, i32* %arrayidx3597, align 4
  %2275 = load i32, i32* %b, align 4
  %2276 = load i32*, i32** %s.addr, align 8
  %arrayidx3599 = getelementptr inbounds i32, i32* %2276, i64 1
  %2277 = load i32, i32* %arrayidx3599, align 4
  %add3600 = add i32 %2277, %2275
  store i32 %add3600, i32* %arrayidx3599, align 4
  %2278 = load i32, i32* %c, align 4
  %2279 = load i32*, i32** %s.addr, align 8
  %arrayidx3601 = getelementptr inbounds i32, i32* %2279, i64 2
  %2280 = load i32, i32* %arrayidx3601, align 4
  %add3602 = add i32 %2280, %2278
  store i32 %add3602, i32* %arrayidx3601, align 4
  %2281 = load i32, i32* %d, align 4
  %2282 = load i32*, i32** %s.addr, align 8
  %arrayidx3603 = getelementptr inbounds i32, i32* %2282, i64 3
  %2283 = load i32, i32* %arrayidx3603, align 4
  %add3604 = add i32 %2283, %2281
  store i32 %add3604, i32* %arrayidx3603, align 4
  %2284 = load i32, i32* %e, align 4
  %2285 = load i32*, i32** %s.addr, align 8
  %arrayidx3605 = getelementptr inbounds i32, i32* %2285, i64 4
  %2286 = load i32, i32* %arrayidx3605, align 4
  %add3606 = add i32 %2286, %2284
  store i32 %add3606, i32* %arrayidx3605, align 4
  %2287 = load i32, i32* %f, align 4
  %2288 = load i32*, i32** %s.addr, align 8
  %arrayidx3607 = getelementptr inbounds i32, i32* %2288, i64 5
  %2289 = load i32, i32* %arrayidx3607, align 4
  %add3608 = add i32 %2289, %2287
  store i32 %add3608, i32* %arrayidx3607, align 4
  %2290 = load i32, i32* %g, align 4
  %2291 = load i32*, i32** %s.addr, align 8
  %arrayidx3609 = getelementptr inbounds i32, i32* %2291, i64 6
  %2292 = load i32, i32* %arrayidx3609, align 4
  %add3610 = add i32 %2292, %2290
  store i32 %add3610, i32* %arrayidx3609, align 4
  %2293 = load i32, i32* %h, align 4
  %2294 = load i32*, i32** %s.addr, align 8
  %arrayidx3611 = getelementptr inbounds i32, i32* %2294, i64 7
  %2295 = load i32, i32* %arrayidx3611, align 4
  %add3612 = add i32 %2295, %2293
  store i32 %add3612, i32* %arrayidx3611, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @secp256k1_read_be32(i8* noundef %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 24
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %shl3 = shl i32 %conv2, 16
  %or = or i32 %shl, %shl3
  %4 = load i8*, i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %5 to i32
  %shl6 = shl i32 %conv5, 8
  %or7 = or i32 %or, %shl6
  %6 = load i8*, i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %6, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %or10 = or i32 %or7, %conv9
  ret i32 %or10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @secp256k1_write_be32(i8* noundef %p, i32 noundef %x) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %conv = trunc i32 %0 to i8
  %1 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i32, i32* %x.addr, align 4
  %shr = lshr i32 %2, 8
  %conv1 = trunc i32 %shr to i8
  %3 = load i8*, i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 2
  store i8 %conv1, i8* %arrayidx2, align 1
  %4 = load i32, i32* %x.addr, align 4
  %shr3 = lshr i32 %4, 16
  %conv4 = trunc i32 %shr3 to i8
  %5 = load i8*, i8** %p.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv4, i8* %arrayidx5, align 1
  %6 = load i32, i32* %x.addr, align 4
  %shr6 = lshr i32 %6, 24
  %conv7 = trunc i32 %shr6 to i8
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %7, i64 0
  store i8 %conv7, i8* %arrayidx8, align 1
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nounwind willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.0"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !5}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !5}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !5}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
