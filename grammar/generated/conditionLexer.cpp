
// Generated from conditionLexer.g4 by ANTLR 4.12.0


#include "conditionLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct ConditionLexerStaticData final {
  ConditionLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ConditionLexerStaticData(const ConditionLexerStaticData&) = delete;
  ConditionLexerStaticData(ConditionLexerStaticData&&) = delete;
  ConditionLexerStaticData& operator=(const ConditionLexerStaticData&) = delete;
  ConditionLexerStaticData& operator=(ConditionLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag conditionlexerLexerOnceFlag;
ConditionLexerStaticData *conditionlexerLexerStaticData = nullptr;

void conditionlexerLexerInitialize() {
  assert(conditionlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ConditionLexerStaticData>(
    std::vector<std::string>{
      "ULTOP", "ULEOP", "UGTOP", "UGEOP", "SLTOP", "SLEOP", "SGTOP", "SGEOP", 
      "EQOP", "ADDOP", "SUBOP", "MULOP", "POWOP", "ANDOP", "NOTOP", "OROP", 
      "AT", "PERCENT", "COMMA", "Colon", "Semicolon", "LPAR", "RPAR", "LBRAC", 
      "RBRAC", "LSQUARE", "RSQUARE", "VBAR", "DOTDOT", "PRIME", "TRUE", 
      "EQ", "EQMOD", "EQSMOD", "EQUMOD", "EQSREM", "ULIMBS", "SLIMBS", "CONST", 
      "INST_ADD", "INST_SUB", "INST_MUL", "INST_SQ", "UMOD", "SREM", "SMOD", 
      "ASSERT", "ASSUME", "AND", "OR", "VARS", "INT", "HEX", "VAR", "LL_VAR", 
      "LETTER", "UINT", "SINT", "LINE_COMMENT_ONE", "LINE_COMMENT_TWO", 
      "C_BLOCK_COMMENT", "M_BLOCK_COMMENT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "'<s'", "'<=s'", "'>s'", "'>=s'", "'='", "'+'", 
      "'-'", "'*'", "'**'", "'&'", "'!'", "'|'", "'@'", "'%'", "','", "':'", 
      "';'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'&&'", "'..'", "'''", 
      "'true'", "'eq'", "'eqmod'", "'eqsmod'", "'equmod'", "'eqsrem'", "", 
      "'slimbs'", "'const'", "'add'", "'sub'", "'mul'", "'sq'", "'umod'", 
      "'srem'", "'smod'", "'assert'", "'assume'", "'and'", "'or'", "'vars'", 
      "", "", "", "", "'uint'", "'sint'"
    },
    std::vector<std::string>{
      "", "ULTOP", "ULEOP", "UGTOP", "UGEOP", "SLTOP", "SLEOP", "SGTOP", 
      "SGEOP", "EQOP", "ADDOP", "SUBOP", "MULOP", "POWOP", "ANDOP", "NOTOP", 
      "OROP", "AT", "PERCENT", "COMMA", "Colon", "Semicolon", "LPAR", "RPAR", 
      "LBRAC", "RBRAC", "LSQUARE", "RSQUARE", "VBAR", "DOTDOT", "PRIME", 
      "TRUE", "EQ", "EQMOD", "EQSMOD", "EQUMOD", "EQSREM", "ULIMBS", "SLIMBS", 
      "CONST", "INST_ADD", "INST_SUB", "INST_MUL", "INST_SQ", "UMOD", "SREM", 
      "SMOD", "ASSERT", "ASSUME", "AND", "OR", "VARS", "INT", "HEX", "VAR", 
      "LL_VAR", "UINT", "SINT", "LINE_COMMENT_ONE", "LINE_COMMENT_TWO", 
      "C_BLOCK_COMMENT", "M_BLOCK_COMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,62,435,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,
  	1,0,1,0,3,0,131,8,0,1,1,1,1,1,1,1,1,1,1,3,1,138,8,1,1,2,1,2,1,2,3,2,143,
  	8,2,1,3,1,3,1,3,1,3,1,3,3,3,150,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
  	6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
  	12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
  	19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
  	26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
  	31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,259,
  	8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,
  	1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
  	1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
  	1,51,4,51,331,8,51,11,51,12,51,332,1,52,1,52,1,52,1,52,4,52,339,8,52,
  	11,52,12,52,340,1,53,1,53,1,53,5,53,346,8,53,10,53,12,53,349,9,53,1,54,
  	1,54,1,54,5,54,354,8,54,10,54,12,54,357,9,54,1,55,1,55,1,56,1,56,1,56,
  	1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,375,8,58,
  	10,58,12,58,378,9,58,1,58,3,58,381,8,58,1,58,1,58,1,58,1,58,1,59,1,59,
  	5,59,389,8,59,10,59,12,59,392,9,59,1,59,3,59,395,8,59,1,59,1,59,1,59,
  	1,59,1,60,1,60,1,60,1,60,5,60,405,8,60,10,60,12,60,408,9,60,1,60,1,60,
  	1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,419,8,61,10,61,12,61,422,9,61,
  	1,61,1,61,1,61,1,61,1,61,1,62,4,62,430,8,62,11,62,12,62,431,1,62,1,62,
  	4,376,390,406,420,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
  	45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	0,113,56,115,57,117,58,119,59,121,60,123,61,125,62,1,0,4,1,0,48,57,3,
  	0,48,57,65,70,97,102,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,451,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
  	1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,130,1,0,0,0,3,137,
  	1,0,0,0,5,142,1,0,0,0,7,149,1,0,0,0,9,151,1,0,0,0,11,154,1,0,0,0,13,158,
  	1,0,0,0,15,161,1,0,0,0,17,165,1,0,0,0,19,167,1,0,0,0,21,169,1,0,0,0,23,
  	171,1,0,0,0,25,173,1,0,0,0,27,176,1,0,0,0,29,178,1,0,0,0,31,180,1,0,0,
  	0,33,182,1,0,0,0,35,184,1,0,0,0,37,186,1,0,0,0,39,188,1,0,0,0,41,190,
  	1,0,0,0,43,192,1,0,0,0,45,194,1,0,0,0,47,196,1,0,0,0,49,198,1,0,0,0,51,
  	200,1,0,0,0,53,202,1,0,0,0,55,204,1,0,0,0,57,207,1,0,0,0,59,210,1,0,0,
  	0,61,212,1,0,0,0,63,217,1,0,0,0,65,220,1,0,0,0,67,226,1,0,0,0,69,233,
  	1,0,0,0,71,240,1,0,0,0,73,258,1,0,0,0,75,260,1,0,0,0,77,267,1,0,0,0,79,
  	273,1,0,0,0,81,277,1,0,0,0,83,281,1,0,0,0,85,285,1,0,0,0,87,288,1,0,0,
  	0,89,293,1,0,0,0,91,298,1,0,0,0,93,303,1,0,0,0,95,310,1,0,0,0,97,317,
  	1,0,0,0,99,321,1,0,0,0,101,324,1,0,0,0,103,330,1,0,0,0,105,334,1,0,0,
  	0,107,342,1,0,0,0,109,350,1,0,0,0,111,358,1,0,0,0,113,360,1,0,0,0,115,
  	365,1,0,0,0,117,370,1,0,0,0,119,386,1,0,0,0,121,400,1,0,0,0,123,414,1,
  	0,0,0,125,429,1,0,0,0,127,128,5,60,0,0,128,131,5,117,0,0,129,131,5,60,
  	0,0,130,127,1,0,0,0,130,129,1,0,0,0,131,2,1,0,0,0,132,133,5,60,0,0,133,
  	134,5,61,0,0,134,138,5,117,0,0,135,136,5,60,0,0,136,138,5,61,0,0,137,
  	132,1,0,0,0,137,135,1,0,0,0,138,4,1,0,0,0,139,140,5,62,0,0,140,143,5,
  	117,0,0,141,143,5,62,0,0,142,139,1,0,0,0,142,141,1,0,0,0,143,6,1,0,0,
  	0,144,145,5,62,0,0,145,146,5,61,0,0,146,150,5,117,0,0,147,148,5,62,0,
  	0,148,150,5,61,0,0,149,144,1,0,0,0,149,147,1,0,0,0,150,8,1,0,0,0,151,
  	152,5,60,0,0,152,153,5,115,0,0,153,10,1,0,0,0,154,155,5,60,0,0,155,156,
  	5,61,0,0,156,157,5,115,0,0,157,12,1,0,0,0,158,159,5,62,0,0,159,160,5,
  	115,0,0,160,14,1,0,0,0,161,162,5,62,0,0,162,163,5,61,0,0,163,164,5,115,
  	0,0,164,16,1,0,0,0,165,166,5,61,0,0,166,18,1,0,0,0,167,168,5,43,0,0,168,
  	20,1,0,0,0,169,170,5,45,0,0,170,22,1,0,0,0,171,172,5,42,0,0,172,24,1,
  	0,0,0,173,174,5,42,0,0,174,175,5,42,0,0,175,26,1,0,0,0,176,177,5,38,0,
  	0,177,28,1,0,0,0,178,179,5,33,0,0,179,30,1,0,0,0,180,181,5,124,0,0,181,
  	32,1,0,0,0,182,183,5,64,0,0,183,34,1,0,0,0,184,185,5,37,0,0,185,36,1,
  	0,0,0,186,187,5,44,0,0,187,38,1,0,0,0,188,189,5,58,0,0,189,40,1,0,0,0,
  	190,191,5,59,0,0,191,42,1,0,0,0,192,193,5,40,0,0,193,44,1,0,0,0,194,195,
  	5,41,0,0,195,46,1,0,0,0,196,197,5,123,0,0,197,48,1,0,0,0,198,199,5,125,
  	0,0,199,50,1,0,0,0,200,201,5,91,0,0,201,52,1,0,0,0,202,203,5,93,0,0,203,
  	54,1,0,0,0,204,205,5,38,0,0,205,206,5,38,0,0,206,56,1,0,0,0,207,208,5,
  	46,0,0,208,209,5,46,0,0,209,58,1,0,0,0,210,211,5,39,0,0,211,60,1,0,0,
  	0,212,213,5,116,0,0,213,214,5,114,0,0,214,215,5,117,0,0,215,216,5,101,
  	0,0,216,62,1,0,0,0,217,218,5,101,0,0,218,219,5,113,0,0,219,64,1,0,0,0,
  	220,221,5,101,0,0,221,222,5,113,0,0,222,223,5,109,0,0,223,224,5,111,0,
  	0,224,225,5,100,0,0,225,66,1,0,0,0,226,227,5,101,0,0,227,228,5,113,0,
  	0,228,229,5,115,0,0,229,230,5,109,0,0,230,231,5,111,0,0,231,232,5,100,
  	0,0,232,68,1,0,0,0,233,234,5,101,0,0,234,235,5,113,0,0,235,236,5,117,
  	0,0,236,237,5,109,0,0,237,238,5,111,0,0,238,239,5,100,0,0,239,70,1,0,
  	0,0,240,241,5,101,0,0,241,242,5,113,0,0,242,243,5,115,0,0,243,244,5,114,
  	0,0,244,245,5,101,0,0,245,246,5,109,0,0,246,72,1,0,0,0,247,248,5,108,
  	0,0,248,249,5,105,0,0,249,250,5,109,0,0,250,251,5,98,0,0,251,259,5,115,
  	0,0,252,253,5,117,0,0,253,254,5,108,0,0,254,255,5,105,0,0,255,256,5,109,
  	0,0,256,257,5,98,0,0,257,259,5,115,0,0,258,247,1,0,0,0,258,252,1,0,0,
  	0,259,74,1,0,0,0,260,261,5,115,0,0,261,262,5,108,0,0,262,263,5,105,0,
  	0,263,264,5,109,0,0,264,265,5,98,0,0,265,266,5,115,0,0,266,76,1,0,0,0,
  	267,268,5,99,0,0,268,269,5,111,0,0,269,270,5,110,0,0,270,271,5,115,0,
  	0,271,272,5,116,0,0,272,78,1,0,0,0,273,274,5,97,0,0,274,275,5,100,0,0,
  	275,276,5,100,0,0,276,80,1,0,0,0,277,278,5,115,0,0,278,279,5,117,0,0,
  	279,280,5,98,0,0,280,82,1,0,0,0,281,282,5,109,0,0,282,283,5,117,0,0,283,
  	284,5,108,0,0,284,84,1,0,0,0,285,286,5,115,0,0,286,287,5,113,0,0,287,
  	86,1,0,0,0,288,289,5,117,0,0,289,290,5,109,0,0,290,291,5,111,0,0,291,
  	292,5,100,0,0,292,88,1,0,0,0,293,294,5,115,0,0,294,295,5,114,0,0,295,
  	296,5,101,0,0,296,297,5,109,0,0,297,90,1,0,0,0,298,299,5,115,0,0,299,
  	300,5,109,0,0,300,301,5,111,0,0,301,302,5,100,0,0,302,92,1,0,0,0,303,
  	304,5,97,0,0,304,305,5,115,0,0,305,306,5,115,0,0,306,307,5,101,0,0,307,
  	308,5,114,0,0,308,309,5,116,0,0,309,94,1,0,0,0,310,311,5,97,0,0,311,312,
  	5,115,0,0,312,313,5,115,0,0,313,314,5,117,0,0,314,315,5,109,0,0,315,316,
  	5,101,0,0,316,96,1,0,0,0,317,318,5,97,0,0,318,319,5,110,0,0,319,320,5,
  	100,0,0,320,98,1,0,0,0,321,322,5,111,0,0,322,323,5,114,0,0,323,100,1,
  	0,0,0,324,325,5,118,0,0,325,326,5,97,0,0,326,327,5,114,0,0,327,328,5,
  	115,0,0,328,102,1,0,0,0,329,331,7,0,0,0,330,329,1,0,0,0,331,332,1,0,0,
  	0,332,330,1,0,0,0,332,333,1,0,0,0,333,104,1,0,0,0,334,335,5,48,0,0,335,
  	336,5,120,0,0,336,338,1,0,0,0,337,339,7,1,0,0,338,337,1,0,0,0,339,340,
  	1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,106,1,0,0,0,342,347,3,111,
  	55,0,343,346,3,111,55,0,344,346,2,48,57,0,345,343,1,0,0,0,345,344,1,0,
  	0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,108,1,0,0,0,349,
  	347,1,0,0,0,350,355,3,35,17,0,351,354,3,111,55,0,352,354,2,48,57,0,353,
  	351,1,0,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,
  	0,0,0,356,110,1,0,0,0,357,355,1,0,0,0,358,359,7,2,0,0,359,112,1,0,0,0,
  	360,361,5,117,0,0,361,362,5,105,0,0,362,363,5,110,0,0,363,364,5,116,0,
  	0,364,114,1,0,0,0,365,366,5,115,0,0,366,367,5,105,0,0,367,368,5,110,0,
  	0,368,369,5,116,0,0,369,116,1,0,0,0,370,371,5,47,0,0,371,372,5,47,0,0,
  	372,376,1,0,0,0,373,375,9,0,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,377,
  	1,0,0,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,379,381,5,13,
  	0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,5,10,0,0,
  	383,384,1,0,0,0,384,385,6,58,0,0,385,118,1,0,0,0,386,390,5,35,0,0,387,
  	389,9,0,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,391,1,0,0,0,390,388,1,
  	0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,393,395,5,13,0,0,394,393,1,0,0,
  	0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,5,10,0,0,397,398,1,0,0,0,398,
  	399,6,59,0,0,399,120,1,0,0,0,400,401,5,47,0,0,401,402,5,42,0,0,402,406,
  	1,0,0,0,403,405,9,0,0,0,404,403,1,0,0,0,405,408,1,0,0,0,406,407,1,0,0,
  	0,406,404,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,410,5,42,0,0,410,
  	411,5,47,0,0,411,412,1,0,0,0,412,413,6,60,0,0,413,122,1,0,0,0,414,415,
  	5,40,0,0,415,416,5,42,0,0,416,420,1,0,0,0,417,419,9,0,0,0,418,417,1,0,
  	0,0,419,422,1,0,0,0,420,421,1,0,0,0,420,418,1,0,0,0,421,423,1,0,0,0,422,
  	420,1,0,0,0,423,424,5,42,0,0,424,425,5,41,0,0,425,426,1,0,0,0,426,427,
  	6,61,0,0,427,124,1,0,0,0,428,430,7,3,0,0,429,428,1,0,0,0,430,431,1,0,
  	0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,6,62,0,0,
  	434,126,1,0,0,0,19,0,130,137,142,149,258,332,340,345,347,353,355,376,
  	380,390,394,406,420,431,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  conditionlexerLexerStaticData = staticData.release();
}

}

conditionLexer::conditionLexer(CharStream *input) : Lexer(input) {
  conditionLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *conditionlexerLexerStaticData->atn, conditionlexerLexerStaticData->decisionToDFA, conditionlexerLexerStaticData->sharedContextCache);
}

conditionLexer::~conditionLexer() {
  delete _interpreter;
}

std::string conditionLexer::getGrammarFileName() const {
  return "conditionLexer.g4";
}

const std::vector<std::string>& conditionLexer::getRuleNames() const {
  return conditionlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& conditionLexer::getChannelNames() const {
  return conditionlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& conditionLexer::getModeNames() const {
  return conditionlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& conditionLexer::getVocabulary() const {
  return conditionlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView conditionLexer::getSerializedATN() const {
  return conditionlexerLexerStaticData->serializedATN;
}

const atn::ATN& conditionLexer::getATN() const {
  return *conditionlexerLexerStaticData->atn;
}




void conditionLexer::initialize() {
  ::antlr4::internal::call_once(conditionlexerLexerOnceFlag, conditionlexerLexerInitialize);
}
